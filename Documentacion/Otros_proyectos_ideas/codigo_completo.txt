# DOCUMENTACIÓN COMPLETA DEL PROYECTO CONEXION-MAIN
# Generado el 30/05/2025 08:07

==============================================================================
ARCHIVO: index.php
==============================================================================

<?php
// filepath: c:\xampp\htdocs\Conexion-Main\index.php

// Inicializar router
$router = require_once __DIR__ . '/backend/config/routes.php';

// Obtener ruta solicitada
$requestPath = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);
$basePath = '/Conexion-Main'; // Ajusta según tu configuración

// Eliminar el prefijo base para obtener la ruta relativa
if (strpos($requestPath, $basePath) === 0) {
    $requestPath = substr($requestPath, strlen($basePath));
}

// Asegurarse de que la ruta comienza con /
$requestPath = '/' . ltrim($requestPath, '/');

// Despachar la ruta
$router->dispatch($requestPath);


==============================================================================
ARCHIVO: mover_imagenes.php
==============================================================================

<?php
// Script para mover imágenes de uploads/ a frontend/img/
$origen = __DIR__ . '/uploads/';
$destino = __DIR__ . '/frontend/img/';

// Verificar que las carpetas existen
if (!is_dir($origen)) {
    die("Error: Carpeta origen no existe.");
}
if (!is_dir($destino)) {
    mkdir($destino, 0755, true);
}

// Obtener todos los archivos de la carpeta origen
$archivos = glob($origen . '*.*');
$contador = 0;

// Mover cada archivo
foreach ($archivos as $archivo) {
    $nombre = basename($archivo);
    if (copy($archivo, $destino . $nombre)) {
        echo "Copiado: $nombre<br>";
        $contador++;
    } else {
        echo "Error al copiar: $nombre<br>";
    }
}

echo "Total de archivos copiados: $contador";


==============================================================================
ARCHIVO: backend\config\cors.php
==============================================================================

<?php
/**
 * Configuración global de CORS para la aplicación
 * Detecta automáticamente entornos y configura las cabeceras adecuadamente
 */

// Obtener el origen de la solicitud
$origin = isset($_SERVER['HTTP_ORIGIN']) ? $_SERVER['HTTP_ORIGIN'] : '';
$referer = isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : '';

// Función para extraer el dominio base
function getDomainFromUrl($url) {
    $parsedUrl = parse_url($url);
    return isset($parsedUrl['host']) ? $parsedUrl['host'] : '';
}

// Detectar si estamos usando ngrok o localtunnel
$isTunnel = false;
$tunnelDomain = '';

// Detectar ngrok
if (strpos($origin, 'ngrok-free.app') !== false) {
    $isTunnel = true;
    $tunnelDomain = $origin;
} elseif (strpos($referer, 'ngrok-free.app') !== false) {
    $isTunnel = true;
    $tunnelDomain = preg_replace('/^(https?:\/\/[^\/]+).*$/', '$1', $referer);
}

// Detectar localtunnel
if (!$isTunnel) {
    if (strpos($origin, 'loca.lt') !== false) {
        $isTunnel = true;
        $tunnelDomain = $origin;
    } elseif (strpos($referer, 'loca.lt') !== false) {
        $isTunnel = true;
        $tunnelDomain = preg_replace('/^(https?:\/\/[^\/]+).*$/', '$1', $referer);
    }
}

// Configurar los encabezados CORS según el entorno
if ($isTunnel) {
    // Si es un túnel, permitir ese origen específico
    header("Access-Control-Allow-Origin: $tunnelDomain");
    error_log("CORS: Permitido origen de túnel: $tunnelDomain");
} elseif (in_array($_SERVER['SERVER_NAME'] ?? '', ['localhost', '127.0.0.1'])) {
    // Entorno de desarrollo local
    header('Access-Control-Allow-Origin: *');
    error_log("CORS: Permitido cualquier origen (desarrollo local)");
} else {
    // Entorno de producción - aquí puedes definir dominios específicos
    $allowedDomains = [
        'tudominio.com',
        'www.tudominio.com'
    ];
    
    $domain = getDomainFromUrl($origin);
    if (in_array($domain, $allowedDomains)) {
        header("Access-Control-Allow-Origin: $origin");
        error_log("CORS: Permitido origen de producción: $origin");
    }
}

// Configurar otros encabezados CORS
header('Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type, Authorization, X-Requested-With, X-XSRF-TOKEN');
header('Access-Control-Allow-Credentials: true');
header('Access-Control-Max-Age: 86400'); // 24 horas

// Si es una solicitud OPTIONS (preflight), terminar aquí
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    exit(0);
}


==============================================================================
ARCHIVO: backend\config\database.php
==============================================================================

<?php
class Database {
    private $host = "localhost";
    private $db_name = "conexion_usuarios";
    private $username = "root";
    private $password = "";
    public $conn;

    public function connect() {
        $this->conn = null;
        try {
            $this->conn = new PDO(
                "mysql:host=" . $this->host . ";dbname=" . $this->db_name . ";charset=utf8",
                $this->username,
                $this->password
            );
            $this->conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        } catch(PDOException $exception) {
            die("Error de conexión: " . $exception->getMessage());
        }
        return $this->conn;
    }
}


==============================================================================
ARCHIVO: backend\config\router.php
==============================================================================

<?php
// filepath: c:\xampp\htdocs\Conexion-Main\backend\config\router.php

class Router {
    private $routes = [];
    private $authRoutes = [];
    private $roleRoutes = [];
    
    // Registrar una ruta pública (accesible sin login)
    public function get($path, $controller) {
        $this->routes[$path] = $controller;
    }
    
    // Registrar una ruta que requiere autenticación
    public function auth($path, $controller) {
        $this->authRoutes[$path] = $controller;
    }
    
    // Registrar una ruta que requiere un rol específico
    public function role($path, $controller, $roles = []) {
        $this->roleRoutes[$path] = [
            'controller' => $controller,
            'roles' => $roles
        ];
    }
    
    // Procesar la solicitud actual
    public function dispatch($requestPath) {
        session_start();
        $isAuthenticated = isset($_SESSION['user']);
        $userRole = $isAuthenticated ? ($_SESSION['user']['role'] ?? 'user') : null;
        
        // Verificar rutas públicas
        if (isset($this->routes[$requestPath])) {
            return $this->executeController($this->routes[$requestPath]);
        }
        
        // Verificar rutas que requieren autenticación
        if (isset($this->authRoutes[$requestPath])) {
            if (!$isAuthenticated) {
                header('Location: /Conexion-Main/index.html?error=no_auth');
                exit;
            }
            return $this->executeController($this->authRoutes[$requestPath]);
        }
        
        // Verificar rutas que requieren rol específico
        if (isset($this->roleRoutes[$requestPath])) {
            if (!$isAuthenticated) {
                header('Location: /Conexion-Main/index.html?error=no_auth');
                exit;
            }
            
            $routeConfig = $this->roleRoutes[$requestPath];
            if (!in_array($userRole, $routeConfig['roles'])) {
                header('Location: /Conexion-Main/frontend/views/acceso_denegado.php');
                exit;
            }
            
            return $this->executeController($routeConfig['controller']);
        }
        
        // No se encontró la ruta
        header('HTTP/1.0 404 Not Found');
        include __DIR__ . '/../../frontend/views/404.php';
        exit;
    }
    
    private function executeController($controller) {
        if (is_callable($controller)) {
            return $controller();
        } elseif (is_string($controller) && file_exists($controller)) {
            include $controller;
            return true;
        }
        throw new Exception("Controller not valid");
    }
}


==============================================================================
ARCHIVO: backend\config\routes.php
==============================================================================

<?php
// filepath: c:\xampp\htdocs\Conexion-Main\backend\config\routes.php

require_once __DIR__ . '/router.php';

$router = new Router();

// Rutas públicas
$router->get('/', '../../index.html');
$router->get('/index.html', '../../index.html');
$router->get('/login', '../controllers/login.php');

// Rutas que requieren autenticación
$router->auth('/admin', '../../frontend/views/admin.php');
$router->auth('/vista_estadisticas_personales.php', '../../frontend/views/vista_estadisticas_personales.php');
$router->auth('/base_datos_personal.php', '../../frontend/views/base_datos_personal.php');

// Rutas que requieren roles específicos
$router->role('/vista_conector.php', '../../frontend/views/vista_conector.php', ['admin', 'supervisor']);
$router->role('/vista_informes.php', '../../frontend/views/vista_informes.php', ['admin', 'supervisor']);

return $router;


==============================================================================
ARCHIVO: backend\controllers\actualizar_estado.php
==============================================================================

<?php
// filepath: c:\xampp\htdocs\conexion-main\conexion-main\backend\controllers\actualizar_estado.php

require_once __DIR__ . '/../config/database.php';
require_once __DIR__ . '/../config/cors.php';

file_put_contents(__DIR__ . '/debug_estado.log', "Llamada recibida: " . json_encode($_POST) . "\n", FILE_APPEND);

if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['id'], $_POST['estado'])) {
    $id = intval($_POST['id']);
    $estado = $_POST['estado'];

    try {
        $db = new Database();
        $conn = $db->connect();
        $stmt = $conn->prepare("UPDATE registros SET estado = :estado WHERE id = :id");
        $stmt->bindParam(':estado', $estado);
        $stmt->bindParam(':id', $id);
        $stmt->execute();
        
        // Añadir logging para debug
        file_put_contents(__DIR__ . '/debug_estado.txt', 
            date('Y-m-d H:i:s') . " - Actualizando estado: " . 
            $id . " - " . $estado . "\n", 
            FILE_APPEND);

        // Log para depuración
        file_put_contents(__DIR__ . '/debug_estado.log', "ID: $id, Estado: $estado, Filas: " . $stmt->rowCount() . "\n", FILE_APPEND);
        echo json_encode(['success' => true, 'message' => 'Estado actualizado correctamente']);
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
    }
} else {
    echo "Datos incompletos.";
}


==============================================================================
ARCHIVO: backend\controllers\actualizar_registro.php
==============================================================================

<?php
require_once __DIR__ . '/../config/database.php';
require_once __DIR__ . '/../config/cors.php';

if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['id'])) {
    // Procesar la foto si se subió una nueva
    $foto = '';
    if (isset($_FILES['foto']) && $_FILES['foto']['error'] === UPLOAD_ERR_OK) {
        $ext = pathinfo($_FILES['foto']['name'], PATHINFO_EXTENSION);
        $foto = uniqid('foto_') . '.' . $ext;
        move_uploaded_file($_FILES['foto']['tmp_name'], __DIR__ . '/../../frontend/img/' . $foto);
    } else {
        // Si no se subió una nueva, mantener la foto actual
        $foto = $_POST['foto_actual'] ?? '';
    }

    // Añadir al controlador de actualización
    $proximo_contacto = !empty($_POST['proximo_contacto']) ? $_POST['proximo_contacto'] : null;

    $sql = "UPDATE registros SET 
        nombre_persona = :nombre_persona,
        apellido_persona = :apellido_persona,
        telefono = :telefono,
        nombre_conector = :nombre_conector,
        nombre_quien_trajo = :nombre_quien_trajo,
        estado = :estado,
        foto = :foto,
        fecha_contacto = :fecha_contacto,
        formulario_nuevos = :formulario_nuevos,
        formulario_llamadas = :formulario_llamadas,
        subido_por = :subido_por,
        fecha_ultimo_contacto = :fecha_ultimo_contacto,
        cumpleanos = :cumpleanos,
        observaciones = :observaciones,
        proximo_contacto = :proximo_contacto
        WHERE id = :id";

    $params = [
        ':nombre_persona' => $_POST['nombre_persona'] ?? '',
        ':apellido_persona' => $_POST['apellido_persona'] ?? '',
        ':telefono' => $_POST['telefono'] ?? '',
        ':nombre_conector' => $_POST['nombre_conector'] ?? '',
        ':nombre_quien_trajo' => $_POST['nombre_quien_trajo'] ?? '',
        ':estado' => $_POST['estado'] ?? '',
        ':foto' => $foto,
        ':fecha_contacto' => $_POST['fecha_contacto'] ?? '',
        ':formulario_nuevos' => $_POST['formulario_nuevos'] ?? '',
        ':formulario_llamadas' => $_POST['formulario_llamadas'] ?? '',
        ':subido_por' => $_POST['subido_por'] ?? '',
        ':fecha_ultimo_contacto' => $_POST['fecha_ultimo_contacto'] ?? '',
        ':cumpleanos' => $_POST['cumpleanos'] ?? '',
        ':observaciones' => $_POST['observaciones'] ?? '',
        ':proximo_contacto' => $proximo_contacto,
        ':id' => $_POST['id']
    ];

    try {
        $db = new Database();
        $conn = $db->connect();
        $stmt = $conn->prepare($sql);
        $stmt->execute($params);
        echo "Registro actualizado correctamente";
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
    }
} else {
    echo "Datos incompletos.";
}


==============================================================================
ARCHIVO: backend\controllers\agregar_observacion.php
==============================================================================

<?php
require_once __DIR__ . '/../config/database.php';
require_once __DIR__ . '/../config/cors.php';

// Iniciar sesión para obtener datos del usuario
session_start();

// Configurar cabecera JSON para la respuesta
header('Content-Type: application/json');

// Verificar que se recibieron los datos necesarios
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['id'], $_POST['observaciones'])) {
    
    // Obtener y validar datos
    $id = intval($_POST['id']);
    $observacion = trim($_POST['observaciones']);
    
    if (empty($observacion)) {
        echo json_encode(['success' => false, 'message' => 'La observación no puede estar vacía']);
        exit;
    }
    
    try {
        // Conectar a la base de datos
        $db = new Database();
        $conn = $db->connect();
        
        // 1. Obtener registro actual y sus observaciones previas
        $stmtGet = $conn->prepare("SELECT observaciones FROM registros WHERE id = :id");
        $stmtGet->bindValue(':id', $id, PDO::PARAM_INT);
        $stmtGet->execute();
        $registro = $stmtGet->fetch(PDO::FETCH_ASSOC);
        
        if (!$registro) {
            echo json_encode(['success' => false, 'message' => 'Registro no encontrado']);
            exit;
        }
        
        // 2. Formatear la nueva observación con fecha y usuario
        $fecha = date('d/m/Y H:i');
        $usuario = isset($_SESSION['user']['nombre']) ? $_SESSION['user']['nombre'] : 'sistema';
        $observacionFormateada = "[$fecha - $usuario]: $observacion";
        
        // 3. Combinar observaciones existentes con la nueva
        $observacionesActualizadas = $registro['observaciones'];
        if (!empty($observacionesActualizadas)) {
            $observacionesActualizadas .= "\n\n" . $observacionFormateada;
        } else {
            $observacionesActualizadas = $observacionFormateada;
        }
        
        // 4. Actualizar el registro
        $sql = "UPDATE registros SET 
                observaciones = :observaciones,
                fecha_ultimo_contacto = NOW()
                WHERE id = :id";
                
        $stmt = $conn->prepare($sql);
        $stmt->bindParam(':observaciones', $observacionesActualizadas, PDO::PARAM_STR);
        $stmt->bindParam(':id', $id, PDO::PARAM_INT);
        
        $resultado = $stmt->execute();
        $filasAfectadas = $stmt->rowCount();
        
        // 5. Devolver respuesta JSON
        echo json_encode([
            'success' => ($resultado && $filasAfectadas > 0),
            'message' => ($resultado && $filasAfectadas > 0) ? 'Observación guardada correctamente' : 'No se actualizó el registro',
            'observaciones' => $observacionesActualizadas
        ]);
        
    } catch (PDOException $e) {
        // Manejar errores de base de datos
        error_log("Error en agregar_observacion.php: " . $e->getMessage());
        echo json_encode(['success' => false, 'message' => 'Error en la base de datos']);
    }
} else {
    // Si faltan datos
    echo json_encode(['success' => false, 'message' => 'Datos incompletos o método incorrecto']);
}


==============================================================================
ARCHIVO: backend\controllers\check_auth.php
==============================================================================

<?php
// filepath: c:\xampp\htdocs\Conexion-Main\backend\controllers\check_auth.php

// Iniciar sesión solo si aún no está activa
if (session_status() == PHP_SESSION_NONE) {
    session_start();
}

// Función para verificar autenticación
function checkAuth($requiredRole = 'user') {
    // Verificar si el usuario está autenticado
    if (!isset($_SESSION['user'])) {
        header('Location: ../../index.html?error=no_auth');
        exit;
    }
    
    // Verificar rol si es necesario
    if ($requiredRole !== 'user') {
        $userRole = $_SESSION['user']['role'] ?? 'user';
        if ($userRole != 'admin' && $userRole != $requiredRole) {
            header('Location: ./acceso_denegado.php');
            exit;
        }
    }
    
    // Usuario autenticado y con rol adecuado
    return true;
}


==============================================================================
ARCHIVO: backend\controllers\check_upload_limits.php
==============================================================================

<?php
// filepath: c:\xampp\htdocs\conexion-main\backend\controllers\check_upload_limits.php
require_once __DIR__ . '/../config/cors.php';

header('Content-Type: application/json');

echo json_encode([
    'post_max_size' => ini_get('post_max_size'),
    'upload_max_filesize' => ini_get('upload_max_filesize'),
    'max_file_uploads' => ini_get('max_file_uploads'),
    'memory_limit' => ini_get('memory_limit'),
    'max_execution_time' => ini_get('max_execution_time')
]);


==============================================================================
ARCHIVO: backend\controllers\eliminar_registro.php
==============================================================================

<?php
require_once __DIR__ . '/../config/cors.php';

// Iniciar sesión y conectar a la base de datos
session_start();
require_once __DIR__ . '/../config/database.php';

// Verificar si el usuario está autenticado
if (!isset($_SESSION['user'])) {
    header('Content-Type: application/json');
    echo json_encode(['success' => false, 'message' => 'No autorizado']);
    exit;
}

// Configurar encabezado JSON
header('Content-Type: application/json');

// Depuración
error_log("REQUEST_METHOD: " . $_SERVER['REQUEST_METHOD']);
error_log("POST data: " . json_encode($_POST));

// Verificar solicitud
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['id'])) {
    $id = intval($_POST['id']);
    
    // Validar ID
    if ($id <= 0) {
        error_log("ID inválido: $id");
        echo json_encode(['success' => false, 'message' => 'ID de registro inválido']);
        exit;
    }
    
    try {
        $db = new Database();
        $conn = $db->connect();
        
        // Verificar que el registro exista antes de eliminar
        $stmtCheck = $conn->prepare("SELECT id FROM registros WHERE id = :id");
        $stmtCheck->bindValue(':id', $id, PDO::PARAM_INT);
        $stmtCheck->execute();
        
        if (!$stmtCheck->fetch()) {
            error_log("Registro no encontrado: $id");
            echo json_encode(['success' => false, 'message' => 'El registro no existe']);
            exit;
        }
        
        // Eliminar el registro
        $stmt = $conn->prepare("DELETE FROM registros WHERE id = :id");
        $stmt->bindValue(':id', $id, PDO::PARAM_INT);
        
        $resultado = $stmt->execute();
        $filasAfectadas = $stmt->rowCount();
        
        error_log("Resultado eliminación registro $id: " . ($resultado ? 'true' : 'false'));
        error_log("Filas afectadas: $filasAfectadas");
        
        // Responder al cliente
        echo json_encode([
            'success' => ($resultado && $filasAfectadas > 0), 
            'message' => ($resultado && $filasAfectadas > 0) ? 'Registro eliminado correctamente' : 'No se pudo eliminar el registro',
            'id' => $id,
            'filas_afectadas' => $filasAfectadas
        ]);
        
    } catch (PDOException $e) {
        error_log("Error en eliminar_registro.php: " . $e->getMessage());
        echo json_encode(['success' => false, 'message' => 'Error en la base de datos: ' . $e->getMessage()]);
    }
} else {
    error_log("Solicitud inválida a eliminar_registro.php");
    echo json_encode(['success' => false, 'message' => 'Datos incompletos o método incorrecto']);
}


==============================================================================
ARCHIVO: backend\controllers\generar_informe.php
==============================================================================

<?php
require_once __DIR__ . '/../config/database.php';

// Iniciar sesión
session_start();

// Para desarrollo: mostrar todos los errores
error_reporting(E_ALL);
ini_set('display_errors', 1);

// Verificación de sesión (comentar temporalmente para pruebas si es necesario)
// if (!isset($_SESSION['user'])) {
//     header('Content-Type: text/plain');
//     echo "Error: No hay sesión activa.";
//     exit;
// }

// Obtener parámetros del formulario
$tipoInforme = isset($_POST['tipo-informe']) ? $_POST['tipo-informe'] : '';
$conector = isset($_POST['conector']) ? $_POST['conector'] : '';
$estado = isset($_POST['estado']) ? $_POST['estado'] : '';
$fechaInicio = isset($_POST['fecha-inicio']) ? $_POST['fecha-inicio'] : '';
$fechaFin = isset($_POST['fecha-fin']) ? $_POST['fecha-fin'] : '';
$incluirCabecera = isset($_POST['incluir-cabecera']) ? true : false;
$incluirDetalle = isset($_POST['incluir-detalle']) ? true : false;
$incluirResumen = isset($_POST['incluir-resumen']) ? true : false;
$vistaPrevista = isset($_POST['vista_previa']) ? ($_POST['vista_previa'] == '1') : false;

// Normalizar el tipo de informe
$tipoInforme = strtolower(trim($tipoInforme));

// Crear el informe
$informe = generarInforme(
    $tipoInforme, 
    $conector, 
    $estado, 
    $fechaInicio, 
    $fechaFin, 
    $incluirCabecera, 
    $incluirDetalle, 
    $incluirResumen
);

// Si es vista previa, devolver HTML, si no, enviar para descarga
if ($vistaPrevista) {
    header('Content-Type: text/plain; charset=utf-8');
    echo $informe;
} else {
    $fecha = date('Y-m-d');
    $nombreArchivo = "informe_{$fecha}.txt";
    
    // Encabezados para forzar la descarga
    header('Content-Type: text/plain; charset=utf-8');
    header('Content-Disposition: attachment; filename="' . $nombreArchivo . '"');
    header('Content-Length: ' . strlen($informe));
    header('Cache-Control: private, max-age=0, must-revalidate');
    header('Pragma: public');
    
    // Asegurarse de que no haya salida antes de los encabezados
    if (ob_get_level()) ob_end_clean();
    
    echo $informe;
}
exit;

/**
 * Genera el contenido del informe según los parámetros
 */
function generarInforme($tipoInforme, $conector, $estado, $fechaInicio, $fechaFin, $incluirCabecera, $incluirDetalle, $incluirResumen) {
    $db = new Database();
    $conn = $db->connect();
    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    $resultado = "";
    
    // Añadir cabecera si está seleccionada
    if ($incluirCabecera) {
        $resultado .= "=======================================================\n";
        $resultado .= "                INFORME DE CONEXIÓN                    \n";
        $resultado .= "=======================================================\n";
        $resultado .= "Fecha de generación: " . date('d/m/Y H:i:s') . "\n";
        $resultado .= "Tipo de informe: " . obtenerNombreTipoInforme($tipoInforme) . "\n";
        
        if ($conector) {
            $resultado .= "Conector: " . $conector . "\n";
        }
        
        if ($estado) {
            $resultado .= "Estado: " . $estado . "\n";
        }
        
        if ($fechaInicio && $fechaFin) {
            $resultado .= "Período: Del " . date('d/m/Y', strtotime($fechaInicio)) . " al " . date('d/m/Y', strtotime($fechaFin)) . "\n";
        } elseif ($fechaInicio) {
            $resultado .= "Período: Desde " . date('d/m/Y', strtotime($fechaInicio)) . "\n";
        } elseif ($fechaFin) {
            $resultado .= "Período: Hasta " . date('d/m/Y', strtotime($fechaFin)) . "\n";
        }
        
        $resultado .= "=======================================================\n\n";
    }
    
    // Generar el contenido según el tipo de informe
    switch ($tipoInforme) {
        case 'general':
            $resultado .= generarInformeGeneral($conn, $fechaInicio, $fechaFin, $incluirDetalle);
            break;
            
        case 'personal':
            $resultado .= generarInformePersonal($conn, $conector, $fechaInicio, $fechaFin, $incluirDetalle);
            break;
            
        case 'estados':
            $resultado .= generarInformeEstados($conn, $estado, $fechaInicio, $fechaFin, $incluirDetalle);
            break;
            
        case 'detallado':
            $resultado .= generarInformeDetallado($conn, $conector, $estado, $fechaInicio, $fechaFin, $incluirDetalle);
            break;
            
        default:
            $resultado .= "No se ha seleccionado un tipo de informe válido.\n";
    }
    
    // Añadir resumen si está seleccionado
    if ($incluirResumen) {
        $resultado .= "\n=======================================================\n";
        $resultado .= "                     RESUMEN                           \n";
        $resultado .= "=======================================================\n";
        
        // Obtener totales generales
        $sql = "SELECT COUNT(*) as total FROM registros WHERE 1=1";
        
        if ($conector) {
            $sql .= " AND nombre_conector = :conector";
        }
        
        if ($estado) {
            $sql .= " AND estado = :estado";
        }
        
        if ($fechaInicio) {
            $sql .= " AND fecha_contacto >= :fecha_inicio";
        }
        
        if ($fechaFin) {
            $sql .= " AND fecha_contacto <= :fecha_fin";
        }
        
        $stmt = $conn->prepare($sql);
        
        if ($conector) {
            $stmt->bindParam(':conector', $conector);
        }
        
        if ($estado) {
            $stmt->bindParam(':estado', $estado);
        }
        
        if ($fechaInicio) {
            $fechaInicioDb = $fechaInicio . ' 00:00:00';
            $stmt->bindParam(':fecha_inicio', $fechaInicioDb);
        }
        
        if ($fechaFin) {
            $fechaFinDb = $fechaFin . ' 23:59:59';
            $stmt->bindParam(':fecha_fin', $fechaFinDb);
        }
        
        $stmt->execute();
        $totalRegistros = $stmt->fetch(PDO::FETCH_ASSOC)['total'];
        
        $resultado .= "Total de registros: " . $totalRegistros . "\n";
        
        // Añadir más estadísticas al resumen según el tipo de informe
        switch ($tipoInforme) {
            case 'general':
                $resultado .= generarResumenGeneral($conn, $fechaInicio, $fechaFin);
                break;
                
            case 'personal':
                $resultado .= generarResumenPersonal($conn, $conector, $fechaInicio, $fechaFin);
                break;
                
            case 'estados':
                $resultado .= generarResumenEstados($conn, $estado, $fechaInicio, $fechaFin);
                break;
        }
    }
    
    return $resultado;
}

/**
 * Obtiene el nombre descriptivo del tipo de informe
 */
function obtenerNombreTipoInforme($tipo) {
    switch ($tipo) {
        case 'general': return 'Estadísticas Generales';
        case 'personal': return 'Estadísticas por Conector';
        case 'estados': return 'Distribución por Estados';
        case 'detallado': return 'Listado Detallado';
        default: return 'Desconocido';
    }
}

/**
 * Genera informe de estadísticas generales
 */
function generarInformeGeneral($conn, $fechaInicio, $fechaFin, $incluirDetalle) {
    $resultado = "ESTADÍSTICAS GENERALES\n";
    $resultado .= "---------------------\n\n";
    
    // Consulta para obtener conteo por conector
    $sql = "SELECT nombre_conector, COUNT(*) as total FROM registros WHERE nombre_conector IS NOT NULL AND nombre_conector != ''";
    
    if ($fechaInicio) {
        $sql .= " AND fecha_contacto >= :fecha_inicio";
    }
    
    if ($fechaFin) {
        $sql .= " AND fecha_contacto <= :fecha_fin";
    }
    
    $sql .= " GROUP BY nombre_conector ORDER BY total DESC";
    
    $stmt = $conn->prepare($sql);
    
    if ($fechaInicio) {
        $fechaInicioDb = $fechaInicio . ' 00:00:00';
        $stmt->bindParam(':fecha_inicio', $fechaInicioDb);
    }
    
    if ($fechaFin) {
        $fechaFinDb = $fechaFin . ' 23:59:59';
        $stmt->bindParam(':fecha_fin', $fechaFinDb);
    }
    
    $stmt->execute();
    $conectores = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    $resultado .= "DISTRIBUCIÓN POR CONECTORES:\n";
    foreach ($conectores as $row) {
        $resultado .= str_pad($row['nombre_conector'], 30) . ": " . $row['total'] . " registros\n";
    }
    
    // Consulta para obtener conteo por estado
    $sql = "SELECT estado, COUNT(*) as total FROM registros WHERE estado IS NOT NULL AND estado != ''";
    
    if ($fechaInicio) {
        $sql .= " AND fecha_contacto >= :fecha_inicio";
    }
    
    if ($fechaFin) {
        $sql .= " AND fecha_contacto <= :fecha_fin";
    }
    
    $sql .= " GROUP BY estado ORDER BY total DESC";
    
    $stmt = $conn->prepare($sql);
    
    if ($fechaInicio) {
        $fechaInicioDb = $fechaInicio . ' 00:00:00';
        $stmt->bindParam(':fecha_inicio', $fechaInicioDb);
    }
    
    if ($fechaFin) {
        $fechaFinDb = $fechaFin . ' 23:59:59';
        $stmt->bindParam(':fecha_fin', $fechaFinDb);
    }
    
    $stmt->execute();
    $estados = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    $resultado .= "\nDISTRIBUCIÓN POR ESTADOS:\n";
    foreach ($estados as $row) {
        $resultado .= str_pad($row['estado'], 30) . ": " . $row['total'] . " registros\n";
    }
    
    return $resultado;
}

/**
 * Genera informe de estadísticas por conector
 */
function generarInformePersonal($conn, $conector, $fechaInicio, $fechaFin, $incluirDetalle) {
    if (empty($conector)) {
        return "ESTADÍSTICAS POR CONECTOR\n----------------------\n\nSelecciona un conector específico para ver sus estadísticas.\n";
    }
    
    $resultado = "ESTADÍSTICAS DEL CONECTOR: " . strtoupper($conector) . "\n";
    $resultado .= str_repeat("-", 40) . "\n\n";
    
    // Consulta para obtener conteo por estado para este conector
    $sql = "SELECT estado, COUNT(*) as total FROM registros WHERE nombre_conector = :conector";
    
    if ($fechaInicio) {
        $sql .= " AND fecha_contacto >= :fecha_inicio";
    }
    
    if ($fechaFin) {
        $sql .= " AND fecha_contacto <= :fecha_fin";
    }
    
    $sql .= " GROUP BY estado ORDER BY total DESC";
    
    $stmt = $conn->prepare($sql);
    $stmt->bindParam(':conector', $conector);
    
    if ($fechaInicio) {
        $fechaInicioDb = $fechaInicio . ' 00:00:00';
        $stmt->bindParam(':fecha_inicio', $fechaInicioDb);
    }
    
    if ($fechaFin) {
        $fechaFinDb = $fechaFin . ' 23:59:59';
        $stmt->bindParam(':fecha_fin', $fechaFinDb);
    }
    
    $stmt->execute();
    $estados = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    $resultado .= "DISTRIBUCIÓN POR ESTADOS:\n";
    foreach ($estados as $row) {
        $resultado .= str_pad($row['estado'], 30) . ": " . $row['total'] . " registros\n";
    }
    
    if ($incluirDetalle) {
        // Consulta para obtener los últimos 10 registros de este conector
        $sql = "SELECT nombre_persona, apellido_persona, telefono, estado, fecha_contacto 
                FROM registros 
                WHERE nombre_conector = :conector";
        
        if ($fechaInicio) {
            $sql .= " AND fecha_contacto >= :fecha_inicio";
        }
        
        if ($fechaFin) {
            $sql .= " AND fecha_contacto <= :fecha_fin";
        }
        
        $sql .= " ORDER BY fecha_contacto DESC LIMIT 10";
        
        $stmt = $conn->prepare($sql);
        $stmt->bindParam(':conector', $conector);
        
        if ($fechaInicio) {
            $fechaInicioDb = $fechaInicio . ' 00:00:00';
            $stmt->bindParam(':fecha_inicio', $fechaInicioDb);
        }
        
        if ($fechaFin) {
            $fechaFinDb = $fechaFin . ' 23:59:59';
            $stmt->bindParam(':fecha_fin', $fechaFinDb);
        }
        
        $stmt->execute();
        $registros = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        $resultado .= "\nÚLTIMOS REGISTROS:\n";
        foreach ($registros as $reg) {
            $resultado .= "- " . $reg['nombre_persona'] . " " . $reg['apellido_persona'];
            $resultado .= " | Tel: " . $reg['telefono'];
            $resultado .= " | Estado: " . $reg['estado'];
            $resultado .= " | Fecha: " . date('d/m/Y', strtotime($reg['fecha_contacto'])) . "\n";
        }
    }
    
    return $resultado;
}

/**
 * Genera informe por estados
 */
function generarInformeEstados($conn, $estado, $fechaInicio, $fechaFin, $incluirDetalle) {
    $resultado = "INFORME DE ESTADOS\n";
    $resultado .= "------------------\n\n";
    
    if (empty($estado)) {
        // Mostrar distribución general de estados
        $sql = "SELECT estado, COUNT(*) as total FROM registros WHERE estado IS NOT NULL AND estado != ''";
        
        if ($fechaInicio) {
            $sql .= " AND fecha_contacto >= :fecha_inicio";
        }
        
        if ($fechaFin) {
            $sql .= " AND fecha_contacto <= :fecha_fin";
        }
        
        $sql .= " GROUP BY estado ORDER BY total DESC";
        
        $stmt = $conn->prepare($sql);
        
        if ($fechaInicio) {
            $fechaInicioDb = $fechaInicio . ' 00:00:00';
            $stmt->bindParam(':fecha_inicio', $fechaInicioDb);
        }
        
        if ($fechaFin) {
            $fechaFinDb = $fechaFin . ' 23:59:59';
            $stmt->bindParam(':fecha_fin', $fechaFinDb);
        }
        
        $stmt->execute();
        $estados = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        $resultado .= "DISTRIBUCIÓN GENERAL POR ESTADOS:\n";
        foreach ($estados as $row) {
            $resultado .= str_pad($row['estado'], 30) . ": " . $row['total'] . " registros\n";
        }
    } else {
        // Mostrar información detallada del estado seleccionado
        $resultado .= "ESTADO SELECCIONADO: " . strtoupper($estado) . "\n";
        $resultado .= str_repeat("-", 40) . "\n\n";
        
        // Contar registros con este estado por conector
        $sql = "SELECT nombre_conector, COUNT(*) as total 
                FROM registros 
                WHERE estado = :estado AND nombre_conector IS NOT NULL AND nombre_conector != ''";
        
        if ($fechaInicio) {
            $sql .= " AND fecha_contacto >= :fecha_inicio";
        }
        
        if ($fechaFin) {
            $sql .= " AND fecha_contacto <= :fecha_fin";
        }
        
        $sql .= " GROUP BY nombre_conector ORDER BY total DESC";
        
        $stmt = $conn->prepare($sql);
        $stmt->bindParam(':estado', $estado);
        
        if ($fechaInicio) {
            $fechaInicioDb = $fechaInicio . ' 00:00:00';
            $stmt->bindParam(':fecha_inicio', $fechaInicioDb);
        }
        
        if ($fechaFin) {
            $fechaFinDb = $fechaFin . ' 23:59:59';
            $stmt->bindParam(':fecha_fin', $fechaFinDb);
        }
        
        $stmt->execute();
        $conectores = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        $resultado .= "DISTRIBUCIÓN POR CONECTORES:\n";
        foreach ($conectores as $row) {
            $resultado .= str_pad($row['nombre_conector'], 30) . ": " . $row['total'] . " registros\n";
        }
        
        if ($incluirDetalle) {
            // Listar últimos 10 registros con este estado
            $sql = "SELECT nombre_persona, apellido_persona, telefono, nombre_conector, fecha_contacto 
                    FROM registros 
                    WHERE estado = :estado";
            
            if ($fechaInicio) {
                $sql .= " AND fecha_contacto >= :fecha_inicio";
            }
            
            if ($fechaFin) {
                $sql .= " AND fecha_contacto <= :fecha_fin";
            }
            
            $sql .= " ORDER BY fecha_contacto DESC LIMIT 10";
            
            $stmt = $conn->prepare($sql);
            $stmt->bindParam(':estado', $estado);
            
            if ($fechaInicio) {
                $fechaInicioDb = $fechaInicio . ' 00:00:00';
                $stmt->bindParam(':fecha_inicio', $fechaInicioDb);
            }
            
            if ($fechaFin) {
                $fechaFinDb = $fechaFin . ' 23:59:59';
                $stmt->bindParam(':fecha_fin', $fechaFinDb);
            }
            
            $stmt->execute();
            $registros = $stmt->fetchAll(PDO::FETCH_ASSOC);
            
            $resultado .= "\nÚLTIMOS REGISTROS CON ESTADO '" . $estado . "':\n";
            foreach ($registros as $reg) {
                $resultado .= "- " . $reg['nombre_persona'] . " " . $reg['apellido_persona'];
                $resultado .= " | Conector: " . $reg['nombre_conector'];
                $resultado .= " | Tel: " . $reg['telefono'];
                $resultado .= " | Fecha: " . date('d/m/Y', strtotime($reg['fecha_contacto'])) . "\n";
            }
        }
    }
    
    return $resultado;
}

/**
 * Genera informe detallado
 */
function generarInformeDetallado($conn, $conector, $estado, $fechaInicio, $fechaFin, $incluirDetalle) {
    $resultado = "INFORME DETALLADO\n";
    $resultado .= "-----------------\n\n";
    
    // Construir consulta con filtros
    $sql = "SELECT id, nombre_persona, apellido_persona, telefono, nombre_conector, estado, fecha_contacto FROM registros WHERE 1=1";
    $params = [];
    
    if ($conector) {
        $sql .= " AND nombre_conector = :conector";
        $params[':conector'] = $conector;
    }
    
    if ($estado) {
        $sql .= " AND estado = :estado";
        $params[':estado'] = $estado;
    }
    
    if ($fechaInicio) {
        $sql .= " AND fecha_contacto >= :fecha_inicio";
        $params[':fecha_inicio'] = $fechaInicio . ' 00:00:00';
    }
    
    if ($fechaFin) {
        $sql .= " AND fecha_contacto <= :fecha_fin";
        $params[':fecha_fin'] = $fechaFin . ' 23:59:59';
    }
    
    // Ordenar por fecha más reciente
    $sql .= " ORDER BY fecha_contacto DESC";
    
    // Limitar registros si no se piden detalles
    if (!$incluirDetalle) {
        $sql .= " LIMIT 20";
    }
    
    $stmt = $conn->prepare($sql);
    foreach ($params as $key => $value) {
        $stmt->bindValue($key, $value);
    }
    
    $stmt->execute();
    $registros = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    if (count($registros) === 0) {
        $resultado .= "No se encontraron registros con los criterios seleccionados.\n";
        return $resultado;
    }
    
    $resultado .= "REGISTROS ENCONTRADOS: " . count($registros) . "\n\n";
    
    // Cabecera de la tabla
    $resultado .= str_pad("ID", 5) . " | ";
    $resultado .= str_pad("NOMBRE", 20) . " | ";
    $resultado .= str_pad("APELLIDO", 20) . " | ";
    $resultado .= str_pad("TELÉFONO", 15) . " | ";
    $resultado .= str_pad("CONECTOR", 20) . " | ";
    $resultado .= str_pad("ESTADO", 25) . " | ";
    $resultado .= "FECHA\n";
    
    $resultado .= str_repeat("-", 120) . "\n";
    
    // Datos
    foreach ($registros as $reg) {
        $resultado .= str_pad($reg['id'], 5) . " | ";
        $resultado .= str_pad(substr($reg['nombre_persona'], 0, 18), 20) . " | ";
        $resultado .= str_pad(substr($reg['apellido_persona'], 0, 18), 20) . " | ";
        $resultado .= str_pad($reg['telefono'], 15) . " | ";
        $resultado .= str_pad(substr($reg['nombre_conector'], 0, 18), 20) . " | ";
        $resultado .= str_pad(substr($reg['estado'], 0, 23), 25) . " | ";
        $resultado .= date('d/m/Y', strtotime($reg['fecha_contacto'])) . "\n";
    }
    
    return $resultado;
}

/**
 * Genera resumen para informe general
 */
function generarResumenGeneral($conn, $fechaInicio, $fechaFin) {
    $resultado = "";
    
    // Total de conectores activos
    $sql = "SELECT COUNT(DISTINCT nombre_conector) as total FROM registros 
            WHERE nombre_conector IS NOT NULL AND nombre_conector != ''";
    
    if ($fechaInicio) {
        $sql .= " AND fecha_contacto >= :fecha_inicio";
    }
    
    if ($fechaFin) {
        $sql .= " AND fecha_contacto <= :fecha_fin";
    }
    
    $stmt = $conn->prepare($sql);
    
    if ($fechaInicio) {
        $fechaInicioDb = $fechaInicio . ' 00:00:00';
        $stmt->bindParam(':fecha_inicio', $fechaInicioDb);
    }
    
    if ($fechaFin) {
        $fechaFinDb = $fechaFin . ' 23:59:59';
        $stmt->bindParam(':fecha_fin', $fechaFinDb);
    }
    
    $stmt->execute();
    $totalConectores = $stmt->fetch(PDO::FETCH_ASSOC)['total'];
    
    $resultado .= "Total de conectores activos: " . $totalConectores . "\n";
    
    // Estados más comunes
    $sql = "SELECT estado, COUNT(*) as total FROM registros 
            WHERE estado IS NOT NULL AND estado != ''";
    
    if ($fechaInicio) {
        $sql .= " AND fecha_contacto >= :fecha_inicio";
    }
    
    if ($fechaFin) {
        $sql .= " AND fecha_contacto <= :fecha_fin";
    }
    
    $sql .= " GROUP BY estado ORDER BY total DESC LIMIT 3";
    
    $stmt = $conn->prepare($sql);
    
    if ($fechaInicio) {
        $fechaInicioDb = $fechaInicio . ' 00:00:00';
        $stmt->bindParam(':fecha_inicio', $fechaInicioDb);
    }
    
    if ($fechaFin) {
        $fechaFinDb = $fechaFin . ' 23:59:59';
        $stmt->bindParam(':fecha_fin', $fechaFinDb);
    }
    
    $stmt->execute();
    $estadosComunes = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    $resultado .= "Estados más comunes:\n";
    foreach ($estadosComunes as $i => $estado) {
        $resultado .= "  " . ($i + 1) . ". " . $estado['estado'] . " (" . $estado['total'] . " registros)\n";
    }
    
    return $resultado;
}

/**
 * Genera resumen para informe personal
 */
function generarResumenPersonal($conn, $conector, $fechaInicio, $fechaFin) {
    if (empty($conector)) return "";
    
    $resultado = "";
    
    // Total de registros para este conector
    $sql = "SELECT COUNT(*) as total FROM registros WHERE nombre_conector = :conector";
    
    if ($fechaInicio) {
        $sql .= " AND fecha_contacto >= :fecha_inicio";
    }
    
    if ($fechaFin) {
        $sql .= " AND fecha_contacto <= :fecha_fin";
    }
    
    $stmt = $conn->prepare($sql);
    $stmt->bindParam(':conector', $conector);
    
    if ($fechaInicio) {
        $fechaInicioDb = $fechaInicio . ' 00:00:00';
        $stmt->bindParam(':fecha_inicio', $fechaInicioDb);
    }
    
    if ($fechaFin) {
        $fechaFinDb = $fechaFin . ' 23:59:59';
        $stmt->bindParam(':fecha_fin', $fechaFinDb);
    }
    
    $stmt->execute();
    $totalRegistros = $stmt->fetch(PDO::FETCH_ASSOC)['total'];
    
    // Estado más común para este conector
    $sql = "SELECT estado, COUNT(*) as total FROM registros 
            WHERE nombre_conector = :conector AND estado IS NOT NULL AND estado != ''";
    
    if ($fechaInicio) {
        $sql .= " AND fecha_contacto >= :fecha_inicio";
    }
    
    if ($fechaFin) {
        $sql .= " AND fecha_contacto <= :fecha_fin";
    }
    
    $sql .= " GROUP BY estado ORDER BY total DESC LIMIT 1";
    
    $stmt = $conn->prepare($sql);
    $stmt->bindParam(':conector', $conector);
    
    if ($fechaInicio) {
        $fechaInicioDb = $fechaInicio . ' 00:00:00';
        $stmt->bindParam(':fecha_inicio', $fechaInicioDb);
    }
    
    if ($fechaFin) {
        $fechaFinDb = $fechaFin . ' 23:59:59';
        $stmt->bindParam(':fecha_fin', $fechaFinDb);
    }
    
    $stmt->execute();
    $estadoComun = $stmt->fetch(PDO::FETCH_ASSOC);
    
    $resultado .= "Total de registros del conector: " . $totalRegistros . "\n";
    
    if ($estadoComun) {
        $resultado .= "Estado más común: " . $estadoComun['estado'] . " (" . $estadoComun['total'] . " registros)\n";
        $porcentaje = round(($estadoComun['total'] / $totalRegistros) * 100, 2);
        $resultado .= "Porcentaje: " . $porcentaje . "%\n";
    }
    
    return $resultado;
}

/**
 * Genera resumen para informe de estados
 */
function generarResumenEstados($conn, $estado, $fechaInicio, $fechaFin) {
    if (empty($estado)) return "";
    
    $resultado = "";
    
    // Total de registros con este estado
    $sql = "SELECT COUNT(*) as total FROM registros WHERE estado = :estado";
    
    if ($fechaInicio) {
        $sql .= " AND fecha_contacto >= :fecha_inicio";
    }
    
    if ($fechaFin) {
        $sql .= " AND fecha_contacto <= :fecha_fin";
    }
    
    $stmt = $conn->prepare($sql);
    $stmt->bindParam(':estado', $estado);
    
    if ($fechaInicio) {
        $fechaInicioDb = $fechaInicio . ' 00:00:00';
        $stmt->bindParam(':fecha_inicio', $fechaInicioDb);
    }
    
    if ($fechaFin) {
        $fechaFinDb = $fechaFin . ' 23:59:59';
        $stmt->bindParam(':fecha_fin', $fechaFinDb);
    }
    
    $stmt->execute();
    $totalRegistros = $stmt->fetch(PDO::FETCH_ASSOC)['total'];
    
    // Conector con más registros en este estado
    $sql = "SELECT nombre_conector, COUNT(*) as total FROM registros 
            WHERE estado = :estado AND nombre_conector IS NOT NULL AND nombre_conector != ''";
    
    if ($fechaInicio) {
        $sql .= " AND fecha_contacto >= :fecha_inicio";
    }
    
    if ($fechaFin) {
        $sql .= " AND fecha_contacto <= :fecha_fin";
    }
    
    $sql .= " GROUP BY nombre_conector ORDER BY total DESC LIMIT 1";
    
    $stmt = $conn->prepare($sql);
    $stmt->bindParam(':estado', $estado);
    
    if ($fechaInicio) {
        $fechaInicioDb = $fechaInicio . ' 00:00:00';
        $stmt->bindParam(':fecha_inicio', $fechaInicioDb);
    }
    
    if ($fechaFin) {
        $fechaFinDb = $fechaFin . ' 23:59:59';
        $stmt->bindParam(':fecha_fin', $fechaFinDb);
    }
    
    $stmt->execute();
    $conectorPrincipal = $stmt->fetch(PDO::FETCH_ASSOC);
    
    $resultado .= "Total de registros con estado '" . $estado . "': " . $totalRegistros . "\n";
    
    if ($conectorPrincipal) {
        $resultado .= "Conector con más registros en este estado: " . $conectorPrincipal['nombre_conector'] . " (" . $conectorPrincipal['total'] . " registros)\n";
        $porcentaje = round(($conectorPrincipal['total'] / $totalRegistros) * 100, 2);
        $resultado .= "Porcentaje: " . $porcentaje . "%\n";
    }
    
    return $resultado;
}
?>


==============================================================================
ARCHIVO: backend\controllers\guardar_registro.php
==============================================================================

<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

session_start();
// Usar la clase Database en lugar de conexion.php
require_once __DIR__ . '/../config/database.php';

require_once __DIR__ . '/../config/cors.php';

// Solo permitir método POST
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    header('Location: ../../frontend/views/admin.php?error=metodo_no_permitido');
    exit;
}

try {
    // Inicializar la conexión usando la clase Database
    $db = new Database();
    $conn = $db->connect();
    
    // Recoger variables del formulario usando el operador de fusión null
    $id = $_POST['id'] ?? null;
    $nombre_persona = $_POST['nombre_persona'] ?? '';
    $apellido_persona = $_POST['apellido_persona'] ?? '';
    $telefono = $_POST['telefono'] ?? '';
    $nombre_conector = $_POST['nombre_conector'] ?? '';
    $nombre_quien_trajo = $_POST['nombre_quien_trajo'] ?? '';
    $estado = $_POST['estado'] ?? 'Primer contacto';
    $formulario_nuevos = isset($_POST['formulario_nuevos']) ? 1 : 0;
    $formulario_llamadas = isset($_POST['formulario_llamadas']) ? 1 : 0;
    $fecha_contacto = $_POST['fecha_contacto'] ?? date('Y-m-d');
    $fecha_ultimo_contacto = $_POST['fecha_ultimo_contacto'] ?? null;
    $cumpleanos = $_POST['cumpleanos'] ?? null;
    $observaciones = $_POST['observaciones'] ?? '';
    $subido_por = $_SESSION['user']['username'] ?? 'sistema';
    
    // Verificar si es un nuevo conector
    if (isset($_POST['nombre_conector']) && $_POST['nombre_conector'] === 'otro' && !empty($_POST['otro_conector'])) {
        $nombre_conector = trim($_POST['otro_conector']);
    }
    
    // Procesar imagen si se ha enviado
    $ruta_foto = '';
    if (isset($_FILES['foto']) && $_FILES['foto']['error'] === 0) {
        // Definir directorio de uploads y asegurar que existe
        $directorio_uploads = '../../uploads/';
        if (!file_exists($directorio_uploads)) {
            mkdir($directorio_uploads, 0777, true);
        }
        
        // Crear nombre único para el archivo
        $nombre_archivo = time() . '_' . basename($_FILES['foto']['name']);
        $ruta_destino = $directorio_uploads . $nombre_archivo;
        
        // Mover archivo subido al directorio final
        if (move_uploaded_file($_FILES['foto']['tmp_name'], $ruta_destino)) {
            $ruta_foto = $nombre_archivo;
        }
    } else if (isset($_POST['id']) && isset($_POST['foto_actual'])) {
        // Si estamos actualizando y no se subió una foto nueva, mantener la actual
        $ruta_foto = $_POST['foto_actual'];
    }
    
    // Si es una actualización (existe ID)
    if ($id) {
        $sql = "UPDATE registros SET 
                nombre_persona = :nombre_persona,
                apellido_persona = :apellido_persona,
                telefono = :telefono,
                nombre_conector = :nombre_conector,
                nombre_quien_trajo = :nombre_quien_trajo,
                estado = :estado,
                formulario_nuevos = :formulario_nuevos,
                formulario_llamadas = :formulario_llamadas,
                fecha_contacto = :fecha_contacto,
                fecha_ultimo_contacto = :fecha_ultimo_contacto,
                cumpleanos = :cumpleanos,
                observaciones = :observaciones";
        
        // Solo actualizar la foto si se ha enviado una nueva
        if (!empty($ruta_foto)) {
            $sql .= ", foto = :foto";
        }
        
        $sql .= " WHERE id = :id";
        
        $stmt = $conn->prepare($sql);
        $stmt->bindParam(':id', $id, PDO::PARAM_INT);
        
        // Si hay foto nueva, incluirla en los parámetros
        if (!empty($ruta_foto)) {
            $stmt->bindParam(':foto', $ruta_foto, PDO::PARAM_STR);
        }
    } 
    // Si es un nuevo registro
    else {
        $sql = "INSERT INTO registros (
                nombre_persona, apellido_persona, telefono, nombre_conector,
                nombre_quien_trajo, estado, formulario_nuevos, formulario_llamadas,
                fecha_contacto, fecha_ultimo_contacto, cumpleanos, observaciones, 
                foto, subido_por
            ) VALUES (
                :nombre_persona, :apellido_persona, :telefono, :nombre_conector,
                :nombre_quien_trajo, :estado, :formulario_nuevos, :formulario_llamadas,
                :fecha_contacto, :fecha_ultimo_contacto, :cumpleanos, :observaciones,
                :foto, :subido_por
            )";
            
        $stmt = $conn->prepare($sql);
        $stmt->bindParam(':foto', $ruta_foto, PDO::PARAM_STR);
        $stmt->bindParam(':subido_por', $subido_por, PDO::PARAM_STR);
    }
    
    // Parámetros comunes para ambos casos
    $stmt->bindParam(':nombre_persona', $nombre_persona, PDO::PARAM_STR);
    $stmt->bindParam(':apellido_persona', $apellido_persona, PDO::PARAM_STR);
    $stmt->bindParam(':telefono', $telefono, PDO::PARAM_STR);
    $stmt->bindParam(':nombre_conector', $nombre_conector, PDO::PARAM_STR);
    $stmt->bindParam(':nombre_quien_trajo', $nombre_quien_trajo, PDO::PARAM_STR);
    $stmt->bindParam(':estado', $estado, PDO::PARAM_STR);
    $stmt->bindParam(':formulario_nuevos', $formulario_nuevos, PDO::PARAM_INT);
    $stmt->bindParam(':formulario_llamadas', $formulario_llamadas, PDO::PARAM_INT);
    $stmt->bindParam(':fecha_contacto', $fecha_contacto, PDO::PARAM_STR);
    $stmt->bindParam(':fecha_ultimo_contacto', $fecha_ultimo_contacto, PDO::PARAM_STR);
    $stmt->bindParam(':cumpleanos', $cumpleanos, PDO::PARAM_STR);
    $stmt->bindParam(':observaciones', $observaciones, PDO::PARAM_STR);
    
    // Ejecutar la consulta
    $stmt->execute();
    
    // Redireccionar según el resultado
    if ($id) {
        header('Location: ../../frontend/views/ver_registro.php?id=' . $id . '&success=actualizado');
    } else {
        header('Location: ../../frontend/views/admin.php?success=registro_creado');
    }
    exit;
    
} catch (PDOException $e) {
    // Registrar el error para debugging
    error_log("Error en guardar_registro.php: " . $e->getMessage());
    
    // Redireccionar con mensaje de error
    if (isset($_POST['id'])) {
        header('Location: ../../frontend/views/ver_registro.php?id=' . $_POST['id'] . '&error=db_error');
    } else {
        header('Location: ../../frontend/views/admin.php?error=db_error&message=' . urlencode($e->getMessage()));
    }
    exit;
}
?>


==============================================================================
ARCHIVO: backend\controllers\login.php
==============================================================================

<?php
session_start();
require_once __DIR__ . '/../config/database.php';
require_once __DIR__ . '/../config/cors.php';

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $username = trim($_POST['username'] ?? '');
    $password = trim($_POST['password'] ?? '');

    if ($username === '' || $password === '') {
        header('Location: ../../index.html?error=campos_vacios');
        exit;
    }

    $db = new Database();
    $conn = $db->connect();

    $stmt = $conn->prepare("SELECT * FROM usuarios WHERE username = :username LIMIT 1");
    $stmt->bindParam(':username', $username, PDO::PARAM_STR);
    $stmt->execute();
    $usuario = $stmt->fetch(PDO::FETCH_ASSOC);

    if ($usuario && password_verify($password, $usuario['password'])) {
        // Autenticación exitosa
        $_SESSION['user'] = [
            'id' => $usuario['id'],
            'username' => $usuario['username'],
            'nombre' => $usuario['nombre'] ?? $usuario['username'],
            'role' => $usuario['role'] ?? 'user'  // Asegúrate de tener esta columna en tu tabla usuarios
        ];
        header('Location: ../../frontend/views/admin.php');
        exit;
    } else {
        // Fallo de autenticación
        header('Location: ../../index.html?error=credenciales');
        exit;
    }
} else {
    header('Location: ../../index.html');
    exit;
}


==============================================================================
ARCHIVO: backend\controllers\logout.php
==============================================================================

<?php
session_start();
session_unset();

// Marcar desconexión en la base de datos
if(isset($_SESSION['user_id'])) {
    try {
        require_once __DIR__ . '/../config/database.php';
        $db = new Database();
        $conn = $db->connect();
        
        $sql = "UPDATE usuarios SET last_activity = 0 WHERE id = :id";
        $stmt = $conn->prepare($sql);
        $stmt->bindParam(':id', $_SESSION['user_id'], PDO::PARAM_INT);
        $stmt->execute();
    } catch (Exception $e) {
        error_log("Error al marcar desconexión en logout: " . $e->getMessage());
    }
}

session_destroy();
header('Location: ../../index.html');
exit;


==============================================================================
ARCHIVO: backend\controllers\obtener_observaciones.php
==============================================================================

<?php
require_once __DIR__ . '/../config/database.php';
require_once __DIR__ . '/../config/cors.php';

session_start();

// Cabecera JSON
header('Content-Type: application/json; charset=utf-8');

// Inhabilita la salida de errores en pantalla
ini_set('display_errors', 0);
error_reporting(E_ALL);

// Log de depuración
error_log("Iniciando obtener_observaciones.php");
error_log("Método: " . $_SERVER['REQUEST_METHOD']);
error_log("POST data: " . print_r($_POST, true));

// Verificar autenticación
if (!isset($_SESSION['user'])) {
    echo json_encode(['success' => false, 'message' => 'No autorizado']);
    exit;
}

// Verificar método y datos
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    echo json_encode(['success' => false, 'message' => 'Método incorrecto. Debe ser POST']);
    exit;
}

if (!isset($_POST['id'])) {
    echo json_encode(['success' => false, 'message' => 'Falta el ID del registro']);
    exit;
}

$id = intval($_POST['id']);
if ($id <= 0) {
    echo json_encode(['success' => false, 'message' => 'ID inválido: ' . $id]);
    exit;
}

// Añade más logs de depuración
error_log("ID recibido: " . print_r($_POST['id'], true));

try {
    $db = new Database();
    $conn = $db->connect();
    
    // Log para depuración
    error_log("Consultando observaciones para ID: " . $id);
    
    // Usar parámetros con nombre es más seguro y claro
    $stmt = $conn->prepare("SELECT observaciones FROM registros WHERE id = :id");
    $stmt->bindParam(':id', $id, PDO::PARAM_INT);
    $stmt->execute();
    
    // Asegúrate de que la consulta SQL está obteniendo los datos correctamente
    $registro = $stmt->fetch(PDO::FETCH_ASSOC);
    
    // Log del resultado
    error_log("¿Se encontró registro? " . ($registro ? "Sí" : "No"));
    if ($registro) {
        error_log("Primeros 50 caracteres: " . substr($registro['observaciones'] ?? 'vacío', 0, 50));
    }
    
    // Log del resultado para depuración
    error_log("Resultado encontrado: " . ($registro ? "Sí" : "No"));
    
    if ($registro) {
        // Asegúrate de enviar un valor vacío en lugar de null
        $observaciones = $registro['observaciones'] ?? '';
        error_log("Observaciones encontradas: " . substr($observaciones, 0, 50) . "...");
        
        echo json_encode([
            'success' => true,
            'observaciones' => $observaciones
        ]);
    } else {
        echo json_encode(['success' => false, 'message' => 'Registro no encontrado']);
    }
} catch (PDOException $e) {
    error_log("PDO Error: " . $e->getMessage());
    echo json_encode(['success' => false, 'message' => 'Error de base de datos']);
}
exit;



==============================================================================
ARCHIVO: backend\controllers\procesar_registro.php
==============================================================================

<?php
session_start();
require_once __DIR__ . '/../config/database.php';
require_once __DIR__ . '/../config/cors.php';

// Verificar si el usuario está autenticado
if (!isset($_SESSION['user'])) {
    header('Location: ../../index.html');
    exit;
}

// Verificar si se envió el formulario
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // Inicializar mensaje de error
    $error = '';
    
    // Procesar la foto
    $nombre_foto = '';
    if (isset($_FILES['foto']) && $_FILES['foto']['error'] === UPLOAD_ERR_OK) {
        // Verificar el tipo de archivo
        $allowed = array('jpg', 'jpeg', 'png', 'gif');
        $filename = $_FILES['foto']['name'];
        $ext = pathinfo($filename, PATHINFO_EXTENSION);
        
        if (!in_array(strtolower($ext), $allowed)) {
            $error = "Error: Formato de imagen no válido. Formatos permitidos: JPG, PNG, GIF.";
        } 
        // Verificar el tamaño (2MB máximo)
        elseif ($_FILES['foto']['size'] > 2097152) {
            $error = "Error: La imagen no debe superar los 2MB.";
        }
        else {
            // Generar nombre único para la foto
            $nombre_foto = uniqid() . '_' . $filename;
            $ruta_destino = __DIR__ . '/../../frontend/img/' . $nombre_foto;
            
            // Intentar mover el archivo subido
            if (!move_uploaded_file($_FILES['foto']['tmp_name'], $ruta_destino)) {
                $error = "Error: No se pudo guardar la imagen. Verifica los permisos de la carpeta.";
                error_log("Error moviendo archivo: " . error_get_last()['message']);
            }
        }
    }

    // Si hay errores, redirigir con mensaje de error
    if (!empty($error)) {
        $_SESSION['error_mensaje'] = $error;
        header('Location: ../../frontend/views/agregar_registro.php');
        exit;
    }

    try {
        $db = new Database();
        $conn = $db->connect();
        
        // Obtener datos del formulario con validación
        $nombre_persona = $_POST['nombre_persona'] ?? '';
        $apellido_persona = $_POST['apellido_persona'] ?? '';
        $telefono = $_POST['telefono'] ?? '';
        $nombre_conector = $_POST['nombre_conector'] ?? '';
        $nombre_quien_trajo = $_POST['nombre_quien_trajo'] ?? '';
        $estado = $_POST['estado'] ?? '';
        $fecha_contacto = $_POST['fecha_contacto'] ?? date('Y-m-d'); // Valor predeterminado hoy
        $formulario_nuevos = $_POST['formulario_nuevos'] ?? '';
        $formulario_llamadas = $_POST['formulario_llamadas'] ?? '';
        $cumpleanos = $_POST['cumpleanos'] ?? '';
        $observaciones = $_POST['observaciones'] ?? '';
        $proximo_contacto = !empty($_POST['proximo_contacto']) ? $_POST['proximo_contacto'] : null;
        
        // Subido por el usuario actual
        $subido_por = $_SESSION['user']['nombre'] ?? '';
        
        // Construir la consulta SQL usando SOLO las columnas que existen en la tabla
        $sql = "INSERT INTO registros (
                nombre_persona, apellido_persona, telefono,
                nombre_conector, nombre_quien_trajo, estado, 
                foto, fecha_contacto, formulario_nuevos, 
                formulario_llamadas, subido_por, fecha_ultimo_contacto,
                cumpleanos, observaciones, proximo_contacto
            ) VALUES (
                :nombre, :apellido, :telefono,
                :nombre_conector, :nombre_quien_trajo, :estado,
                :foto, :fecha_contacto, :formulario_nuevos,
                :formulario_llamadas, :subido_por, NOW(),
                :cumpleanos, :observaciones, :proximo_contacto
            )";
        
        $stmt = $conn->prepare($sql);
        
        // Vincular parámetros
        $stmt->bindParam(':nombre', $nombre_persona);
        $stmt->bindParam(':apellido', $apellido_persona);
        $stmt->bindParam(':telefono', $telefono);
        $stmt->bindParam(':nombre_conector', $nombre_conector);
        $stmt->bindParam(':nombre_quien_trajo', $nombre_quien_trajo);
        $stmt->bindParam(':estado', $estado);
        $stmt->bindParam(':foto', $nombre_foto);
        $stmt->bindParam(':fecha_contacto', $fecha_contacto);
        $stmt->bindParam(':formulario_nuevos', $formulario_nuevos);
        $stmt->bindParam(':formulario_llamadas', $formulario_llamadas);
        $stmt->bindParam(':subido_por', $subido_por);
        $stmt->bindParam(':cumpleanos', $cumpleanos);
        $stmt->bindParam(':observaciones', $observaciones);
        $stmt->bindParam(':proximo_contacto', $proximo_contacto);
        
        $stmt->execute();
        
        // Registrar la acción
        error_log("Registro creado correctamente por usuario: {$subido_por}");
        
        // Redirigir con mensaje de éxito
        $_SESSION['exito_mensaje'] = "Registro creado correctamente.";
        header('Location: ../../frontend/views/admin.php');
        exit;
        
    } catch (PDOException $e) {
        // Si hubo error en la inserción y se subió una imagen, eliminarla
        if (!empty($nombre_foto) && file_exists($ruta_destino)) {
            unlink($ruta_destino);
        }
        
        error_log("Error en procesar_registro.php: " . $e->getMessage());
        $_SESSION['error_mensaje'] = "Error al crear el registro: " . $e->getMessage();
        header('Location: ../../frontend/views/agregar_registro.php');
        exit;
    }
    
} else {
    // Si no se envió el formulario por POST
    $_SESSION['error_mensaje'] = "Método no permitido.";
    header('Location: ../../frontend/views/admin.php');
    exit;
}


==============================================================================
ARCHIVO: backend\controllers\registrar_asistencia.php
==============================================================================

<?php

session_start();
require_once '../config/database.php';

// Verificar si el usuario está autenticado
if (!isset($_SESSION['user'])) {
    header('Location: ../../index.html?error=no_auth');
    exit;
}

// Verificar si es una solicitud POST
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // Obtener datos del formulario
    $usuario_id = filter_input(INPUT_POST, 'usuario_id', FILTER_VALIDATE_INT);
    $tipo_evento = filter_input(INPUT_POST, 'tipo_evento', FILTER_SANITIZE_STRING);
    $evento_id = filter_input(INPUT_POST, 'evento_id', FILTER_VALIDATE_INT) ?: null;
    $fecha_evento = filter_input(INPUT_POST, 'fecha_evento', FILTER_SANITIZE_STRING);
    $comentarios = filter_input(INPUT_POST, 'comentarios', FILTER_SANITIZE_STRING);
    $registrado_por = $_SESSION['user']['id'];
    
    // Validar datos
    if (!$usuario_id || !$tipo_evento || !$fecha_evento) {
        $_SESSION['error_msg'] = "Todos los campos obligatorios deben ser completados.";
        header('Location: ../../frontend/views/registrar_asistencia.php');
        exit;
    }
    
    try {
        // Conectar a la base de datos
        $db = new Database();
        $conn = $db->connect();
        
        // Verificar si ya existe un registro para este usuario en esta fecha y tipo de evento
        $stmt = $conn->prepare("SELECT id FROM asistencias WHERE usuario_id = :usuario_id AND fecha_evento = :fecha_evento AND tipo_evento = :tipo_evento");
        $stmt->bindParam(':usuario_id', $usuario_id, PDO::PARAM_INT);
        $stmt->bindParam(':fecha_evento', $fecha_evento);
        $stmt->bindParam(':tipo_evento', $tipo_evento);
        $stmt->execute();
        
        if ($stmt->rowCount() > 0) {
            $_SESSION['warning_msg'] = "¡La asistencia para este usuario ya ha sido registrada en este evento!";
            header('Location: ../../frontend/views/registrar_asistencia.php');
            exit;
        }
        
        // Registrar la asistencia
        $stmt = $conn->prepare("
            INSERT INTO asistencias (usuario_id, evento_id, tipo_evento, fecha_evento, comentarios, registrado_por) 
            VALUES (:usuario_id, :evento_id, :tipo_evento, :fecha_evento, :comentarios, :registrado_por)
        ");
        $stmt->bindParam(':usuario_id', $usuario_id, PDO::PARAM_INT);
        $stmt->bindParam(':evento_id', $evento_id, PDO::PARAM_INT);
        $stmt->bindParam(':tipo_evento', $tipo_evento);
        $stmt->bindParam(':fecha_evento', $fecha_evento);
        $stmt->bindParam(':comentarios', $comentarios);
        $stmt->bindParam(':registrado_por', $registrado_por, PDO::PARAM_INT);
        $stmt->execute();
        
        $_SESSION['success_msg'] = "¡Asistencia registrada exitosamente!";
        header('Location: ../../frontend/views/registrar_asistencia.php');
        exit;
        
    } catch (PDOException $e) {
        $_SESSION['error_msg'] = "Error al registrar asistencia: " . $e->getMessage();
        header('Location: ../../frontend/views/registrar_asistencia.php');
        exit;
    }
} else {
    header('Location: ../../frontend/views/registrar_asistencia.php');
    exit;
}
?>


==============================================================================
ARCHIVO: backend\controllers\registrar_asistencia_masiva.php
==============================================================================

<?php

session_start();
require_once '../config/database.php';

// Verificar si el usuario está autenticado
if (!isset($_SESSION['user'])) {
    header('Location: ../../index.html?error=no_auth');
    exit;
}

// Verificar si es una solicitud POST
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // Obtener datos del formulario
    $usuarios_ids = isset($_POST['usuarios_ids']) ? $_POST['usuarios_ids'] : [];
    $tipo_evento = filter_input(INPUT_POST, 'tipo_evento', FILTER_SANITIZE_STRING);
    $evento_id = filter_input(INPUT_POST, 'evento_id', FILTER_VALIDATE_INT) ?: null;
    $fecha_evento = filter_input(INPUT_POST, 'fecha_evento', FILTER_SANITIZE_STRING);
    $comentarios = filter_input(INPUT_POST, 'comentarios', FILTER_SANITIZE_STRING);
    $registrado_por = $_SESSION['user']['id'];
    
    // Validar datos
    if (empty($usuarios_ids) || !$tipo_evento || !$fecha_evento) {
        $_SESSION['error_msg'] = "Debes seleccionar al menos un usuario y completar todos los campos obligatorios.";
        header('Location: ../../frontend/views/registrar_asistencia.php');
        exit;
    }
    
    try {
        // Conectar a la base de datos
        $db = new Database();
        $conn = $db->connect();
        
        // Iniciar transacción
        $conn->beginTransaction();
        
        // Preparar consulta para insertar asistencias
        $stmt = $conn->prepare("
            INSERT INTO asistencias (usuario_id, evento_id, tipo_evento, fecha_evento, comentarios, registrado_por) 
            VALUES (:usuario_id, :evento_id, :tipo_evento, :fecha_evento, :comentarios, :registrado_por)
        ");
        
        $registrosExitosos = 0;
        $registrosDuplicados = 0;
        
        foreach ($usuarios_ids as $usuario_id) {
            // Verificar si ya existe un registro para este usuario en esta fecha y tipo de evento
            $checkStmt = $conn->prepare("SELECT id FROM asistencias WHERE usuario_id = :usuario_id AND fecha_evento = :fecha_evento AND tipo_evento = :tipo_evento");
            $checkStmt->bindParam(':usuario_id', $usuario_id, PDO::PARAM_INT);
            $checkStmt->bindParam(':fecha_evento', $fecha_evento);
            $checkStmt->bindParam(':tipo_evento', $tipo_evento);
            $checkStmt->execute();
            
            if ($checkStmt->rowCount() > 0) {
                $registrosDuplicados++;
                continue;
            }
            
            // Registrar la asistencia para este usuario
            $stmt->bindParam(':usuario_id', $usuario_id, PDO::PARAM_INT);
            $stmt->bindParam(':evento_id', $evento_id, PDO::PARAM_INT);
            $stmt->bindParam(':tipo_evento', $tipo_evento);
            $stmt->bindParam(':fecha_evento', $fecha_evento);
            $stmt->bindParam(':comentarios', $comentarios);
            $stmt->bindParam(':registrado_por', $registrado_por, PDO::PARAM_INT);
            $stmt->execute();
            
            $registrosExitosos++;
        }
        
        // Confirmar la transacción
        $conn->commit();
        
        if ($registrosExitosos > 0) {
            $_SESSION['success_msg'] = "¡Se han registrado {$registrosExitosos} asistencias exitosamente!";
            if ($registrosDuplicados > 0) {
                $_SESSION['warning_msg'] = "Se omitieron {$registrosDuplicados} registros duplicados.";
            }
        } else {
            $_SESSION['warning_msg'] = "No se registraron asistencias nuevas. Todos los registros eran duplicados.";
        }
        
        header('Location: ../../frontend/views/registrar_asistencia.php');
        exit;
        
    } catch (PDOException $e) {
        // Revertir la transacción en caso de error
        $conn->rollBack();
        $_SESSION['error_msg'] = "Error al registrar asistencias: " . $e->getMessage();
        header('Location: ../../frontend/views/registrar_asistencia.php');
        exit;
    }
} else {
    header('Location: ../../frontend/views/registrar_asistencia.php');
    exit;
}
?>


==============================================================================
ARCHIVO: backend\controllers\registro.php
==============================================================================

<!-- filepath: c:\xampp\htdocs\Conexion-Main\backend\controllers\registro.php -->
<?php
// Inhabilita la salida de errores en pantalla
ini_set('display_errors', 0);
error_reporting(E_ALL);

require_once __DIR__ . '/../config/database.php';

// Log para depuración
error_log("registro.php - Iniciado");
error_log("POST: " . print_r($_POST, true));

// Código de invitación válido
$CODIGO_VALIDO = "2025Conexionwow";

// Verificar si el método es POST
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    header('Location: ../../frontend/views/registro.php?error=method');
    exit;
}

// Verificar que todos los campos estén completos
if (empty($_POST['nombre']) || empty($_POST['username']) || 
    empty($_POST['password']) || empty($_POST['confirm_password']) || 
    empty($_POST['codigo'])) {
    header('Location: ../../frontend/views/registro.php?error=empty');
    exit;
}

// Obtener y sanitizar datos
$nombre = filter_var($_POST['nombre'], FILTER_SANITIZE_STRING);
$username = filter_var($_POST['username'], FILTER_SANITIZE_STRING);
$password = $_POST['password'];
$confirm_password = $_POST['confirm_password'];
$codigo = $_POST['codigo'];

// Verificar que las contraseñas coincidan
if ($password !== $confirm_password) {
    header('Location: ../../frontend/views/registro.php?error=password');
    exit;
}

// Verificar el código de invitación
if ($codigo !== $CODIGO_VALIDO) {
    header('Location: ../../frontend/views/registro.php?error=codigo');
    exit;
}

try {
    $db = new Database();
    $conn = $db->connect();
    
    // Verificar si el username ya existe
    $stmt_check = $conn->prepare("SELECT COUNT(*) FROM usuarios WHERE username = :username");
    $stmt_check->bindParam(':username', $username);
    $stmt_check->execute();
    
    if ($stmt_check->fetchColumn() > 0) {
        header('Location: ../../frontend/views/registro.php?error=exists');
        exit;
    }
    
    // Encriptar contraseña
    $password_hash = password_hash($password, PASSWORD_DEFAULT);
    
    // Insertar nuevo usuario
    $stmt = $conn->prepare("INSERT INTO usuarios (username, password, nombre) VALUES (:username, :password, :nombre)");
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':password', $password_hash);
    $stmt->bindParam(':nombre', $nombre);
    
    if ($stmt->execute()) {
        // Registro exitoso
        error_log("Usuario registrado correctamente: $username");
        header('Location: ../../index.html?success=registered');
        exit;
    } else {
        // Error al insertar
        error_log("Error al registrar usuario: " . implode(", ", $stmt->errorInfo()));
        header('Location: ../../frontend/views/registro.php?error=database');
        exit;
    }
} catch (PDOException $e) {
    error_log("Error de base de datos: " . $e->getMessage());
    header('Location: ../../frontend/views/registro.php?error=database');
    exit;
} catch (Exception $e) {
    error_log("Error general: " . $e->getMessage());
    header('Location: ../../frontend/views/registro.php?error=general');
    exit;
}
?>


==============================================================================
ARCHIVO: backend\controllers\test_observaciones.php
==============================================================================

<?php
header('Content-Type: application/json');

// Siempre devuelve algunas observaciones de prueba
echo json_encode([
    'success' => true,
    'observaciones' => "[25/04/2025 10:30 - Admin] Esta es una observación de prueba.\n\n[25/04/2025 11:45 - Sistema] Segunda línea de observación para probar el formato."
]);


==============================================================================
ARCHIVO: backend\controllers\test_post.php
==============================================================================

<?php
header('Content-Type: text/plain');
echo "=== Datos recibidos ===\n";
echo print_r($_POST, true);
echo "\n\n=== Fin de prueba ===";
?>


==============================================================================
ARCHIVO: backend\controllers\chat\crear_conversacion.php
==============================================================================

<?php
// Inhabilita la salida de errores en pantalla
ini_set('display_errors', 0);
error_reporting(E_ALL);

// Cabecera JSON antes de cualquier otra salida
header('Content-Type: application/json; charset=utf-8');

require_once __DIR__ . '/../../config/database.php';
require_once __DIR__ . '/../../config/cors.php';

// Iniciar sesión de forma segura
if (session_status() === PHP_SESSION_NONE) {
    session_start();
}

// Log para depuración
error_log("crear_conversacion.php - Iniciado");
error_log("POST: " . print_r($_POST, true));

// Verificar autenticación
if (!isset($_SESSION['user_id'])) {
    echo json_encode(['success' => false, 'error' => 'No autorizado']);
    exit;
}

// Verificar datos
if (!isset($_POST['usuario_id']) || empty($_POST['usuario_id'])) {
    echo json_encode(['success' => false, 'error' => 'ID de usuario destino requerido']);
    exit;
}

$usuario_origen = $_SESSION['user_id'];
$usuario_destino = $_POST['usuario_id'];

try {
    $db = new Database();
    $conn = $db->connect();
    
    // Verificar si ya existe una conversación entre estos usuarios
    $sql_check = "SELECT c.id FROM chat_conversaciones c
                  INNER JOIN chat_participantes p1 ON p1.conversacion_id = c.id AND p1.usuario_id = :usuario1
                  INNER JOIN chat_participantes p2 ON p2.conversacion_id = c.id AND p2.usuario_id = :usuario2
                  WHERE c.tipo = 'individual'
                  LIMIT 1";
    $stmt_check = $conn->prepare($sql_check);
    $stmt_check->bindParam(':usuario1', $usuario_origen, PDO::PARAM_INT);
    $stmt_check->bindParam(':usuario2', $usuario_destino, PDO::PARAM_INT);
    $stmt_check->execute();
    
    if ($conversacion = $stmt_check->fetch(PDO::FETCH_ASSOC)) {
        // Conversación existente
        echo json_encode(['success' => true, 'conversacion_id' => $conversacion['id']]);
        exit;
    }
    
    // Crear nueva conversación
    $conn->beginTransaction();
    
    // Obtener nombre del usuario destino para el título
    $sql_nombre = "SELECT nombre FROM usuarios WHERE id = :id";
    $stmt_nombre = $conn->prepare($sql_nombre);
    $stmt_nombre->bindParam(':id', $usuario_destino, PDO::PARAM_INT);
    $stmt_nombre->execute();
    $usuario = $stmt_nombre->fetch(PDO::FETCH_ASSOC);
    $titulo = $usuario ? $usuario['nombre'] : 'Usuario';
    
    // Insertar conversación
    $sql_conv = "INSERT INTO chat_conversaciones (titulo, tipo) VALUES (:titulo, 'individual')";
    $stmt_conv = $conn->prepare($sql_conv);
    $stmt_conv->bindParam(':titulo', $titulo);
    $stmt_conv->execute();
    
    $conversacion_id = $conn->lastInsertId();
    
    // Añadir participantes
    $sql_part = "INSERT INTO chat_participantes (conversacion_id, usuario_id) VALUES (:conv_id, :usuario_id)";
    
    // Participante 1 (usuario actual)
    $stmt_part1 = $conn->prepare($sql_part);
    $stmt_part1->bindParam(':conv_id', $conversacion_id, PDO::PARAM_INT);
    $stmt_part1->bindParam(':usuario_id', $usuario_origen, PDO::PARAM_INT);
    $stmt_part1->execute();
    
    // Participante 2 (usuario destino)
    $stmt_part2 = $conn->prepare($sql_part);
    $stmt_part2->bindParam(':conv_id', $conversacion_id, PDO::PARAM_INT);
    $stmt_part2->bindParam(':usuario_id', $usuario_destino, PDO::PARAM_INT);
    $stmt_part2->execute();
    
    $conn->commit();
    
    echo json_encode(['success' => true, 'conversacion_id' => $conversacion_id]);
} catch (PDOException $e) {
    if (isset($conn)) $conn->rollBack();
    error_log("Error en crear_conversacion.php: " . $e->getMessage());
    echo json_encode(['success' => false, 'error' => 'Error en la base de datos']);
} catch (Exception $e) {
    if (isset($conn)) $conn->rollBack();
    error_log("Error general en crear_conversacion.php: " . $e->getMessage());
    echo json_encode(['success' => false, 'error' => 'Error del servidor']);
}
exit;


==============================================================================
ARCHIVO: backend\controllers\chat\enviar_mensaje.php
==============================================================================

<?php
// Inhabilita la salida de errores en pantalla
ini_set('display_errors', 0);
error_reporting(E_ALL);

// Cabecera JSON antes de cualquier salida
header('Content-Type: application/json; charset=utf-8');

require_once __DIR__ . '/../../config/database.php';
require_once __DIR__ . '/../../config/cors.php';

// Iniciar sesión de forma segura
if (session_status() === PHP_SESSION_NONE) {
    session_start();
}

// Log para depuración
error_log("enviar_mensaje.php - Iniciado");
error_log("POST: " . print_r($_POST, true));

// Verificar autenticación
if (!isset($_SESSION['user_id'])) {
    echo json_encode(['success' => false, 'error' => 'No autorizado']);
    exit;
}

// Verificar parámetros
if (!isset($_POST['conversacion_id']) || empty($_POST['conversacion_id']) || 
    !isset($_POST['mensaje']) || empty($_POST['mensaje'])) {
    echo json_encode(['success' => false, 'error' => 'Parámetros incompletos']);
    exit;
}

$usuario_id = $_SESSION['user_id'];
$conversacion_id = $_POST['conversacion_id'];
$mensaje = $_POST['mensaje'];

try {
    $db = new Database();
    $conn = $db->connect();
    
    // Verificar que el usuario pertenece a esta conversación
    $sql_check = "SELECT COUNT(*) FROM chat_participantes 
                  WHERE usuario_id = :usuario_id 
                  AND conversacion_id = :conversacion_id";
    $stmt_check = $conn->prepare($sql_check);
    $stmt_check->bindParam(':usuario_id', $usuario_id, PDO::PARAM_INT);
    $stmt_check->bindParam(':conversacion_id', $conversacion_id, PDO::PARAM_INT);
    $stmt_check->execute();
    
    if ($stmt_check->fetchColumn() == 0) {
        echo json_encode(['success' => false, 'error' => 'No puedes enviar mensajes a esta conversación']);
        exit;
    }
    
    // Insertar mensaje
    $sql_insert = "INSERT INTO chat_mensajes (conversacion_id, remitente_id, mensaje) 
                   VALUES (:conversacion_id, :remitente_id, :mensaje)";
    $stmt_insert = $conn->prepare($sql_insert);
    $stmt_insert->bindParam(':conversacion_id', $conversacion_id, PDO::PARAM_INT);
    $stmt_insert->bindParam(':remitente_id', $usuario_id, PDO::PARAM_INT);
    $stmt_insert->bindParam(':mensaje', $mensaje);
    $stmt_insert->execute();
    
    echo json_encode(['success' => true, 'mensaje_id' => $conn->lastInsertId()]);
} catch (PDOException $e) {
    error_log("Error en enviar_mensaje.php: " . $e->getMessage());
    echo json_encode(['success' => false, 'error' => 'Error en la base de datos']);
} catch (Exception $e) {
    error_log("Error general en enviar_mensaje.php: " . $e->getMessage());
    echo json_encode(['success' => false, 'error' => 'Error del servidor']);
}
exit;


==============================================================================
ARCHIVO: backend\controllers\chat\marcar_leido.php
==============================================================================

<?php
// filepath: c:\xampp\htdocs\Conexion-Main\frontend\controllers\chat\marcar_leido.php

require_once __DIR__ . '/../../config/database.php';
session_start();

if (!isset($_SESSION['user_id'])) {
    echo json_encode(['success' => false, 'error' => 'No autorizado']);
    exit;
}

$usuario_id = $_SESSION['user_id'];

// Verificar datos recibidos
if (!isset($_POST['conversacion_id'])) {
    echo json_encode(['success' => false, 'error' => 'ID de conversación no proporcionado']);
    exit;
}

$conversacion_id = $_POST['conversacion_id'];

try {
    $db = new Database();
    $conn = $db->getConnection();
    
    // Verificar si el usuario es participante de la conversación
    $sql_check = "SELECT id FROM chat_participantes 
                  WHERE conversacion_id = :conversacion_id 
                  AND usuario_id = :usuario_id";
    $stmt_check = $conn->prepare($sql_check);
    $stmt_check->bindParam(':conversacion_id', $conversacion_id);
    $stmt_check->bindParam(':usuario_id', $usuario_id);
    $stmt_check->execute();
    
    if ($stmt_check->rowCount() === 0) {
        echo json_encode(['success' => false, 'error' => 'No eres participante de esta conversación']);
        exit;
    }
    
    // Marcar como leídos todos los mensajes que no son del usuario
    $sql_update = "UPDATE chat_mensajes 
                   SET leido = 1 
                   WHERE conversacion_id = :conversacion_id 
                   AND remitente_id != :usuario_id 
                   AND leido = 0";
    $stmt_update = $conn->prepare($sql_update);
    $stmt_update->bindParam(':conversacion_id', $conversacion_id);
    $stmt_update->bindParam(':usuario_id', $usuario_id);
    $stmt_update->execute();
    
    // Actualizar último acceso del usuario
    $sql_access = "UPDATE chat_participantes 
                   SET ultimo_acceso = NOW() 
                   WHERE conversacion_id = :conversacion_id 
                   AND usuario_id = :usuario_id";
    $stmt_access = $conn->prepare($sql_access);
    $stmt_access->bindParam(':conversacion_id', $conversacion_id);
    $stmt_access->bindParam(':usuario_id', $usuario_id);
    $stmt_access->execute();
    
    echo json_encode(['success' => true, 'mensajes_actualizados' => $stmt_update->rowCount()]);
    
} catch (PDOException $e) {
    echo json_encode(['success' => false, 'error' => 'Error en la base de datos: ' . $e->getMessage()]);
}
?>


==============================================================================
ARCHIVO: backend\controllers\chat\obtener_conversaciones.php
==============================================================================

<?php
// Inhabilita la salida de errores en pantalla
ini_set('display_errors', 0);
error_reporting(E_ALL);

// Cabecera JSON antes de cualquier otra salida
header('Content-Type: application/json; charset=utf-8');

require_once __DIR__ . '/../../config/database.php';
require_once __DIR__ . '/../../config/cors.php';

// Iniciar sesión de forma segura
if (session_status() === PHP_SESSION_NONE) {
    session_start();
}

// Log para depuración
error_log("obtener_conversaciones.php - Iniciado");

// Verificar autenticación
if (!isset($_SESSION['user_id'])) {
    echo json_encode(['success' => false, 'error' => 'No autorizado']);
    exit;
}

$usuario_id = $_SESSION['user_id'];

try {
    $db = new Database();
    $conn = $db->connect();
    
    // Verificar si hay conversaciones para este usuario
    $checkSql = "SELECT COUNT(*) FROM chat_participantes WHERE usuario_id = :uid";
    $checkStmt = $conn->prepare($checkSql);
    $checkStmt->bindParam(':uid', $usuario_id);
    $checkStmt->execute();
    error_log("Número de conversaciones: " . $checkStmt->fetchColumn());
    
    // Obtener conversaciones del usuario con sus datos
    $sql = "SELECT 
                c.id,
                c.titulo,
                c.tipo,
                c.created_at,
                (
                    SELECT mensaje 
                    FROM chat_mensajes 
                    WHERE conversacion_id = c.id 
                    ORDER BY created_at DESC 
                    LIMIT 1
                ) AS ultimo_mensaje,
                (
                    SELECT COUNT(*) 
                    FROM chat_mensajes 
                    WHERE conversacion_id = c.id 
                    AND remitente_id != :usuario_id
                    AND leido = 0
                ) AS mensajes_no_leidos
            FROM 
                chat_conversaciones c
            INNER JOIN 
                chat_participantes p ON p.conversacion_id = c.id
            WHERE 
                p.usuario_id = :usuario_id
            ORDER BY 
                (SELECT MAX(created_at) FROM chat_mensajes WHERE conversacion_id = c.id) DESC,
                c.created_at DESC";
                
    $stmt = $conn->prepare($sql);
    $stmt->bindParam(':usuario_id', $usuario_id, PDO::PARAM_INT);
    $stmt->execute();
    
    $conversaciones = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    echo json_encode(['success' => true, 'conversaciones' => $conversaciones]);
} catch (PDOException $e) {
    error_log("Error en obtener_conversaciones.php: " . $e->getMessage());
    echo json_encode(['success' => false, 'error' => 'Error en la base de datos']);
} catch (Exception $e) {
    error_log("Error general en obtener_conversaciones.php: " . $e->getMessage());
    echo json_encode(['success' => false, 'error' => 'Error del servidor']);
}
exit;


==============================================================================
ARCHIVO: backend\controllers\chat\obtener_mensajes.php
==============================================================================

<?php
// Inhabilita la salida de errores en pantalla
ini_set('display_errors', 0);
error_reporting(E_ALL);

// Cabecera JSON antes de cualquier otra salida
header('Content-Type: application/json; charset=utf-8');

require_once __DIR__ . '/../../config/database.php';
require_once __DIR__ . '/../../config/cors.php';

// Iniciar sesión de forma segura
if (session_status() === PHP_SESSION_NONE) {
    session_start();
}

// Log para depuración
error_log("obtener_mensajes.php - Iniciado");
error_log("GET: " . print_r($_GET, true));

// Verificar autenticación
if (!isset($_SESSION['user_id'])) {
    echo json_encode(['success' => false, 'error' => 'No autorizado']);
    exit;
}

// Verificar parámetro conversación
if (!isset($_GET['conversacion_id']) || empty($_GET['conversacion_id'])) {
    echo json_encode(['success' => false, 'error' => 'ID de conversación requerido']);
    exit;
}

$usuario_id = $_SESSION['user_id'];
$conversacion_id = $_GET['conversacion_id'];

try {
    $db = new Database();
    $conn = $db->connect();
    
    // Verificar que el usuario pertenece a esta conversación
    $sql_check = "SELECT COUNT(*) FROM chat_participantes 
                  WHERE usuario_id = :usuario_id 
                  AND conversacion_id = :conversacion_id";
    $stmt_check = $conn->prepare($sql_check);
    $stmt_check->bindParam(':usuario_id', $usuario_id, PDO::PARAM_INT);
    $stmt_check->bindParam(':conversacion_id', $conversacion_id, PDO::PARAM_INT);
    $stmt_check->execute();
    
    if ($stmt_check->fetchColumn() == 0) {
        echo json_encode(['success' => false, 'error' => 'No tienes acceso a esta conversación']);
        exit;
    }
    
    // Obtener información de la conversación
    $sql_conv = "SELECT c.id, c.titulo, c.tipo
                 FROM chat_conversaciones c
                 WHERE c.id = :conversacion_id";
    $stmt_conv = $conn->prepare($sql_conv);
    $stmt_conv->bindParam(':conversacion_id', $conversacion_id, PDO::PARAM_INT);
    $stmt_conv->execute();
    $conversacion = $stmt_conv->fetch(PDO::FETCH_ASSOC);
    
    // Obtener mensajes
    $sql_msgs = "SELECT m.id, m.conversacion_id, m.remitente_id, u.nombre as nombre_remitente, 
                        u.username, m.mensaje, m.leido, m.created_at
                 FROM chat_mensajes m
                 LEFT JOIN usuarios u ON m.remitente_id = u.id
                 WHERE m.conversacion_id = :conversacion_id
                 ORDER BY m.created_at ASC";
    $stmt_msgs = $conn->prepare($sql_msgs);
    $stmt_msgs->bindParam(':conversacion_id', $conversacion_id, PDO::PARAM_INT);
    $stmt_msgs->execute();
    $mensajes = $stmt_msgs->fetchAll(PDO::FETCH_ASSOC);
    
    echo json_encode([
        'success' => true, 
        'conversacion' => $conversacion,
        'mensajes' => $mensajes
    ]);
} catch (PDOException $e) {
    error_log("Error en obtener_mensajes.php: " . $e->getMessage());
    echo json_encode(['success' => false, 'error' => 'Error en la base de datos']);
} catch (Exception $e) {
    error_log("Error general en obtener_mensajes.php: " . $e->getMessage());
    echo json_encode(['success' => false, 'error' => 'Error del servidor']);
}
exit;


==============================================================================
ARCHIVO: backend\controllers\chat\obtener_usuarios.php
==============================================================================

<?php
// Inhabilita la salida de errores en pantalla pero registralos en log
ini_set('display_errors', 0);
error_reporting(E_ALL);

// Cabecera JSON antes de cualquier otra salida
header('Content-Type: application/json; charset=utf-8');

require_once __DIR__ . '/../../config/database.php';
require_once __DIR__ . '/../../config/cors.php';

// Iniciar sesión de forma segura
if (session_status() === PHP_SESSION_NONE) {
    session_start();
}

// Log para depuración
error_log("obtener_usuarios.php - Iniciado");
error_log("SESSION: " . print_r($_SESSION, true));

// Verificar autenticación
if (!isset($_SESSION['user_id'])) {
    error_log("No hay sesión de usuario");
    echo json_encode(['success' => false, 'error' => 'No autorizado']);
    exit;
}

$usuario_id = $_SESSION['user_id'];

try {
    $db = new Database();
    $conn = $db->connect();
    
    // Aquí falta el código de la consulta SQL
    // Esta es la parte que estaba incompleta y causaba el error 500
    $sql = "SELECT id, nombre, username FROM usuarios WHERE id != :usuario_id";
    $stmt = $conn->prepare($sql);
    $stmt->bindParam(':usuario_id', $usuario_id, PDO::PARAM_INT);
    $stmt->execute();
    
    $usuarios = $stmt->fetchAll(PDO::FETCH_ASSOC);
    error_log("Usuarios encontrados: " . count($usuarios));
    
    echo json_encode(['success' => true, 'usuarios' => $usuarios]);
} catch (PDOException $e) {
    error_log("Error en obtener_usuarios.php: " . $e->getMessage());
    http_response_code(500);
    echo json_encode(['success' => false, 'error' => 'Error en la base de datos: ' . $e->getMessage()]);
}
exit;


==============================================================================
ARCHIVO: backend\controllers\usuarios\heartbeat.php
==============================================================================

<?php
ini_set('display_errors', 0);
error_reporting(E_ALL);

if (session_status() === PHP_SESSION_NONE) {
    session_start();
}

if (!isset($_SESSION['user_id'])) {
    echo json_encode(['success' => false]);
    exit;
}

require_once __DIR__ . '/../../config/database.php';

try {
    $db = new Database();
    $conn = $db->connect();
    
    // Actualizar timestamp de actividad
    $sql = "UPDATE usuarios SET last_activity = :time WHERE id = :id";
    $stmt = $conn->prepare($sql);
    $currentTime = time();
    $stmt->bindParam(':time', $currentTime, PDO::PARAM_INT);
    $stmt->bindParam(':id', $_SESSION['user_id'], PDO::PARAM_INT);
    $result = $stmt->execute();
    
    echo json_encode(['success' => $result]);
} catch (Exception $e) {
    error_log("Error en heartbeat: " . $e->getMessage());
    echo json_encode(['success' => false]);
}
exit;


==============================================================================
ARCHIVO: backend\controllers\usuarios\limpiar_sesiones.php
==============================================================================

<?php
require_once __DIR__ . '/../../config/database.php';

// Este script se puede ejecutar desde cron o desde admin

// Definir el tiempo límite (3 minutos)
$tiempoLimite = time() - (3 * 60);

try {
    $db = new Database();
    $conn = $db->connect();
    
    // Limpiar usuarios inactivos
    $sql = "UPDATE usuarios SET last_activity = 0 
            WHERE last_activity > 0 AND last_activity < :tiempoLimite";
    $stmt = $conn->prepare($sql);
    $stmt->bindParam(':tiempoLimite', $tiempoLimite, PDO::PARAM_INT);
    $resultado = $stmt->execute();
    
    // Retornar resultado
    echo json_encode([
        'success' => true, 
        'limpiados' => $stmt->rowCount()
    ]);
    
} catch (PDOException $e) {
    echo json_encode(['success' => false, 'error' => $e->getMessage()]);
}
exit;


==============================================================================
ARCHIVO: backend\controllers\usuarios\marcar_desconexion.php
==============================================================================

<?php
header('Content-Type: application/json; charset=utf-8');
ini_set('display_errors', 0);
error_reporting(E_ALL);

if (session_status() === PHP_SESSION_NONE) {
    session_start();
}

if (!isset($_SESSION['user_id'])) {
    echo json_encode(['success' => false]);
    exit;
}

require_once __DIR__ . '/../../config/database.php';

try {
    $db = new Database();
    $conn = $db->connect();
    
    // Marcar timestamp de desconexión (ponemos 0 para indicar desconexión)
    $sql = "UPDATE usuarios SET last_activity = 0 WHERE id = :id";
    $stmt = $conn->prepare($sql);
    $stmt->bindParam(':id', $_SESSION['user_id'], PDO::PARAM_INT);
    $result = $stmt->execute();
    
    echo json_encode(['success' => $result]);
} catch (Exception $e) {
    error_log("Error al marcar desconexión: " . $e->getMessage());
    echo json_encode(['success' => false, 'error' => $e->getMessage()]);
}
exit;


==============================================================================
ARCHIVO: backend\controllers\usuarios\usuarios_online.php
==============================================================================

<?php
// Inhabilita la salida de errores en pantalla
ini_set('display_errors', 0);
error_reporting(E_ALL);

// Cabecera JSON antes de cualquier otra salida
header('Content-Type: application/json; charset=utf-8');

require_once __DIR__ . '/../../config/database.php';
require_once __DIR__ . '/../../config/cors.php';

// Iniciar sesión de forma segura
if (session_status() === PHP_SESSION_NONE) {
    session_start();
}

// Verificar autenticación
if (!isset($_SESSION['user_id'])) {
    echo json_encode(['success' => false, 'error' => 'No autorizado']);
    exit;
}

// Definir el tiempo límite (2 minutos = 120 segundos)
$tiempoLimite = time() - 120;

try {
    $db = new Database();
    $conn = $db->connect();
    
    // Actualizar timestamp del usuario actual
    $updateSql = "UPDATE usuarios SET last_activity = :time WHERE id = :id";
    $updateStmt = $conn->prepare($updateSql);
    $currentTime = time();
    $updateStmt->bindParam(':time', $currentTime, PDO::PARAM_INT);
    $updateStmt->bindParam(':id', $_SESSION['user_id'], PDO::PARAM_INT);
    $updateStmt->execute();
    
    // Limpiar usuarios inactivos automáticamente
    $limpiarSql = "UPDATE usuarios SET last_activity = 0 
                   WHERE last_activity > 0 
                   AND last_activity < :tiempoLimite";
    $limpiarStmt = $conn->prepare($limpiarSql);
    $limpiarStmt->bindParam(':tiempoLimite', $tiempoLimite, PDO::PARAM_INT);
    $limpiarStmt->execute();
    
    // Obtener usuarios conectados (activos en los últimos 2 minutos)
    // Excluir explícitamente usuarios con last_activity = 0
    $sql = "SELECT id, nombre, username, last_activity FROM usuarios 
            WHERE last_activity > :tiempoLimite 
            AND last_activity != 0
            ORDER BY nombre";
    $stmt = $conn->prepare($sql);
    $stmt->bindParam(':tiempoLimite', $tiempoLimite, PDO::PARAM_INT);
    $stmt->execute();
    
    $usuarios = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    // Formatear los datos para el frontend
    foreach ($usuarios as &$usuario) {
        $usuario['online'] = true;
        $usuario['tiempo_conexion'] = time() - $usuario['last_activity'];
    }
    
    echo json_encode(['success' => true, 'usuarios' => $usuarios]);
} catch (PDOException $e) {
    error_log("Error en usuarios_online.php: " . $e->getMessage());
    echo json_encode(['success' => false, 'error' => 'Error en la base de datos']);
}
exit;


==============================================================================
ARCHIVO: frontend\controllers\procesar_registro.php
==============================================================================

<?php
require_once __DIR__ . '/../../backend/config/database.php';

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $nombre = $_POST['nombre_persona'] ?? '';
    $apellido = $_POST['apellido_persona'] ?? '';
    $telefono = $_POST['telefono'] ?? '';
    $nombre_conector = $_POST['nombre_conector'] ?? '';
    $nombre_quien_trajo = $_POST['nombre_quien_trajo'] ?? '';
    $estado = $_POST['estado'] ?? '';
    $foto = ''; // Procesa la foto si es necesario
    $fecha_contacto = $_POST['fecha_contacto'] ?? '';
    $formulario_nuevos = $_POST['formulario_nuevos'] ?? '';
    $formulario_llamadas = $_POST['formulario_llamadas'] ?? '';
    $subido_por = $_POST['subido_por'] ?? '';
    $fecha_ultimo_contacto = $_POST['fecha_ultimo_contacto'] ?? '';
    $cumpleanos = $_POST['cumpleanos'] ?? '';
    $observaciones = $_POST['observaciones'] ?? '';

    try {
        $db = new Database();
        $conn = $db->connect();
        $stmt = $conn->prepare("INSERT INTO registros 
            (nombre_persona, apellido_persona, telefono, nombre_conector, nombre_quien_trajo, estado, foto, fecha_contacto, formulario_nuevos, formulario_llamadas, subido_por, fecha_ultimo_contacto, cumpleanos, observaciones)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
        $stmt->execute([
            $nombre, $apellido, $telefono, $nombre_conector, $nombre_quien_trajo, $estado, $foto, $fecha_contacto, $formulario_nuevos, $formulario_llamadas, $subido_por, $fecha_ultimo_contacto, $cumpleanos, $observaciones
        ]);
        echo "Registro agregado correctamente";
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
    }
} else {
    echo "Método no permitido.";
}


==============================================================================
ARCHIVO: frontend\views\acceso_denegado.php
==============================================================================

<?php
// filepath: c:\xampp\htdocs\Conexion-Main\frontend\views\acceso_denegado.php
require_once '../../backend/controllers/check_auth.php';
checkAuth();  // Para páginas que requieren cualquier usuario autenticado
?>
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Acceso Denegado</title>
    <link rel="stylesheet" href="/Conexion-Main/frontend/css/styles.css">
</head>
<body>
    <div class="error-container">
        <div class="error-box">
            <h1><i class="fas fa-exclamation-triangle"></i> Acceso Denegado</h1>
            <p>No tienes permisos suficientes para acceder a esta sección.</p>
            <a href="/Conexion-Main/frontend/views/admin.php" class="btn-back">Volver al Dashboard</a>
        </div>
    </div>
</body>
</html>


==============================================================================
ARCHIVO: frontend\views\admin.php
==============================================================================

<?php
// filepath: c:\xampp\htdocs\conexion-main\conexion-main\frontend\views\admin.php
if (session_status() == PHP_SESSION_NONE) {
    session_start();
}
require_once '../../backend/controllers/check_auth.php';
checkAuth();  // Para páginas que requieren cualquier usuario autenticado
// O para páginas que requieren roles específicos:
// checkAuth('admin');  // Solo para administradores



if (!isset($_SESSION['user'])) {
    header('Location: ../../index.html');
    exit;
}

$user = $_SESSION['user'];
$_SESSION['user_id'] = $user['id']; // Para compatibilidad con el chat
?>
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Panel de Usuario</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="../css/styles_admin.css">
    <link rel="stylesheet" href="../css/styles_agregar_registro.css">
    <script src="../js/modal_util.js"></script>
    <script src="../js/estados.js"></script>
    <script src="../js/observaciones.js"></script>
    <script src="../js/eliminar_registro.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.2/dist/chart.umd.min.js"></script>
    <script src="../js/estadisticas.js"></script>
    <script src="../js/estadisticas_personales.js"></script>
    <script src="../js/conector.js"></script>
    <script src="../js/filtrar.js"></script>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <link rel="stylesheet" href="../css/alertas.css">
    <link rel="stylesheet" href="../css/styles_modal_observaciones.css">
    <script src="../js/ver_observaciones.js"></script>
    <script src="../js/informes.js"></script>
    <link rel="stylesheet" href="../css/styles_chat.css">
    <script src="../js/chat.js"></script>
    <link rel="stylesheet" href="../css/foto_styles.css">
    <script src="../js/foto_maximizada.js"></script>
</head>
<body>
    <div id="debug-info" style="position:fixed; bottom:0; right:0; background:rgba(0,0,0,0.7); color:white; padding:10px; z-index:9999;"></div>

    <div class="layout">
        <div class="sidebar">
            <div class="sidebar-header">
                <img src="../img/logoConexion.png" alt="Logo de la aplicación">
                <h2>Panel del Usuario</h2>
            </div>
            
            <div class="user-info">
                <p><i class="fas fa-user"></i> Bienvenido, <?php echo htmlspecialchars($user['nombre'], ENT_QUOTES, 'UTF-8'); ?></p>
            </div>
            
            <div class="sidebar-menu">
                <a href="#" onclick="mostrarInicio();return false;"><i class="fas fa-home"></i> Inicio</a>
                <a href="#" onclick="cargarVista('vista_registros.php');return false;"><i class="fas fa-database"></i> Base de Datos General</a>
                <a href="#" onclick="cargarVista('vista_estadisticas.php');return false;"><i class="fas fa-chart-bar"></i> Estadísticas Generales</a>
                <a href="#" onclick="cargarVista('agregar_registro.php');return false;"><i class="fas fa-plus-circle"></i> Crear Nuevo Registro</a>
                <a href="#" onclick="cargarVista('vista_estadisticas_personales.php');return false;"><i class="fas fa-chart-line"></i> Estadísticas Personales</a>
                <a href="#" onclick="cargarVista('base_datos_personal.php');return false;"><i class="fas fa-table"></i> Base de Datos Personal</a>
                <a href="#" onclick="cargarVista('filtrar_base.php');return false;"><i class="fas fa-filter"></i> Filtrar Base</a>
                <a href="#" onclick="cargarVista('vista_informes.php');return false;"><i class="fas fa-file-alt"></i> Generar Informes</a>
                <a href="#" onclick="cargarVista('registrar_asistencia.php')"><i class="fas fa-clipboard-check"></i> Registrar Asistencia</a>
                <a href="#" onclick="cargarVista('ver_asistencias.php')"><i class="fas fa-clipboard-list"></i> Ver Asistencias</a>
                <a href="../../backend/controllers/logout.php" class="logout"><i class="fas fa-sign-out-alt"></i> Cerrar Sesión</a>
            </div>
        </div>
        
        <div class="main-content centrado">
            <div id="contenido-dinamico">
                <h1>Bienvenido al Panel de Control</h1>
                <p>Selecciona una opción del menú lateral para comenzar.</p>
                
                <div class="welcome-grid">
                    <div class="welcome-card" onclick="cargarVista('vista_registros.php')">
                        <i class="fas fa-database"></i>
                        <h3>Base de Datos</h3>
                        <p>Gestiona todos los registros y contactos</p>
                    </div>
                    
                    <div class="welcome-card" onclick="cargarVista('vista_estadisticas.php')">
                        <i class="fas fa-chart-bar"></i>
                        <h3>Estadísticas</h3>
                        <p>Visualiza métricas y tendencias</p>
                    </div>
                    
                    <div class="welcome-card" onclick="cargarVista('agregar_registro.php')">
                        <i class="fas fa-plus-circle"></i>
                        <h3>Nuevo Registro</h3>
                        <p>Añade nuevos contactos al sistema</p>
                    </div>
                    
                    <div class="welcome-card" onclick="cargarVista('vista_informes.php')">
                        <i class="fas fa-file-alt"></i>
                        <h3>Informes</h3>
                        <p>Genera y exporta informes personalizados</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Chat sidebar -->
    <div class="chat-sidebar" id="chat-sidebar">
        <div class="chat-header">
            <h2>Mensajes</h2>
            <div class="chat-controls">
                <button id="new-chat-btn" class="btn-new-chat"><i class="fas fa-plus"></i></button>
                <button id="minimize-chat-sidebar" class="btn-control"><i class="fas fa-minus"></i></button>
                <button id="close-chat-sidebar" class="btn-control"><i class="fas fa-times"></i></button>
            </div>
        </div>
        
        <div class="search-chat">
            <input type="text" id="buscar-conversaciones" placeholder="Buscar conversaciones...">
        </div>
        
        <div class="conversations-list">
            <!-- Estado de vacío -->
            <div class="empty-state" id="empty-conversations">
                <p>No tienes conversaciones activas</p>
                <p>Haz clic en <i class="fas fa-plus"></i> para iniciar una nueva</p>
            </div>
            <!-- Aquí se cargarán las conversaciones -->
        </div>
    </div>

    <!-- Ventana de chat -->
    <div id="chat-window" class="chat-window">
        <div class="chat-window-header">
            <div class="chat-avatar-container">
                <img src="..." class="chat-avatar" alt="">
            </div>
            <div class="chat-username"></div>
            <div class="chat-controls">
                <button id="minimize-chat" class="btn-control"><i class="fas fa-minus"></i></button>
                <button id="close-chat" class="btn-control"><i class="fas fa-times"></i></button>
            </div>
        </div>
        
        <div class="chat-messages">
            <!-- Los mensajes se cargarán aquí dinámicamente -->
        </div>
        
        <div class="chat-input">
            <textarea placeholder="Escribe un mensaje..."></textarea>
            <button id="send-message"><i class="fas fa-paper-plane"></i></button>
        </div>
    </div>
    
    <div id="modal-observaciones" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3><i class="fas fa-comment-alt"></i> Agregar observación</h3>
                <span class="close" onclick="cerrarModal('modal-observaciones')">&times;</span>
            </div>
            <div class="modal-body">
                <input type="hidden" id="id-registro" value="">
                <div class="form-group">
                    <label for="texto-observacion">Nueva observación:</label>
                    <textarea id="texto-observacion" rows="4" class="form-control" placeholder="Escribe aquí tu observación..."></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button id="btn-guardar-obs" class="btn btn-primary">
                    <i class="fas fa-save"></i> Guardar
                </button>
                <button type="button" onclick="cerrarModal('modal-observaciones')" class="btn btn-secondary">
                    <i class="fas fa-times"></i> Cancelar
                </button>
            </div>
        </div>
    </div>
    
    <!-- Modal para ver observaciones - Agregar en admin.php -->
    <div id="modal-ver-observaciones" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Historial de observaciones</h3>
                <span class="close" onclick="cerrarModalObservaciones()">&times;</span>
            </div>
            <div class="modal-body">
                <div id="observaciones-contenido" class="observaciones-historial">
                    <div class="cargando">Cargando observaciones...</div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" onclick="cerrarModalObservaciones()" class="btn btn-secondary">
                    <i class="fas fa-times"></i> Cerrar
                </button>
            </div>
        </div>
    </div>
    
    <div id="overlay-observaciones" style="position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(0,0,0,0.7); z-index:9999; display:none;"></div>
    
    <div class="modal-overlay" id="modal-overlay"></div>
    
    <script>
    // FUNCIONES DE NAVEGACIÓN
    function cargarVista(vista) {
        // Mostrar indicador de carga
        document.getElementById('contenido-dinamico').innerHTML = '<div class="loading-spinner"></div>';
        
        // Cargar el contenido mediante AJAX
        fetch(vista)
            .then(response => response.text())
            .then(data => {
                document.getElementById('contenido-dinamico').innerHTML = data;
                
                // Ejecutar los scripts en el contenido cargado
                const scriptTags = document.getElementById('contenido-dinamico').querySelectorAll('script');
                scriptTags.forEach(script => {
                    const newScript = document.createElement('script');
                    Array.from(script.attributes).forEach(attr => {
                        newScript.setAttribute(attr.name, attr.value);
                    });
                    newScript.appendChild(document.createTextNode(script.innerHTML));
                    script.parentNode.replaceChild(newScript, script);
                });
            })
            .catch(error => {
                document.getElementById('contenido-dinamico').innerHTML = 
                    `<div class="alert alert-danger">Error al cargar la vista: ${error}</div>`;
            });
    }

    function inicializarModulo(ruta) {
        // Estadísticas generales
        if (ruta === 'vista_estadisticas.php') {
            if (typeof inicializarEstadisticas === 'function') {
                console.log('Inicializando estadísticas generales');
                inicializarEstadisticas();
            }
        } 
        // Estadísticas personales
        else if (ruta.includes('vista_estadisticas_personales.php')) {
            if (typeof inicializarEstadisticasPersonales === 'function') {
                console.log('Inicializando estadísticas personales');
                inicializarEstadisticasPersonales();
            }
        } 
        // Base de datos personal
        else if (ruta === 'base_datos_personal.php') {
            if (typeof inicializarConector === 'function') {
                console.log('Inicializando conector');
                inicializarConector();
            }
        } 
        // Filtrar base
        else if (ruta === 'filtrar_base.php') {
            if (typeof inicializarFiltro === 'function') {
                console.log('Inicializando filtro');
                inicializarFiltro();
            }
        } 
        // Informes
        else if (ruta === 'vista_informes.php') {
            if (typeof inicializarInformes === 'function') {
                console.log('Inicializando módulo de informes');
                inicializarInformes();
            }
        }
    }

    // Nueva función para cargar módulo con espera
    function cargarModulo(ruta) {
        // Código existente de carga...
        
        // Añade esta parte después de cargar la vista de informes
        if (ruta === 'vista_informes.php') {
            // Esperar un momento para que el DOM se actualice
            setTimeout(function() {
                if (typeof inicializarInformes === 'function') {
                    inicializarInformes();
                } else {
                    console.error('La función inicializarInformes no está disponible');
                }
            }, 100);
        }
    }

    function mostrarInicio() {
        // Quitar clase active de todos los enlaces
        document.querySelectorAll('.sidebar a').forEach(link => {
            link.classList.remove('active');
        });
        
        // Añadir clase active al enlace de inicio
        document.querySelector('.sidebar a:first-child').classList.add('active');
        
        document.querySelector('.main-content').classList.add('centrado');
        document.getElementById('contenido-dinamico').innerHTML = `
            <h1>Bienvenido al Panel de Control</h1>
            <p>Selecciona una opción del menú lateral para comenzar.</p>
            
            <div class="welcome-grid">
                <div class="welcome-card" onclick="cargarVista('vista_registros.php')">
                    <i class="fas fa-database"></i>
                    <h3>Base de Datos</h3>
                    <p>Gestiona todos los registros y contactos</p>
                </div>
                
                <div class="welcome-card" onclick="cargarVista('vista_estadisticas.php')">
                    <i class="fas fa-chart-bar"></i>
                    <h3>Estadísticas</h3>
                    <p>Visualiza métricas y tendencias</p>
                </div>
                
                <div class="welcome-card" onclick="cargarVista('agregar_registro.php')">
                    <i class="fas fa-plus-circle"></i>
                    <h3>Nuevo Registro</h3>
                    <p>Añade nuevos contactos al sistema</p>
                </div>
                
                <div class="welcome-card" onclick="cargarVista('vista_informes.php')">
                    <i class="fas fa-file-alt"></i>
                    <h3>Informes</h3>
                    <p>Genera y exporta informes personalizados</p>
                </div>
            </div>
        `;
    }
    
    // Marcar como activo el enlace de inicio al cargar la página
    document.addEventListener('DOMContentLoaded', function() {
        document.querySelector('.sidebar a:first-child').classList.add('active');
    });

    // Función para logging
    function log(mensaje) {
        console.log(mensaje);
        const debug = document.getElementById('debug-info');
        if (debug) {
            debug.innerHTML += "<div>" + mensaje + "</div>";
            if (debug.children.length > 10) {
                debug.removeChild(debug.firstChild);
            }
        }
    }

    // Añade esta función en la sección de scripts de admin.php
    function actualizarEstado(estado, id) {
        console.log('Actualizando estado:', estado, id);
        
        const formData = new FormData();
        formData.append('id', id);
        formData.append('estado', estado);
        
        fetch('../../backend/controllers/actualizar_estado.php', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Estado actualizado correctamente');
            } else {
                alert('Error al actualizar: ' + (data.message || 'Error desconocido'));
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Error de comunicación con el servidor');
        });
    }

    document.addEventListener('DOMContentLoaded', function() {
        // Seleccionar todos los selectores de estado
        document.querySelectorAll('.selector-estado').forEach(select => {
            select.addEventListener('change', function() {
                const id = this.dataset.id;  // Obtener el ID del atributo data-id
                const estado = this.value;
                
                actualizarEstado(estado, id);
            });
        });
    });

    // Agregar después del último script en admin.php
    document.addEventListener('DOMContentLoaded', function() {
        // Inicializar chat
        if (typeof inicializarChat === 'function') {
            inicializarChat();
        }
        
        // Configurar botón toggle para chat
        const chatToggleBtn = document.getElementById('chat-toggle-button');
        const chatSidebar = document.getElementById('chat-sidebar');
        
        chatToggleBtn.addEventListener('click', function() {
            chatSidebar.classList.toggle('active');
        });
    });

    // Función para cargar ver_registro.php dinámicamente
    function cargarRegistro(id, editar = false) {
        // Detectar base URL
        const getBaseUrl = () => {
            const pathSegments = window.location.pathname.split('/');
            if (pathSegments.length > 1 && pathSegments[1]) {
                return '/' + pathSegments[1];
            }
            return '';
        };
        
        const baseUrl = getBaseUrl();
        const url = `${baseUrl}/frontend/views/ver_registro.php?id=${id}${editar ? '&editar=1' : ''}&ajax=1`;
        
        // Guardar la vista actual para poder volver después
        window.vistaAnterior = window.vistaActual || 'vista_registros.php';
        
        // Mostrar indicador de carga
        document.getElementById('contenido-dinamico').innerHTML = 
            '<div class="cargando-contenido"><i class="fas fa-spinner fa-spin"></i> Cargando registro...</div>';
        
        // Realizar la petición fetch
        fetch(url)
            .then(res => res.text())
            .then(html => {
                // Inyectar el contenido en el contenedor dinámico
                document.getElementById('contenido-dinamico').innerHTML = html;
                
                // Añadir una barra de navegación para volver
                const navBar = document.createElement('div');
                navBar.className = 'registro-nav-bar';
                navBar.innerHTML = `
                    <button onclick="cargarVista('${window.vistaAnterior}')" class="btn-volver">
                        <i class="fas fa-arrow-left"></i> Volver al listado
                    </button>
                    <h3>${editar ? 'Editar Registro' : 'Detalles del Registro'}</h3>
                `;
                
                // Insertar la barra de navegación al inicio del contenido
                const contenido = document.getElementById('contenido-dinamico');
                contenido.insertBefore(navBar, contenido.firstChild);
                
                // Cargar el CSS específico de ver_registro si no está ya cargado
                if (!document.querySelector('link[href*="styles_ver_registro.css"]')) {
                    const link = document.createElement('link');
                    link.rel = 'stylesheet';
                    link.href = '../css/styles_ver_registro.css';
                    document.head.appendChild(link);
                }
                
                // Inicializar cualquier JS necesario para el formulario
                inicializarFormularioRegistro();
            })
            .catch(error => {
                console.error('Error cargando el registro:', error);
                document.getElementById('contenido-dinamico').innerHTML = 
                    `<div class="error-mensaje">Error al cargar el registro: ${error.message}</div>
                    <button onclick="cargarVista('${window.vistaAnterior}')" class="btn-volver">
                        <i class="fas fa-arrow-left"></i> Volver al listado
                    </button>`;
            });
    }

    // Función para inicializar el formulario del registro
    function inicializarFormularioRegistro() {
        // Capturar formularios para envío AJAX
        const formularios = document.querySelectorAll('#contenido-dinamico form');
        
        formularios.forEach(form => {
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                
                // Mostrar indicador de carga
                const submitBtn = form.querySelector('button[type="submit"]');
                const originalText = submitBtn ? submitBtn.innerHTML : '';
                if (submitBtn) {
                    submitBtn.disabled = true;
                    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Guardando...';
                }
                
                // Enviar formulario con AJAX
                fetch(this.action, {
                    method: 'POST',
                    body: new FormData(this),
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.text())
                .then(data => {
                    try {
                        // Intentar parsear como JSON
                        const jsonData = JSON.parse(data);
                        if (jsonData.success) {
                            alert('Registro actualizado correctamente');
                            cargarVista(window.vistaAnterior || 'vista_registros.php');
                        } else {
                            alert('Error: ' + (jsonData.message || 'No se pudo actualizar el registro'));
                        }
                    } catch (e) {
                        // Si no es JSON, mostrar el texto devuelto
                        if (data.includes('correctamente')) {
                            alert('Registro actualizado correctamente');
                            cargarVista(window.vistaAnterior || 'vista_registros.php');
                        } else {
                            alert('Error: ' + data);
                        }
                    }
                    
                    // Restaurar botón
                    if (submitBtn) {
                        submitBtn.disabled = false;
                        submitBtn.innerHTML = originalText;
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error de conexión. Intenta nuevamente.');
                    
                    // Restaurar botón
                    if (submitBtn) {
                        submitBtn.disabled = false;
                        submitBtn.innerHTML = originalText;
                    }
                });
            });
        });
    }

    <!-- Añade esto al final antes de </body> -->
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Verificando elementos del chat:');
        
        // Verificar botones críticos
        const btnCerrar = document.getElementById('close-chat');
        if (btnCerrar) {
            console.log('✓ Botón cerrar encontrado');
            // Asegurar que tenga evento click
            btnCerrar.addEventListener('click', function() {
                console.log('Click en botón cerrar');
                const chatWindow = document.getElementById('chat-window');
                if (chatWindow) {
                    chatWindow.style.display = 'none';
                    console.log('Chat cerrado manualmente');
                }
            });
        } else {
            console.error('✗ Botón cerrar NO encontrado');
        }
        
        // Verificar ventana de chat
        const chatWindow = document.getElementById('chat-window');
        if (chatWindow) {
            console.log('✓ Ventana chat encontrada, display:', chatWindow.style.display);
        } else {
            console.error('✗ Ventana chat NO encontrada');
        }
    });

    document.addEventListener('DOMContentLoaded', function() {
        const elemento = document.getElementById('ID-DEL-ELEMENTO'); // Reemplaza con el ID correcto
        
        if (elemento) {
            elemento.addEventListener('click', function() {
                // tu código actual...
            });
        } else {
            console.log("Elemento no encontrado en esta vista");
        }
    });
    </script>

    <!-- Modal de usuarios conectados -->
    <div id="modal-usuarios-online" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Usuarios conectados</h2>
                <span class="close-modal">&times;</span>
            </div>
            <div class="modal-body">
                <div id="lista-usuarios-online">
                    <p class="cargando">Cargando usuarios...</p>
                </div>
            </div>
            <div class="modal-footer">
                <button id="btn-limpiar-sesiones" class="btn-limpiar"><i class="fas fa-broom"></i> Limpiar</button>
                <button id="btn-refresh-usuarios" class="btn-refresh"><i class="fas fa-sync-alt"></i> Actualizar</button>
                <button class="btn-cerrar">Cerrar</button>
            </div>
        </div>
    </div>

    <!-- Botón para abrir el modal de usuarios conectados -->
    <button id="btn-usuarios-online" class="floating-btn">
        <i class="fas fa-users"></i>
        <span id="contador-usuarios-online">0</span>
    </button>

    <!-- Botón flotante para abrir/cerrar el chat -->
    <button id="chat-toggle-button" class="chat-toggle-btn">
        <i class="fas fa-comments"></i>
        <span class="badge" id="chat-badge">0</span>
    </button>

    <script src="/Conexion-Main/frontend/js/usuarios-online.js"></script>
</body>
</html>


==============================================================================
ARCHIVO: frontend\views\agregar_registro.php
==============================================================================

<?php
require_once '../../backend/controllers/check_auth.php';
checkAuth();  // Para páginas que requieren cualquier usuario autenticado
// O para páginas que requieren roles específicos:
// checkAuth('admin');  // Solo para administradores

require_once __DIR__ . '/../../backend/config/database.php';
session_start();

// Al inicio del archivo, después de los includes
$estadosPorCategoria = [
    'Contacto Inicial' => [
        'Primer contacto' => 'background:#ffcccc; color:#a00;',
        'Conectado' => 'background:#ffd6cc; color:#b36b00;',
        'Primer intento' => 'background:#f5e6ff; color:#5a00b3;',
        'Segundo Intento' => 'background:#e6ccff; color:#5a00b3;',
        'Tercero intento' => 'background:#d9b3ff; color:#5a00b3;',
        'Intento llamada telefonica' => 'background:#e1f5fe; color:#0288d1;',     // NUEVO
        'Intento 2 llamada telefonica' => 'background:#b3e5fc; color:#0277bd;',   // NUEVO
        'Intento 3 llamada telefonica' => 'background:#81d4fa; color:#01579b;',   // NUEVO
        'No interesado' => 'background:#ffdddd; color:#a00;'
    ],
    'Desayunos' => [
        'No confirma desayuno' => 'background:#ffe5cc; color:#b36b00;',
        'Confirmado a Desayuno' => 'background:#cce0ff; color:#00509e;',
        'Desayuno Asistido' => 'background:#cce6ff; color:#00509e;'
    ],
    'Miembros' => [
        'Miembro activo' => 'background:#d9f2d9; color:#006600;',
        'Miembro inactivo' => 'background:#ffebcc; color:#994d00;',
        'Miembro ausente' => 'background:#ffe6e6; color:#cc0000;',
        'Congregado sin desayuno' => 'background:#d4edda; color:#155724;',
        'Visitante' => 'background:#fff; color:#222;'
    ],
    'Líderes' => [
        'Lider Activo' => 'background:#cce0ff; color:#004080;',
        'Lider inactivo' => 'background:#e6e6e6; color:#666666;',
        'Lider ausente' => 'background:#ffe6ea; color:#990033;'
    ],
    'Reconexión' => [
        'Reconectado' => 'background:#c8e6c9; color:#2e7d32;',
        'Intento de reconexión' => 'background:#dcedc8; color:#33691e;',
        'Etapa 1 reconexion (1 mes)' => 'background:#fff9c4; color:#f57f17;',      // Color amarillo
        'Etapa 2 reconexion (3 mes)' => 'background:#ffe0b2; color:#e65100;',      // Color naranja
        'Etapa 3 reconexion final (6 mes)' => 'background:#ffcdd2; color:#c62828;' // Color rojo
    ],
    'Otros' => [
        'Por Validar Estado' => 'background:#ffe5b4; color:#b36b00;',
        'Nulo' => 'background:#e0e0e0; color:#757575;',
        'Delegado a acompañante' => 'background:#e1bee7; color:#6a1b9a;',
        'Datos no autorizados' => 'background:#ffcdd2; color:#d32f2f;',
        'Datos incorrectos' => 'background:#f8bbd0; color:#c2185b;'               // NUEVO
    ],
    'Ministerios' => [
        'Vencedores Kids' => 'background:#ffeb3b; color:#8c6d00;',
        'Legado' => 'background:#dcedc8; color:#558b2f;',
        'Teens Legado' => 'background:#c8e6c9; color:#2e7d32;',
    ]
];

// Mostrar mensajes de error o éxito si existen
if (isset($_SESSION['error_mensaje'])) {
    echo '<div class="alert alert-danger">' . $_SESSION['error_mensaje'] . '</div>';
    unset($_SESSION['error_mensaje']);
}
if (isset($_SESSION['exito_mensaje'])) {
    echo '<div class="alert alert-success">' . $_SESSION['exito_mensaje'] . '</div>';
    unset($_SESSION['exito_mensaje']);
}

// Obtener lista de conectores para el desplegable
try {
    $db = new Database();
    $conn = $db->connect();
    $stmt = $conn->query("SELECT DISTINCT nombre_conector FROM registros WHERE nombre_conector IS NOT NULL AND nombre_conector != '' ORDER BY nombre_conector");
    $conectores = $stmt->fetchAll(PDO::FETCH_COLUMN);
} catch (PDOException $e) {
    $conectores = [];
}
?>

<link rel="stylesheet" href="../css/styles_agregar_registro.css">

<div class="registro-container">
    <div class="registro-header">
        <h2><i class="fas fa-user-plus"></i> Agregar Nuevo Registro</h2>
        <a href="#" onclick="cargarVista('vista_registros.php'); return false;" class="btn-back"><i class="fas fa-arrow-left"></i> Volver a Registros</a>
    </div>
    
    <form id="formulario-registro" method="post" action="../../backend/controllers/procesar_registro.php" enctype="multipart/form-data">
        <!-- Estructura en dos columnas principales -->
        <div class="form-columns">
            <!-- Columna izquierda con datos principales -->
            <div class="form-column">
                <!-- Sección 1: Información Principal -->
                <div class="form-section">
                    <h3><i class="fas fa-user"></i> Información Personal</h3>
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="nombre_persona">Nombre <span class="required">*</span></label>
                            <input type="text" id="nombre_persona" name="nombre_persona" required>
                        </div>
                        <div class="form-group">
                            <label for="apellido_persona">Apellido <span class="required">*</span></label>
                            <input type="text" id="apellido_persona" name="apellido_persona" required>
                        </div>
                        <div class="form-group">
                            <label for="telefono">Teléfono <span class="required">*</span></label>
                            <input type="text" id="telefono" name="telefono" required>
                        </div>
                        <div class="form-group">
                            <label for="cumpleanos">Fecha de Nacimiento</label>
                            <input type="text" id="cumpleanos" name="cumpleanos" placeholder="Ejemplo: 1 de noviembre">
                            <small class="field-hint">Ingresa solo el día y mes, sin el año</small>
                        </div>
                    </div>
                </div>
                
                <!-- Sección 2: Información de Conexión -->
                <div class="form-section">
                    <h3><i class="fas fa-link"></i> Información de Conexión</h3>
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="nombre_conector">Conector</label>
                            <select id="nombre_conector" name="nombre_conector">
                                <option value="">-- Seleccione --</option>
                                <?php foreach ($conectores as $conector): ?>
                                    <option value="<?= htmlspecialchars($conector) ?>"><?= htmlspecialchars($conector) ?></option>
                                <?php endforeach; ?>
                                <option value="otro">Otro (nuevo)</option>
                            </select>
                        </div>
                        <div class="form-group" id="otro-conector-group" style="display:none;">
                            <label for="otro_conector">Nombre del Conector</label>
                            <input type="text" id="otro_conector" name="otro_conector">
                        </div>
                        <div class="form-group">
                            <label for="nombre_quien_trajo">Invitado por</label>
                            <input type="text" id="nombre_quien_trajo" name="nombre_quien_trajo">
                        </div>
                        <div class="form-group">
                            <label for="fecha_contacto">Fecha de Contacto</label>
                            <input type="date" id="fecha_contacto" name="fecha_contacto" value="<?= date('Y-m-d') ?>">
                        </div>
                        <div class="form-group">
                            <label for="fecha_ultimo_contacto">Último Contacto</label>
                            <input type="date" id="fecha_ultimo_contacto" name="fecha_ultimo_contacto">
                        </div>
                        <div class="form-group">
                            <label for="proximo_contacto">Próximo Contacto:</label>
                            <input type="date" id="proximo_contacto" name="proximo_contacto" class="form-control">
                            <small class="text-muted">Programa la fecha para el siguiente seguimiento</small>
                        </div>
                    </div>
                </div>
                
                <!-- Sección 3: Estado y Formularios -->
                <div class="form-section">
                    <h3><i class="fas fa-clipboard-list"></i> Estado y Seguimiento</h3>
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="estado">Estado Actual</label>
                            <select id="estado" name="estado">
                                <?php foreach ($estadosPorCategoria as $categoria => $estados): ?>
                                    <optgroup label="<?php echo $categoria; ?>">
                                        <?php foreach ($estados as $estado => $estilo): ?>
                                            <option value="<?php echo $estado; ?>" style="<?php echo $estilo; ?>">
                                                <?php echo $estado; ?>
                                            </option>
                                        <?php endforeach; ?>
                                    </optgroup>
                                <?php endforeach; ?>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="formulario_nuevos">Formulario Nuevos</label>
                            <input type="text" id="formulario_nuevos" name="formulario_nuevos" placeholder="Estado o información del formulario">
                            <small class="field-hint">Ejemplo: Completado, Pendiente, En proceso...</small>
                        </div>
                        <div class="form-group">
                            <label for="formulario_llamadas">Formulario Llamadas</label>
                            <input type="text" id="formulario_llamadas" name="formulario_llamadas" placeholder="Estado o información del formulario">
                            <small class="field-hint">Ejemplo: Realizada, Pendiente, No contesta...</small>
                        </div>
                    </div>
                </div>
                
                <!-- Sección 4: Observaciones -->
                <div class="form-section">
                    <h3><i class="fas fa-comment-alt"></i> Observaciones</h3>
                    <div class="form-group">
                        <textarea id="observaciones" name="observaciones" rows="4" placeholder="Escribe aquí las observaciones relevantes..."></textarea>
                    </div>
                </div>
            </div>
            
            <!-- Columna derecha con foto -->
            <div class="form-column">
                <!-- Sección 5: Fotografía -->
                <div class="form-section photo-section">
                    <h3><i class="fas fa-camera"></i> Fotografía</h3>
                    <div class="form-group">
                        <label for="foto">Foto:</label>
                        <input type="file" name="foto" id="foto" class="form-control" accept="image/*">
                        <small class="form-text text-muted">Formatos permitidos: JPG, PNG, GIF. Tamaño máximo: 2MB</small>
                        
                        <!-- Vista previa de la imagen -->
                        <div id="imagen-preview" class="mt-2" style="display:none;">
                            <img id="preview" src="#" alt="Vista previa" style="max-width: 200px; max-height: 200px;">
                            <button type="button" class="btn btn-sm btn-danger mt-1" onclick="eliminarImagen()">Eliminar imagen</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Botones de acción -->
        <div class="form-actions">
            <button type="submit" class="btn-primary"><i class="fas fa-save"></i> Guardar Registro</button>
            <button type="reset" class="btn-secondary"><i class="fas fa-undo"></i> Limpiar Formulario</button>
        </div>
    </form>
</div>

<script>
// Mostrar campo de texto si selecciona "Otro" en conectores
document.getElementById('nombre_conector').addEventListener('change', function() {
    if (this.value === 'otro') {
        document.getElementById('otro-conector-group').style.display = 'block';
    } else {
        document.getElementById('otro-conector-group').style.display = 'none';
    }
});

// Vista previa de la imagen
document.getElementById('foto').addEventListener('change', function(e) {
    const file = this.files[0];
    if (file) {
        const reader = new FileReader();
        
        reader.onload = function(e) {
            document.getElementById('preview').src = e.target.result;
            document.getElementById('imagen-preview').style.display = 'block';
        }
        
        reader.readAsDataURL(file);
    }
});

// Eliminar la imagen seleccionada
function eliminarImagen() {
    document.getElementById('foto').value = '';
    document.getElementById('imagen-preview').style.display = 'none';
}

// Validación del formulario
document.getElementById('form-registro').addEventListener('submit', function(e) {
    let hasErrors = false;
    
    // Validar nombre y apellido (no vacíos)
    const nombre = document.getElementById('nombre_persona').value.trim();
    const apellido = document.getElementById('apellido_persona').value.trim();
    const telefono = document.getElementById('telefono').value.trim();
    
    if (nombre === '') {
        markInvalid('nombre_persona', 'El nombre es obligatorio');
        hasErrors = true;
    }
    
    if (apellido === '') {
        markInvalid('apellido_persona', 'El apellido es obligatorio');
        hasErrors = true;
    }
    
    // Validar teléfono (no vacío)
    if (telefono === '') {
        markInvalid('telefono', 'El teléfono es obligatorio');
        hasErrors = true;
    }
    
    // Si seleccionó "otro" en conector, validar que lo haya escrito
    if (document.getElementById('nombre_conector').value === 'otro') {
        const otroConector = document.getElementById('otro_conector').value.trim();
        if (otroConector === '') {
            markInvalid('otro_conector', 'Ingresa el nombre del conector');
            hasErrors = true;
        }
    }
    
    if (hasErrors) {
        e.preventDefault(); // Detener envío del formulario
        // Desplazar a primer error
        document.querySelector('.form-group.has-error').scrollIntoView({
            behavior: 'smooth',
            block: 'center'
        });
    }
});

// Función auxiliar para marcar campos inválidos
function markInvalid(id, message) {
    const field = document.getElementById(id);
    const formGroup = field.closest('.form-group');
    formGroup.classList.add('has-error');
    
    // Añadir mensaje de error si no existe
    if (!formGroup.querySelector('.error-message')) {
        const errorMsg = document.createElement('div');
        errorMsg.className = 'error-message';
        errorMsg.textContent = message;
        formGroup.appendChild(errorMsg);
    }
    
    // Eliminar mensaje al cambiar el valor
    field.addEventListener('input', function() {
        formGroup.classList.remove('has-error');
        const errorMsg = formGroup.querySelector('.error-message');
        if (errorMsg) {
            errorMsg.remove();
        }
    }, { once: true });
}
</script>

<!-- Añadir al final del archivo para diagnosticar límites de subida -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    console.log('Verificando límites de carga de archivos...');
    
    fetch('../../backend/controllers/check_upload_limits.php')
        .then(response => response.json())
        .then(data => {
            console.log('Límites de subida:', data);
        })
        .catch(error => {
            console.error('Error verificando límites:', error);
        });
});
</script>


==============================================================================
ARCHIVO: frontend\views\api_filtrar_registros.php
==============================================================================

<?php
require_once '../../backend/controllers/check_auth.php';
checkAuth();  // Para páginas que requieren cualquier usuario autenticado

require_once __DIR__ . '/../../backend/config/database.php';
header('Content-Type: application/json; charset=utf-8');

$campo = $_GET['campo'] ?? '';
$valor = $_GET['valor'] ?? '';

if (!$campo) {
    echo json_encode([]);
    exit;
}

try {
    $db = new Database();
    $conn = $db->connect();
    
    // Lista de campos permitidos para prevenir inyección SQL
    $camposPermitidos = [
        'nombre_persona', 
        'apellido_persona', 
        'telefono', 
        'nombre_conector', 
        'estado', 
        'observaciones',
        'proximo_contacto'  // Añadir el nuevo campo
    ];
    
    if (!in_array($campo, $camposPermitidos)) {
        echo json_encode([]);
        exit;
    }
    
    // Si se proporciona un valor específico
    if ($valor) {
        $stmt = $conn->prepare("SELECT id, nombre_persona, apellido_persona, telefono, nombre_conector, estado, observaciones, proximo_contacto FROM registros WHERE $campo = :valor ORDER BY id DESC");
        $stmt->execute([':valor' => $valor]);
    } else { 
        // Si queremos todos los registros para ese campo (que no sean nulos)
        $stmt = $conn->prepare("SELECT id, nombre_persona, apellido_persona, telefono, nombre_conector, estado, observaciones, proximo_contacto FROM registros WHERE $campo IS NOT NULL AND $campo != '' ORDER BY $campo, id DESC");
        $stmt->execute();
    }
    
    echo json_encode($stmt->fetchAll(PDO::FETCH_ASSOC));
    
} catch (PDOException $e) {
    echo json_encode([]);
}


==============================================================================
ARCHIVO: frontend\views\api_registros_conector.php
==============================================================================

<?php
require_once '../../backend/controllers/check_auth.php';
checkAuth();  // Para páginas que requieren cualquier usuario autenticado
// O para páginas que requieren roles específicos:
// checkAuth('admin');  // Solo para administradores

require_once __DIR__ . '/../../backend/config/database.php';
header('Content-Type: application/json; charset=utf-8');

$conector = $_GET['conector'] ?? '';
if (!$conector) {
    echo json_encode([]);
    exit;
}

try {
    $db = new Database();
    $conn = $db->connect();
    
    $stmt = $conn->prepare("
        SELECT id, nombre_persona, apellido_persona, telefono, estado, observaciones
        FROM registros 
        WHERE nombre_conector = :conector
        ORDER BY id DESC
    ");
    $stmt->execute([':conector' => $conector]);
    
    echo json_encode($stmt->fetchAll(PDO::FETCH_ASSOC));
    
} catch (PDOException $e) {
    echo json_encode([]);
}


==============================================================================
ARCHIVO: frontend\views\api_valores_unicos.php
==============================================================================

<?php
require_once '../../backend/controllers/check_auth.php';
checkAuth();  // Para páginas que requieren cualquier usuario autenticado

require_once __DIR__ . '/../../backend/config/database.php';
header('Content-Type: application/json; charset=utf-8');

$campo = $_GET['campo'] ?? '';
if (!$campo) {
    echo json_encode([]);
    exit;
}

try {
    $db = new Database();
    $conn = $db->connect();
    
    // Lista de campos permitidos para prevenir inyección SQL
    $camposPermitidos = [
        'nombre_persona', 
        'apellido_persona', 
        'telefono', 
        'nombre_conector', 
        'estado', 
        'observaciones',
        'proximo_contacto'  // Añadido nuevo campo
    ];
    
    if (!in_array($campo, $camposPermitidos)) {
        echo json_encode([]);
        exit;
    }
    
    $stmt = $conn->prepare("SELECT DISTINCT $campo FROM registros WHERE $campo IS NOT NULL AND $campo != '' ORDER BY $campo");
    $stmt->execute();
    echo json_encode($stmt->fetchAll(PDO::FETCH_COLUMN));
    
} catch (PDOException $e) {
    echo json_encode([]);
}


==============================================================================
ARCHIVO: frontend\views\base_datos_personal.php
==============================================================================

<?php
require_once '../../backend/controllers/check_auth.php';
checkAuth();  // Para páginas que requieren cualquier usuario autenticado

require_once __DIR__ . '/../../backend/config/database.php';

try {
    $db = new Database();
    $conn = $db->connect();
    // “nombre_conector” es el campo en la tabla registros
    $conectores = $conn
        ->query("
            SELECT DISTINCT nombre_conector
              FROM registros
             ORDER BY nombre_conector
        ")
        ->fetchAll(PDO::FETCH_COLUMN);
} catch (PDOException $e) {
    $conectores = [];
}
?>
<link rel="stylesheet" href="../css/styles_base_personal.css">

<div class="personal-db-container">
  <h2>Base de Datos Personal por Conector</h2>

  <form class="form-inline" onsubmit="return false;">
    <label for="conector">Conector:</label>
    <select id="conector-personal">
      <option value="">-- Selecciona --</option>
      <?php foreach ($conectores as $c): ?>
        <option value="<?= htmlspecialchars($c, ENT_QUOTES) ?>">
          <?= htmlspecialchars($c, ENT_QUOTES) ?>
        </option>
      <?php endforeach; ?>
    </select>
  </form>

  <div class="table-responsive">
    <table id="tabla-registros-conector" border="1" cellpadding="6" cellspacing="0">
      <thead>
        <tr>
          <th>ID</th>
          <th>Nombre</th>
          <th>Apellido</th>
          <th>Teléfono</th>
          <th>Estado</th>
          <th>Observaciones</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td colspan="6" style="text-align:center;">Selecciona un conector</td>
        </tr>
      </tbody>
    </table>
  </div>
</div>

<script>
const tbody = document.querySelector('#tabla-registros-conector tbody');
const select = document.querySelector('#conector-personal');

if (!select || !tbody) {
  console.log('No se encontraron elementos necesarios para Base de Datos Personal');
  return;
}
</script>



==============================================================================
ARCHIVO: frontend\views\editar_registro.php
==============================================================================

// Actualiza la previsualización de imagen:
<img src="<?php echo !empty($registro['foto']) ? '../img/' . $registro['foto'] : '../img/no-foto.jpg'; ?>" alt="Foto del registro">


==============================================================================
ARCHIVO: frontend\views\estadisticas_generales.php
==============================================================================

<?php
// Añade esto al inicio de cada archivo PHP en frontend/views/
require_once '../../backend/controllers/check_auth.php';
checkAuth();  // Para páginas que requieren cualquier usuario autenticado
// O para páginas que requieren roles específicos:
// checkAuth('admin');  // Solo para administradores
?>

<link rel="stylesheet" href="../css/styles_estadisticas.css">

<div class="stats-container">
    <div class="stats-header">
        <h2><i class="fas fa-chart-bar"></i> Estadísticas Generales</h2>
        <div class="date-range"><i class="fas fa-calendar-alt"></i> Últimos 30 días</div>
    </div>
    
    <div class="stats-cards">
        <div class="stat-card primary">
            <div class="stat-title"><i class="fas fa-users"></i> Total de Registros</div>
            <div class="stat-value">247</div>
            <div class="stat-change positive">
                <i class="fas fa-arrow-up"></i> 12% desde el mes pasado
            </div>
        </div>
        
        <div class="stat-card success">
            <div class="stat-title"><i class="fas fa-user-check"></i> Conectados</div>
            <div class="stat-value">156</div>
            <div class="stat-change positive">
                <i class="fas fa-arrow-up"></i> 8% desde el mes pasado
            </div>
        </div>
        
        <div class="stat-card warning">
            <div class="stat-title"><i class="fas fa-utensils"></i> Confirmados a Desayuno</div>
            <div class="stat-value">89</div>
            <div class="stat-change positive">
                <i class="fas fa-arrow-up"></i> 5% desde el mes pasado
            </div>
        </div>
        
        <div class="stat-card danger">
            <div class="stat-title"><i class="fas fa-user-times"></i> No interesados</div>
            <div class="stat-value">12</div>
            <div class="stat-change negative">
                <i class="fas fa-arrow-down"></i> 3% desde el mes pasado
            </div>
        </div>
    </div>
    
    <div class="chart-container">
        <div class="chart-header">
            <div class="chart-title">Registros por Estado</div>
            <div class="chart-actions">
                <button class="chart-action-btn active">Semanal</button>
                <button class="chart-action-btn">Mensual</button>
                <button class="chart-action-btn">Anual</button>
            </div>
        </div>
        <!-- Aquí iría el gráfico usando Chart.js o similar -->
        <canvas id="estadosChart" width="400" height="200"></canvas>
    </div>
    
    <div class="chart-container">
        <div class="chart-header">
            <div class="chart-title">Tendencia de Registros</div>
            <div class="chart-actions">
                <button class="chart-action-btn active">Línea</button>
                <button class="chart-action-btn">Barras</button>
            </div>
        </div>
        <!-- Aquí iría otro gráfico -->
        <canvas id="tendenciaChart" width="400" height="200"></canvas>
    </div>
    
    <div class="table-responsive">
        <table class="stats-table">
            <thead>
                <tr>
                    <th>Estado</th>
                    <th>Total</th>
                    <th>Porcentaje</th>
                    <th>Cambio</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Primer contacto</td>
                    <td>45</td>
                    <td>18.2%</td>
                    <td class="positive">+5.2%</td>
                </tr>
                <tr>
                    <td>Conectado</td>
                    <td>156</td>
                    <td>63.2%</td>
                    <td class="positive">+8.1%</td>
                </tr>
                <tr>
                    <td>Confirmado a Desayuno</td>
                    <td>89</td>
                    <td>36.0%</td>
                    <td class="positive">+4.7%</td>
                </tr>
                <tr>
                    <td>Desayuno Asistido</td>
                    <td>62</td>
                    <td>25.1%</td>
                    <td class="positive">+3.2%</td>
                </tr>
                <tr>
                    <td>No interesado</td>
                    <td>12</td>
                    <td>4.9%</td>
                    <td class="negative">-3.1%</td>
                </tr>
            </tbody>
        </table>
    </div>
</div>


==============================================================================
ARCHIVO: frontend\views\filtrar_base.php
==============================================================================

<?php
// filepath: c:\xampp\htdocs\conexion-main\conexion-main\frontend\views\filtrar_base.php
require_once '../../backend/controllers/check_auth.php';
checkAuth();  // Para páginas que requieren cualquier usuario autenticado

require_once __DIR__ . '/../../backend/config/database.php';

// Inicializar las variables
$estados_lista = [];
$conectores_lista = [];

try {
    $db = new Database();
    $conn = $db->connect();
    
    // Para los selectores de filtros, obtener estados y conectores únicos
    $stmt_estados = $conn->prepare("SELECT DISTINCT estado FROM registros ORDER BY estado");
    $stmt_estados->execute();
    $estados_lista = $stmt_estados->fetchAll(PDO::FETCH_COLUMN);
    
    $stmt_conectores = $conn->prepare("SELECT DISTINCT nombre_conector FROM registros ORDER BY nombre_conector");
    $stmt_conectores->execute();
    $conectores_lista = $stmt_conectores->fetchAll(PDO::FETCH_COLUMN);
    
} catch (PDOException $e) {
    $error = "Error en la conexión: " . $e->getMessage();
}
?>

<link rel="stylesheet" href="../css/styles_filtrar_base.css">

<div class="filter-container">
    <div class="filter-header">
        <h2><i class="fas fa-filter"></i> Filtrar Base de Datos</h2>
        
        <!-- Botón para volver al inicio -->
        <button type="button" class="btn-home" onclick="mostrarInicio()">
            <i class="fas fa-home"></i> Volver al Inicio
        </button>
    </div>
    
    <form id="filtro-form">
        <div class="filter-form">
            <div class="filter-group">
                <label for="nombre">Nombre</label>
                <input type="text" id="nombre" name="nombre" placeholder="Buscar por nombre">
            </div>
            
            <div class="filter-group">
                <label for="apellido">Apellido</label>
                <input type="text" id="apellido" name="apellido" placeholder="Buscar por apellido">
            </div>
            
            <div class="filter-group">
                <label for="estado">Estado</label>
                <select id="estado" name="estado">
                    <option value="">Todos los estados</option>
                    <?php foreach ($estados_lista as $estado_opcion): ?>
                    <option value="<?php echo htmlspecialchars($estado_opcion); ?>">
                        <?php echo htmlspecialchars($estado_opcion); ?>
                    </option>
                    <?php endforeach; ?>
                </select>
            </div>
            
            <div class="filter-group">
                <label for="conector">Conector</label>
                <select id="conector" name="conector">
                    <option value="">Todos los conectores</option>
                    <?php foreach ($conectores_lista as $conector_opcion): ?>
                    <option value="<?php echo htmlspecialchars($conector_opcion); ?>">
                        <?php echo htmlspecialchars($conector_opcion); ?>
                    </option>
                    <?php endforeach; ?>
                </select>
            </div>
            
            <div class="filter-group">
                <label for="fecha_desde">Fecha Desde</label>
                <input type="date" id="fecha_desde" name="fecha_desde">
            </div>
            
            <div class="filter-group">
                <label for="fecha_hasta">Fecha Hasta</label>
                <input type="date" id="fecha_hasta" name="fecha_hasta">
            </div>

            <div class="filter-group">
                <label for="proximo_desde">Próximo Contacto Desde</label>
                <input type="date" id="proximo_desde" name="proximo_desde">
            </div>

            <div class="filter-group">
                <label for="proximo_hasta">Próximo Contacto Hasta</label>
                <input type="date" id="proximo_hasta" name="proximo_hasta">
            </div>

            <div class="filter-group filter-checkbox">
                <input type="checkbox" id="contactos_hoy" name="contactos_hoy" value="1">
                <label for="contactos_hoy">Solo contactos de hoy</label>
            </div>

            <div class="filter-group filter-checkbox">
                <input type="checkbox" id="contactos_pendientes" name="contactos_pendientes" value="1">
                <label for="contactos_pendientes">Contactos pendientes (próximos 7 días)</label>
            </div>
        </div>
        
        <div class="filter-actions">
            <button type="button" class="btn-reset" id="btn-limpiar"><i class="fas fa-eraser"></i> Limpiar Filtros</button>
            <button type="button" class="btn-filter" id="btn-aplicar"><i class="fas fa-search"></i> Aplicar Filtros</button>
        </div>
    </form>
    
    <!-- Contenedor para los resultados -->
    <div id="resultados-container" style="display:none;">
        <div class="results-header">
            <h3><i class="fas fa-list"></i> Resultados</h3>
            <button type="button" class="btn-back" id="btn-volver"><i class="fas fa-arrow-left"></i> Volver a Filtros</button>
        </div>
        <div id="resultados-filtro">
            <!-- Aquí se cargarán los resultados -->
        </div>
    </div>
</div>


==============================================================================
ARCHIVO: frontend\views\registrar_asistencia.php
==============================================================================

<?php

require_once '../../backend/controllers/check_auth.php';
checkAuth('admin'); // Restringe a administradores y usuarios con roles específicos

// Obtener la fecha actual para el formulario
$fechaHoy = date('Y-m-d');

// Obtener lista de eventos para hoy (opcional)
require_once '../../backend/config/database.php';
$db = new Database();
$conn = $db->connect();

// Consulta para obtener eventos de hoy
$stmt = $conn->prepare("SELECT id, nombre FROM eventos WHERE fecha = CURRENT_DATE() ORDER BY hora_inicio");
$stmt->execute();
$eventos = $stmt->fetchAll(PDO::FETCH_ASSOC);

// Consulta para obtener todos los usuarios
$stmt = $conn->prepare("SELECT id, username, nombre FROM usuarios ORDER BY nombre");
$stmt->execute();
$usuarios = $stmt->fetchAll(PDO::FETCH_ASSOC);
?>

<link rel="stylesheet" href="../css/styles.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

<div class="content-wrapper">
    <div class="page-header">
        <h2><i class="fas fa-clipboard-check"></i> Registro de Asistencia</h2>
    </div>
    
    <div class="card">
        <div class="card-body">
            <!-- Formulario para registro individual -->
            <div class="form-section">
                <h3>Registro Individual</h3>
                <form id="formAsistenciaIndividual" action="../../backend/controllers/registrar_asistencia.php" method="post">
                    <div class="form-group">
                        <label for="usuario_id">Seleccionar Usuario:</label>
                        <select id="usuario_id" name="usuario_id" class="form-control" required>
                            <option value="">Seleccione un usuario</option>
                            <?php foreach ($usuarios as $usuario): ?>
                            <option value="<?php echo $usuario['id']; ?>"><?php echo htmlspecialchars($usuario['nombre'] ?: $usuario['username']); ?></option>
                            <?php endforeach; ?>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="tipo_evento">Tipo de Evento:</label>
                        <select id="tipo_evento" name="tipo_evento" class="form-control" required>
                            <option value="Desayuno">Desayuno Conexión</option>
                            <option value="Reunion">Reunión Regular</option>
                            <option value="Especial">Evento Especial</option>
                            <option value="Otro">Otro</option>
                        </select>
                    </div>
                    
                    <?php if (!empty($eventos)): ?>
                    <div class="form-group">
                        <label for="evento_id">Evento Programado:</label>
                        <select id="evento_id" name="evento_id" class="form-control">
                            <option value="">Seleccione un evento (opcional)</option>
                            <?php foreach ($eventos as $evento): ?>
                            <option value="<?php echo $evento['id']; ?>"><?php echo htmlspecialchars($evento['nombre']); ?></option>
                            <?php endforeach; ?>
                        </select>
                    </div>
                    <?php endif; ?>
                    
                    <div class="form-group">
                        <label for="fecha_evento">Fecha:</label>
                        <input type="date" id="fecha_evento" name="fecha_evento" class="form-control" value="<?php echo $fechaHoy; ?>" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="comentarios">Comentarios:</label>
                        <textarea id="comentarios" name="comentarios" class="form-control" rows="2"></textarea>
                    </div>
                    
                    <div class="form-group">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save"></i> Registrar Asistencia
                        </button>
                    </div>
                </form>
            </div>
            
            <hr>
            
            <!-- Formulario para registro masivo -->
            <div class="form-section">
                <h3>Registro por Lista</h3>
                <p>Seleccione varios usuarios para registrar asistencia al mismo evento.</p>
                
                <form id="formAsistenciaMasiva" action="../../backend/controllers/registrar_asistencia_masiva.php" method="post">
                    <div class="form-group">
                        <label for="tipo_evento_masivo">Tipo de Evento:</label>
                        <select id="tipo_evento_masivo" name="tipo_evento" class="form-control" required>
                            <option value="Desayuno">Desayuno Conexión</option>
                            <option value="Reunion">Reunión Regular</option>
                            <option value="Especial">Evento Especial</option>
                            <option value="Otro">Otro</option>
                        </select>
                    </div>
                    
                    <?php if (!empty($eventos)): ?>
                    <div class="form-group">
                        <label for="evento_id_masivo">Evento Programado:</label>
                        <select id="evento_id_masivo" name="evento_id" class="form-control">
                            <option value="">Seleccione un evento (opcional)</option>
                            <?php foreach ($eventos as $evento): ?>
                            <option value="<?php echo $evento['id']; ?>"><?php echo htmlspecialchars($evento['nombre']); ?></option>
                            <?php endforeach; ?>
                        </select>
                    </div>
                    <?php endif; ?>
                    
                    <div class="form-group">
                        <label for="fecha_evento_masivo">Fecha:</label>
                        <input type="date" id="fecha_evento_masivo" name="fecha_evento" class="form-control" value="<?php echo $fechaHoy; ?>" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="comentarios_masivo">Comentarios Generales:</label>
                        <textarea id="comentarios_masivo" name="comentarios" class="form-control" rows="2"></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label>Seleccionar Usuarios:</label>
                        <div class="search-box">
                            <input type="text" id="searchUsuarios" class="form-control" placeholder="Buscar usuarios...">
                        </div>
                        
                        <div class="usuarios-container">
                            <?php foreach ($usuarios as $usuario): ?>
                            <div class="usuario-check">
                                <label>
                                    <input type="checkbox" name="usuarios_ids[]" value="<?php echo $usuario['id']; ?>">
                                    <?php echo htmlspecialchars($usuario['nombre'] ?: $usuario['username']); ?>
                                </label>
                            </div>
                            <?php endforeach; ?>
                        </div>
                        
                        <div class="select-actions">
                            <a href="#" id="selectAll">Seleccionar todos</a> | 
                            <a href="#" id="deselectAll">Deseleccionar todos</a>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <button type="submit" class="btn btn-success">
                            <i class="fas fa-users-check"></i> Registrar Asistencia Masiva
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Inicializar selector de fechas
    flatpickr("#fecha_evento", {
        dateFormat: "Y-m-d",
    });
    
    flatpickr("#fecha_evento_masivo", {
        dateFormat: "Y-m-d",
    });
    
    // Búsqueda de usuarios
    document.getElementById('searchUsuarios').addEventListener('input', function(e) {
        const busqueda = e.target.value.toLowerCase();
        const usuarios = document.querySelectorAll('.usuario-check');
        
        usuarios.forEach(function(usuario) {
            const texto = usuario.textContent.toLowerCase();
            if (texto.includes(busqueda)) {
                usuario.style.display = '';
            } else {
                usuario.style.display = 'none';
            }
        });
    });
    
    // Seleccionar/deseleccionar todos
    document.getElementById('selectAll').addEventListener('click', function(e) {
        e.preventDefault();
        const checkboxes = document.querySelectorAll('input[name="usuarios_ids[]"]');
        checkboxes.forEach(function(checkbox) {
            checkbox.checked = true;
        });
    });
    
    document.getElementById('deselectAll').addEventListener('click', function(e) {
        e.preventDefault();
        const checkboxes = document.querySelectorAll('input[name="usuarios_ids[]"]');
        checkboxes.forEach(function(checkbox) {
            checkbox.checked = false;
        });
    });
});
</script>


==============================================================================
ARCHIVO: frontend\views\registro.php
==============================================================================

<!-- filepath: c:\xampp\htdocs\Conexion-Main\frontend\views\registro.php -->
<?php
require_once '../../backend/controllers/check_auth.php';
checkAuth();  // Para páginas que requieren cualquier usuario autenticado
?>
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Conexión - Registro</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="../css/styles_index.css">
    <link rel="icon" href="../img/favicon.ico" type="image/x-icon">
    <style>
        .registration-container {
            max-width: 500px;
            padding: 30px;
        }
        .input-group {
            margin-bottom: 20px;
        }
        .back-link {
            margin-top: 20px;
            display: block;
            text-align: center;
            color: #6c757d;
        }
        .info-text {
            font-size: 12px;
            color: #6c757d;
            margin-top: 5px;
        }
    </style>
</head>
<body>
    <div class="login-container registration-container">
        <img src="../img/logoConexion.png" alt="Logo Conexión" class="logo">
        <h2>Crear Cuenta</h2>
        
        <div id="error-message" class="error-message"></div>
        <div id="success-message" class="success-message"></div>
        
        <form id="registro-form" action="../../backend/controllers/registro.php" method="post">
            <div class="input-group">
                <i class="fas fa-user"></i>
                <input type="text" id="nombre" name="nombre" placeholder="Nombre completo" required>
            </div>
            
            <div class="input-group">
                <i class="fas fa-at"></i>
                <input type="text" id="username" name="username" placeholder="Nombre de usuario" required>
                <p class="info-text">Este será su identificador para iniciar sesión</p>
            </div>
            
            <div class="input-group">
                <i class="fas fa-lock"></i>
                <input type="password" id="password" name="password" placeholder="Contraseña" required>
            </div>
            
            <div class="input-group">
                <i class="fas fa-lock"></i>
                <input type="password" id="confirm_password" name="confirm_password" placeholder="Confirmar contraseña" required>
            </div>
            
            <div class="input-group">
                <i class="fas fa-key"></i>
                <input type="text" id="codigo" name="codigo" placeholder="Código de invitación" required>
                <p class="info-text">Se requiere un código válido para registrarse</p>
            </div>
            
            <button type="submit" class="login-btn">Registrarse <i class="fas fa-user-plus"></i></button>
        </form>
        
        <a href="../../index.html" class="back-link"><i class="fas fa-arrow-left"></i> Volver al inicio de sesión</a>
    </div>
    
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const registroForm = document.getElementById('registro-form');
        const errorMessage = document.getElementById('error-message');
        const successMessage = document.getElementById('success-message');
        
        // Verificar si hay mensajes en la URL (por ejemplo, después de una redirección)
        const urlParams = new URLSearchParams(window.location.search);
        const error = urlParams.get('error');
        const success = urlParams.get('success');
        
        if (error) {
            switch(error) {
                case 'empty':
                    mostrarError('Por favor completa todos los campos');
                    break;
                case 'password':
                    mostrarError('Las contraseñas no coinciden');
                    break;
                case 'codigo':
                    mostrarError('El código de invitación no es válido');
                    break;
                case 'exists':
                    mostrarError('El nombre de usuario ya está en uso');
                    break;
                default:
                    mostrarError('Ha ocurrido un error en el registro');
            }
        }
        
        if (success) {
            mostrarExito('¡Registro exitoso! Ya puedes iniciar sesión.');
        }
        
        registroForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const nombre = document.getElementById('nombre').value.trim();
            const username = document.getElementById('username').value.trim();
            const password = document.getElementById('password').value;
            const confirmPassword = document.getElementById('confirm_password').value;
            const codigo = document.getElementById('codigo').value.trim();
            
            // Validaciones básicas
            if (!nombre || !username || !password || !confirmPassword || !codigo) {
                mostrarError('Por favor completa todos los campos');
                return;
            }
            
            if (password !== confirmPassword) {
                mostrarError('Las contraseñas no coinciden');
                return;
            }
            
            // Validar código de invitación
            if (codigo !== '2025Conexionwow') {
                mostrarError('El código de invitación no es válido');
                return;
            }
            
            // Si pasa las validaciones, enviar el formulario
            this.submit();
        });
        
        function mostrarError(mensaje) {
            errorMessage.textContent = mensaje;
            errorMessage.classList.add('show');
            successMessage.classList.remove('show');
            
            setTimeout(() => {
                errorMessage.classList.remove('show');
            }, 5000);
        }
        
        function mostrarExito(mensaje) {
            successMessage.textContent = mensaje;
            successMessage.classList.add('show');
            errorMessage.classList.remove('show');
        }
        
        // Animación en campos
        const inputs = document.querySelectorAll('input');
        inputs.forEach(input => {
            input.addEventListener('focus', function() {
                this.parentElement.style.transform = 'translateY(-2px)';
                this.parentElement.style.transition = 'transform 0.3s';
            });
            
            input.addEventListener('blur', function() {
                this.parentElement.style.transform = 'translateY(0)';
            });
        });
    });
    </script>
</body>
</html>


==============================================================================
ARCHIVO: frontend\views\resultados_filtro.php
==============================================================================

<?php
// filepath: c:\xampp\htdocs\conexion-main\conexion-main\frontend\views\resultados_filtro.php
require_once '../../backend/controllers/check_auth.php';
checkAuth();  // Para páginas que requieren cualquier usuario autenticado
// O para páginas que requieren roles específicos:
// checkAuth('admin');  // Solo para administradores

require_once __DIR__ . '/../../backend/config/database.php';

// Inicializar variables
$filtros = [];
$parametros = [];
$consulta_base = "SELECT * FROM registros WHERE 1=1";
$query_where = "";
$total_registros = 0;
$registros = [];
$error = "";

// Capturar parámetros de la URL para mantener los filtros
$nombre = isset($_GET['nombre']) ? $_GET['nombre'] : '';
$apellido = isset($_GET['apellido']) ? $_GET['apellido'] : '';
$estado = isset($_GET['estado']) ? $_GET['estado'] : '';
$conector = isset($_GET['conector']) ? $_GET['conector'] : '';
$fecha_desde = isset($_GET['fecha_desde']) ? $_GET['fecha_desde'] : '';
$fecha_hasta = isset($_GET['fecha_hasta']) ? $_GET['fecha_hasta'] : '';
$proximo_desde = isset($_GET['proximo_desde']) ? $_GET['proximo_desde'] : '';
$proximo_hasta = isset($_GET['proximo_hasta']) ? $_GET['proximo_hasta'] : '';
$contactos_hoy = isset($_GET['contactos_hoy']) && $_GET['contactos_hoy'] == '1';
$contactos_pendientes = isset($_GET['contactos_pendientes']) && $_GET['contactos_pendientes'] == '1';

try {
    $db = new Database();
    $conn = $db->connect();
    
    // Procesar filtros
    if (!empty($_GET['nombre'])) {
        $query_where .= " AND nombre_persona LIKE :nombre";
        $parametros[':nombre'] = '%' . $_GET['nombre'] . '%';
        $filtros[] = "Nombre: " . htmlspecialchars($_GET['nombre']);
    }
    
    if (!empty($_GET['apellido'])) {
        $query_where .= " AND apellido_persona LIKE :apellido";
        $parametros[':apellido'] = '%' . $_GET['apellido'] . '%';
        $filtros[] = "Apellido: " . htmlspecialchars($_GET['apellido']);
    }
    
    if (!empty($_GET['estado'])) {
        $query_where .= " AND estado = :estado";
        $parametros[':estado'] = $_GET['estado'];
        $filtros[] = "Estado: " . htmlspecialchars($_GET['estado']);
    }
    
    if (!empty($_GET['conector'])) {
        $query_where .= " AND nombre_conector LIKE :conector";
        $parametros[':conector'] = '%' . $_GET['conector'] . '%';
        $filtros[] = "Conector: " . htmlspecialchars($_GET['conector']);
    }
    
    if (!empty($_GET['fecha_desde'])) {
        $query_where .= " AND fecha_contacto >= :fecha_desde";
        $parametros[':fecha_desde'] = $_GET['fecha_desde'];
        $filtros[] = "Desde: " . date('d/m/Y', strtotime($_GET['fecha_desde']));
    }
    
    if (!empty($_GET['fecha_hasta'])) {
        $query_where .= " AND fecha_contacto <= :fecha_hasta";
        $parametros[':fecha_hasta'] = $_GET['fecha_hasta'];
        $filtros[] = "Hasta: " . date('d/m/Y', strtotime($_GET['fecha_hasta']));
    }
    
    if (!empty($_GET['proximo_desde'])) {
        $query_where .= " AND proximo_contacto >= :proximo_desde";
        $parametros[':proximo_desde'] = $_GET['proximo_desde'];
        $filtros[] = "Próximo contacto desde: " . date('d/m/Y', strtotime($_GET['proximo_desde']));
    }

    if (!empty($_GET['proximo_hasta'])) {
        $query_where .= " AND proximo_contacto <= :proximo_hasta";
        $parametros[':proximo_hasta'] = $_GET['proximo_hasta'];
        $filtros[] = "Próximo contacto hasta: " . date('d/m/Y', strtotime($_GET['proximo_hasta']));
    }

    if ($contactos_hoy) {
        $query_where .= " AND proximo_contacto = CURRENT_DATE()";
        $filtros[] = "Contactos programados para hoy";
    }

    if ($contactos_pendientes) {
        $query_where .= " AND proximo_contacto BETWEEN CURRENT_DATE() AND DATE_ADD(CURRENT_DATE(), INTERVAL 7 DAY)";
        $filtros[] = "Contactos pendientes (próximos 7 días)";
    }
    
    // Obtener el total de registros sin filtrar para estadísticas
    $stmt_total = $conn->prepare("SELECT COUNT(*) FROM registros");
    $stmt_total->execute();
    $total_base = $stmt_total->fetchColumn();
    
    // Construir la consulta final con los filtros
    $consulta_final = $consulta_base . $query_where . " ORDER BY fecha_contacto DESC LIMIT 500";
    
    // Ejecutar la consulta
    $stmt = $conn->prepare($consulta_final);
    foreach ($parametros as $key => $value) {
        $stmt->bindValue($key, $value);
    }
    $stmt->execute();
    $registros = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    // Contar resultados filtrados
    $total_registros = count($registros);
    
} catch (PDOException $e) {
    $error = $e->getMessage();
}

// Estados y colores
$colores = [
    'Primer contacto' => 'background:#ffcccc; color:#a00;',
    'Conectado' => 'background:#ffd6cc; color:#b36b00;',
    'No confirmado a desayuno' => 'background:#ffe5cc; color:#b36b00;',
    'Confirmado a Desayuno' => 'background:#cce0ff; color:#00509e;',
    'Desayuno Asistido' => 'background:#cce6ff; color:#00509e;',
    'Congregado sin desayuno' => 'background:#d4edda; color:#155724;',
    'Visitante' => 'background:#fff; color:#222;',
    'No interesado' => 'background:#ffdddd; color:#a00;',
    'Por Validar Estado' => 'background:#ffe5b4; color:#b36b00;'
];
?>

<!-- Estilos para los botones de acción -->
<style>
    /* Estilos mejorados para los botones de acción */
    .btn-accion {
        width: 36px;
        height: 36px;
        border-radius: 50%;
        border: none;
        margin: 0 4px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        cursor: pointer;
        background-color: #f8f9fa;
        color: #495057;
    }
    
    /* Botón Ver detalles */
    .btn-accion[title="Ver detalles"] {
        background-color: #e3f2fd;
        color: #0d6efd;
    }
    
    .btn-accion[title="Ver detalles"]:hover {
        background-color: #cfe2ff;
        transform: translateY(-3px);
        box-shadow: 0 4px 8px rgba(13, 110, 253, 0.25);
    }
    
    /* Botón Editar */
    .btn-accion[title="Editar"] {
        background-color: #e7f7ee;
        color: #28a745;
    }
    
    .btn-accion[title="Editar"]:hover {
        background-color: #d4f2e2;
        transform: translateY(-3px);
        box-shadow: 0 4px 8px rgba(40, 167, 69, 0.25);
    }
    
    /* Iconos dentro de los botones */
    .btn-accion i {
        font-size: 16px;
    }
    
    /* Efecto de clic */
    .btn-accion:active {
        transform: translateY(1px);
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    }
    
    /* Celda de acciones */
    .table-responsive table td:last-child {
        text-align: center;
        white-space: nowrap;
        min-width: 100px;
    }
</style>

<?php if (!empty($filtros)): ?>
<div class="applied-filters">
    <div class="filters-title">Filtros aplicados:</div>
    <div class="filters-list">
        <?php foreach ($filtros as $filtro): ?>
            <span class="filter-tag"><?php echo $filtro; ?></span>
        <?php endforeach; ?>
    </div>
</div>
<?php endif; ?>

<div class="filter-results-info">
    <div class="results-count">
        Mostrando <?php echo $total_registros; ?> de <?php echo $total_base; ?> registros totales
        <?php if ($total_registros > 0 && $total_registros < $total_base): ?>
            (<?php echo round(($total_registros / $total_base) * 100); ?>%)
        <?php endif; ?>
    </div>
    <div class="export-actions">
        <button class="btn-export excel" id="btn-excel" title="Exportar a Excel"><i class="fas fa-file-excel"></i> Excel</button>
        <button class="btn-export pdf" id="btn-pdf" title="Exportar a PDF"><i class="fas fa-file-pdf"></i> PDF</button>
        <button class="btn-export print" id="btn-print" title="Imprimir resultados"><i class="fas fa-print"></i> Imprimir</button>
    </div>
</div>

<?php if (!empty($error)): ?>
<div class="error-message">
    <i class="fas fa-exclamation-triangle"></i> Error al procesar la consulta: <?php echo htmlspecialchars($error); ?>
</div>
<?php endif; ?>

<?php if (empty($registros) && empty($error)): ?>
<div class="no-results">
    <i class="fas fa-search"></i>
    <p>No se encontraron registros que coincidan con los criterios de búsqueda.</p>
</div>
<?php endif; ?>

<?php if (!empty($registros)): ?>
<div class="table-responsive">
    <table class="stats-table">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>Teléfono</th>
                <th>Estado</th>
                <th>Conector</th>
                <th>Fecha Contacto</th>
                <th>Próximo Contacto</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            <?php foreach ($registros as $registro): ?>
            <tr>
                <td><?php echo htmlspecialchars($registro['nombre_persona']); ?></td>
                <td><?php echo htmlspecialchars($registro['apellido_persona']); ?></td>
                <td><?php echo htmlspecialchars($registro['telefono'] ?? 'No disponible'); ?></td>
                <td>
                    <span class="estado-badge" style="
                        display: inline-block;
                        padding: 5px 10px;
                        border-radius: 4px;
                        font-size: 13px;
                        font-weight: 600;
                        <?php echo $colores[$registro['estado']] ?? 'background:#f8f9fa; color:#7f8c8d;'; ?>
                    ">
                        <?php echo htmlspecialchars($registro['estado']); ?>
                    </span>
                </td>
                <td><?php echo htmlspecialchars($registro['nombre_conector']); ?></td>
                <td><?php echo date('d/m/Y', strtotime($registro['fecha_contacto'])); ?></td>
                <td>
                    <?php if (!empty($registro['proximo_contacto'])): ?>
                        <?php 
                            $fecha_programada = new DateTime($registro['proximo_contacto']);
                            $hoy = new DateTime('today');
                            
                            echo date('d/m/Y', strtotime($registro['proximo_contacto']));
                            
                            if ($fecha_programada < $hoy) {
                                echo ' <span class="badge-vencido" title="Vencido">!</span>';
                            } elseif ($hoy->diff($fecha_programada)->days <= 2) {
                                echo ' <span class="badge-urgente" title="Próximo">!</span>';
                            }
                        ?>
                    <?php else: ?>
                        <span class="text-muted">-</span>
                    <?php endif; ?>
                </td>
                <td>
                    <button type="button" class="btn-accion" title="Ver detalles" 
                            onclick="window.parent.cargarRegistro(<?php echo $registro['id']; ?>, false)">
                        <i class="fas fa-search"></i>
                    </button>
                    <button type="button" class="btn-accion" title="Editar" 
                            onclick="window.parent.cargarRegistro(<?php echo $registro['id']; ?>, true)">
                        <i class="fas fa-edit"></i>
                    </button>
                </td>
            </tr>
            <?php endforeach; ?>
        </tbody>
    </table>
</div>
<?php endif; ?>


==============================================================================
ARCHIVO: frontend\views\ver_asistencias.php
==============================================================================

<?php

require_once '../../backend/controllers/check_auth.php';
checkAuth(); // Cualquier usuario autenticado puede ver esto

// Parámetros de filtrado
$fecha_inicio = isset($_GET['fecha_inicio']) ? $_GET['fecha_inicio'] : date('Y-m-01');
$fecha_fin = isset($_GET['fecha_fin']) ? $_GET['fecha_fin'] : date('Y-m-d');
$tipo_evento = isset($_GET['tipo_evento']) ? $_GET['tipo_evento'] : '';

require_once '../../backend/config/database.php';
$db = new Database();
$conn = $db->connect();

// Construir la consulta SQL base
$sql = "
    SELECT a.*, u.nombre AS nombre_usuario, u.username, 
           r.nombre AS nombre_registrador, r.username AS username_registrador,
           e.nombre AS nombre_evento
    FROM asistencias a
    LEFT JOIN usuarios u ON a.usuario_id = u.id
    LEFT JOIN usuarios r ON a.registrado_por = r.id
    LEFT JOIN eventos e ON a.evento_id = e.id
    WHERE a.fecha_evento BETWEEN :fecha_inicio AND :fecha_fin
";

$params = [
    ':fecha_inicio' => $fecha_inicio,
    ':fecha_fin' => $fecha_fin
];

// Agregar filtro por tipo de evento si se especifica
if (!empty($tipo_evento)) {
    $sql .= " AND a.tipo_evento = :tipo_evento";
    $params[':tipo_evento'] = $tipo_evento;
}

$sql .= " ORDER BY a.fecha_evento DESC, u.nombre ASC";

$stmt = $conn->prepare($sql);
foreach ($params as $param => $value) {
    $stmt->bindValue($param, $value);
}
$stmt->execute();
$asistencias = $stmt->fetchAll(PDO::FETCH_ASSOC);

// Obtener tipos de eventos disponibles para el filtro
$stmtTipos = $conn->query("SELECT DISTINCT tipo_evento FROM asistencias ORDER BY tipo_evento");
$tiposEvento = $stmtTipos->fetchAll(PDO::FETCH_COLUMN);
?>

<link rel="stylesheet" href="../css/styles.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

<div class="content-wrapper">
    <div class="page-header">
        <h2><i class="fas fa-clipboard-list"></i> Registro de Asistencias</h2>
    </div>
    
    <div class="card">
        <div class="card-header">
            <h3>Filtros</h3>
        </div>
        <div class="card-body">
            <form id="filtroForm" action="ver_asistencias.php" method="get" class="form-inline">
                <div class="form-group mr-2">
                    <label for="fecha_inicio">Desde:</label>
                    <input type="date" id="fecha_inicio" name="fecha_inicio" class="form-control" value="<?php echo $fecha_inicio; ?>">
                </div>
                
                <div class="form-group mr-2">
                    <label for="fecha_fin">Hasta:</label>
                    <input type="date" id="fecha_fin" name="fecha_fin" class="form-control" value="<?php echo $fecha_fin; ?>">
                </div>
                
                <div class="form-group mr-2">
                    <label for="tipo_evento">Tipo de Evento:</label>
                    <select id="tipo_evento" name="tipo_evento" class="form-control">
                        <option value="">Todos los tipos</option>
                        <?php foreach ($tiposEvento as $tipo): ?>
                        <option value="<?php echo htmlspecialchars($tipo); ?>" <?php echo $tipo === $tipo_evento ? 'selected' : ''; ?>>
                            <?php echo htmlspecialchars($tipo); ?>
                        </option>
                        <?php endforeach; ?>
                    </select>
                </div>
                
                <button type="button" id="filtrarBtn" class="btn btn-primary">
                    <i class="fas fa-filter"></i> Filtrar
                </button>
                
                <button type="button" id="exportarBtn" class="btn btn-success ml-2">
                    <i class="fas fa-file-excel"></i> Exportar a Excel
                </button>
            </form>
        </div>
    </div>
    
    <div class="card mt-3">
        <div class="card-header">
            <h3>Registros de Asistencia</h3>
        </div>
        <div class="card-body">
            <?php if (empty($asistencias)): ?>
            <div class="alert alert-info">No se encontraron registros de asistencia para los filtros seleccionados.</div>
            <?php else: ?>
            <div class="table-responsive">
                <table id="tablaAsistencias" class="table table-striped">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Usuario</th>
                            <th>Tipo de Evento</th>
                            <th>Evento</th>
                            <th>Fecha</th>
                            <th>Registrado por</th>
                            <th>Hora de Registro</th>
                            <th>Comentarios</th>
                        </tr>
                    </thead>
                    <tbody>
                        <?php foreach ($asistencias as $asistencia): ?>
                        <tr>
                            <td><?php echo $asistencia['id']; ?></td>
                            <td><?php echo htmlspecialchars($asistencia['nombre_usuario'] ?: $asistencia['username']); ?></td>
                            <td><?php echo htmlspecialchars($asistencia['tipo_evento']); ?></td>
                            <td>
                                <?php echo $asistencia['nombre_evento'] ? htmlspecialchars($asistencia['nombre_evento']) : '—'; ?>
                            </td>
                            <td><?php echo date('d/m/Y', strtotime($asistencia['fecha_evento'])); ?></td>
                            <td><?php echo htmlspecialchars($asistencia['nombre_registrador'] ?: $asistencia['username_registrador']); ?></td>
                            <td><?php echo date('d/m/Y H:i', strtotime($asistencia['hora_registro'])); ?></td>
                            <td><?php echo htmlspecialchars($asistencia['comentarios'] ?: '—'); ?></td>
                        </tr>
                        <?php endforeach; ?>
                    </tbody>
                </table>
            </div>
            <?php endif; ?>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://cdn.jsdelivr.net/npm/tableexport.jquery.plugin@1.10.21/tableExport.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Inicializar selector de fechas
    flatpickr("#fecha_inicio", {
        dateFormat: "Y-m-d",
    });
    
    flatpickr("#fecha_fin", {
        dateFormat: "Y-m-d",
    });
    
    // Manejar el filtrado
    document.getElementById('filtrarBtn').addEventListener('click', function() {
        const fechaInicio = document.getElementById('fecha_inicio').value;
        const fechaFin = document.getElementById('fecha_fin').value;
        const tipoEvento = document.getElementById('tipo_evento').value;
        
        // Construir URL con parámetros
        let url = 'ver_asistencias.php?fecha_inicio=' + fechaInicio + 
                 '&fecha_fin=' + fechaFin;
        
        if (tipoEvento) {
            url += '&tipo_evento=' + encodeURIComponent(tipoEvento);
        }
        
        // Cargar la vista con los filtros aplicados
        cargarVista(url);
    });
    
    // Función para cargar vista
    if (typeof cargarVista !== 'function') {
        function cargarVista(vista) {
            const contentDiv = document.getElementById('content');
            if (contentDiv) {
                fetch(vista)
                    .then(response => response.text())
                    .then(data => {
                        contentDiv.innerHTML = data;
                    });
            } else {
                window.location.href = vista;
            }
        }
    }
    
    // Exportar a Excel
    document.getElementById('exportarBtn').addEventListener('click', function() {
        // Obtener los datos de la tabla
        const table = document.getElementById('tablaAsistencias');
        if (!table) return;
        
        // Crear una URL temporal para descargar
        const from = document.getElementById('fecha_inicio').value;
        const to = document.getElementById('fecha_fin').value;
        const fileName = `asistencias_${from}_${to}.xls`;
        
        // Función para exportar tabla a Excel
        exportTableToExcel(table, fileName);
    });
    
    function exportTableToExcel(tableID, filename = '') {
        const downloadLink = document.createElement("a");
        const dataType = 'application/vnd.ms-excel';
        const tableSelect = document.getElementById(tableID);
        const tableHTML = tableSelect.outerHTML.replace(/ /g, '%20');
        
        filename = filename ? filename : 'excel_data.xls';
        
        downloadLink.href = 'data:' + dataType + ', ' + tableHTML;
        downloadLink.download = filename;
        downloadLink.click();
    }
});
</script>


==============================================================================
ARCHIVO: frontend\views\ver_registro.php
==============================================================================

<?php
require_once '../../backend/controllers/check_auth.php';
checkAuth();  // Para páginas que requieren cualquier usuario autenticado

require_once __DIR__ . '/../../backend/config/database.php';

// Detectar si es una carga AJAX
$ajax = (isset($_GET['ajax']) && $_GET['ajax'] == '1');

// Función para formatear teléfono para WhatsApp
function formatearTelefonoWhatsApp($telefono) {
    // Eliminar todos los caracteres no numéricos
    $numero = preg_replace('/[^0-9]/', '', $telefono);
    
    // Si no comienza con código de país (asumimos México como predeterminado)
    if (strlen($numero) <= 10) {
        $numero = '52' . $numero;
    }
    
    return $numero;
}

// Verificar si se ha proporcionado un ID
if (!isset($_GET['id']) || empty($_GET['id'])) {
    echo "Error: ID de registro no proporcionado.";
    exit;
}

$id = $_GET['id'];
$editar = isset($_GET['editar']) && $_GET['editar'] == 1;

// Obtener información del registro
try {
    $db = new Database();
    $conn = $db->connect();
    
    $stmt = $conn->prepare("SELECT * FROM registros WHERE id = :id");
    $stmt->bindParam(':id', $id);
    $stmt->execute();
    
    $registro = $stmt->fetch(PDO::FETCH_ASSOC);
    
    if (!$registro) {
        echo "Error: Registro no encontrado.";
        exit;
    }
    
} catch (PDOException $e) {
    echo "Error de base de datos: " . $e->getMessage();
    exit;
}

// Definir estados y colores
$estados = [
    // Contacto Inicial
    'Primer contacto',
    'Conectado',
    'Primer intento',
    'Segundo Intento',
    'Tercero intento',
    'Intento llamada telefonica',     // NUEVO
    'Intento 2 llamada telefonica',   // NUEVO
    'Intento 3 llamada telefonica',   // NUEVO
    'No interesado',
    
    // Desayunos
    'No confirma desayuno', // Modificado (antes era "No confirmado a desayuno")
    'Confirmado a Desayuno',
    'Desayuno Asistido',
    
    // Miembros
    'Miembro activo',
    'Miembro inactivo',
    'Miembro ausente',
    'Congregado sin desayuno',
    'Visitante',
    
    // Líderes
    'Lider Activo',
    'Lider inactivo',
    'Lider ausente',
    
    // Reconexión
    'Reconectado',             // Nuevo
    'Intento de reconexión',   // Nuevo
    'Etapa 1 reconexion (1 mes)', // Nuevo
    'Etapa 2 reconexion (3 mes)', // Nuevo
    'Etapa 3 reconexion final (6 mes)', // Nuevo
    
    // Ministerios
    'Vencedores Kids',
    'Legado',
    'Teens Legado',
    
    // Otros
    'Por Validar Estado',
    'Nulo',                      // NUEVO
    'Delegado a acompañante',    // NUEVO
    'Datos no autorizados',      // NUEVO
    'Datos incorrectos'          // NUEVO
];

$colores = [
    // Contacto Inicial
    'Primer contacto' => 'background:#ffcccc; color:#a00;',
    'Conectado' => 'background:#ffd6cc; color:#b36b00;',
    'Primer intento' => 'background:#f5e6ff; color:#5a00b3;',
    'Segundo Intento' => 'background:#e6ccff; color:#5a00b3;',
    'Tercero intento' => 'background:#d9b3ff; color:#5a00b3;',
    'Intento llamada telefonica' => 'background:#e1f5fe; color:#0288d1;',     // NUEVO
    'Intento 2 llamada telefonica' => 'background:#b3e5fc; color:#0277bd;',   // NUEVO
    'Intento 3 llamada telefonica' => 'background:#81d4fa; color:#01579b;',   // NUEVO
    'No interesado' => 'background:#ffdddd; color:#a00;',
    
    // Desayunos
    'No confirma desayuno' => 'background:#ffe5cc; color:#b36b00;', // Modificado
    'Confirmado a Desayuno' => 'background:#cce0ff; color:#00509e;',
    'Desayuno Asistido' => 'background:#cce6ff; color:#00509e;',
    
    // Miembros
    'Miembro activo' => 'background:#d9f2d9; color:#006600;',
    'Miembro inactivo' => 'background:#ffebcc; color:#994d00;',
    'Miembro ausente' => 'background:#ffe6e6; color:#cc0000;',
    'Congregado sin desayuno' => 'background:#d4edda; color:#155724;',
    'Visitante' => 'background:#fff; color:#222;',
    
    // Líderes
    'Lider Activo' => 'background:#cce0ff; color:#004080;',
    'Lider inactivo' => 'background:#e6e6e6; color:#666666;',
    'Lider ausente' => 'background:#ffe6ea; color:#990033;',
    
    // Reconexión
    'Reconectado' => 'background:#c8e6c9; color:#2e7d32;',          // Nuevo
    'Intento de reconexión' => 'background:#dcedc8; color:#33691e;', // Nuevo
    'Etapa 1 reconexion (1 mes)' => 'background:#dcedc8; color:#33691e;', // Nuevo
    'Etapa 2 reconexion (3 mes)' => 'background:#dcedc8; color:#33691e;', // Nuevo
    'Etapa 3 reconexion final (6 mes)' => 'background:#dcedc8; color:#33691e;', // Nuevo
    
    // Ministerios
    'Vencedores Kids' => 'background:#ffeb3b; color:#8c6d00;',
    'Legado' => 'background:#dcedc8; color:#558b2f;',
    'Teens Legado' => 'background:#c8e6c9; color:#2e7d32;',
    
    // Otros
    'Por Validar Estado' => 'background:#ffe5b4; color:#b36b00;',
    'Nulo' => 'background:#e0e0e0; color:#757575;',                   // NUEVO - Gris
    'Delegado a acompañante' => 'background:#e1bee7; color:#6a1b9a;', // NUEVO - Púrpura
    'Datos no autorizados' => 'background:#ffcdd2; color:#d32f2f;',   // NUEVO - Rojo claro
    'Datos incorrectos' => 'background:#f8bbd0; color:#c2185b;',       // NUEVO
    
    // Compatibilidad con estados antiguos
    'No confirmado a desayuno' => 'background:#ffe5cc; color:#b36b00;'
];

// Si es una carga AJAX, solo mostrar el contenido del registro
if ($ajax) {
    // Solo emitir el contenido HTML necesario
?>
<div class="registro-container">
    <!-- NUEVA SECCIÓN DE BOTONES AL INICIO -->
    <div class="registro-header">
        <h2><i class="fas fa-<?php echo $editar ? 'edit' : 'eye'; ?>"></i> 
            <?php echo $editar ? 'Editar Registro' : 'Detalles del Registro'; ?>
        </h2>
        
        <div class="actions-bar">
            <?php if ($editar): ?>
                <!-- Botones para modo edición -->
                <button type="submit" form="form-registro" class="btn-primary" title="Guardar Cambios">
                    <i class="fas fa-save"></i>
                </button>
                <button type="reset" form="form-registro" class="btn-secondary" title="Restablecer Campos">
                    <i class="fas fa-undo"></i>
                </button>
            <?php else: ?>
                <!-- Botones para modo visualización -->
                <a href="ver_registro.php?id=<?php echo $registro['id']; ?>&editar=1" class="btn-edit" title="Editar Registro">
                    <i class="fas fa-edit"></i>
                </a>
            <?php endif; ?>
            
            <!-- Botón de WhatsApp se mantiene -->
            <a href="https://wa.me/<?php echo formatearTelefonoWhatsApp($registro['telefono']); ?>" 
               class="btn-whatsapp" target="_blank" title="Contactar por WhatsApp">
                <i class="fab fa-whatsapp"></i>
            </a>
        </div>
    </div>
    
    <!-- FORMULARIO PRINCIPAL -->
    <form id="form-registro" method="post" action="../../backend/controllers/actualizar_registro.php" enctype="multipart/form-data">
        <input type="hidden" name="id" value="<?php echo $registro['id']; ?>">
        
        <!-- Sección de información personal -->
        <div class="form-section">
            <h2 class="section-title"><i class="fas fa-user"></i> Información Personal</h2>
            
            <div class="foto-section">
                <div class="foto-container">
                    <img src="<?php echo !empty($registro['foto']) ? '../img/' . $registro['foto'] : '../img/no-foto.jpg'; ?>" alt="Foto de <?php echo htmlspecialchars($registro['nombre_persona']); ?>" 
                         onclick="window.open(this.src, '_blank', 'width=900,height=900')">
                </div>
                
                <?php if ($editar): ?>
                <div class="foto-upload">
                    <label for="foto">
                        <i class="fas fa-camera"></i> <?php echo !empty($registro['foto']) ? 'Cambiar foto' : 'Subir foto'; ?>
                    </label>
                    <input type="file" id="foto" name="foto" accept="image/*">
                    <input type="hidden" name="foto_actual" value="<?php echo htmlspecialchars($registro['foto'] ?? ''); ?>">
                </div>
                <?php endif; ?>
            </div>
            
            <div class="registro-grid">
                <div class="field-group field-required">
                    <label for="nombre_persona">Nombre</label>
                    <?php if ($editar): ?>
                        <input type="text" id="nombre_persona" name="nombre_persona" value="<?php echo htmlspecialchars($registro['nombre_persona']); ?>" required>
                        <div class="validation-message">Este campo es obligatorio</div>
                    <?php else: ?>
                        <div class="field-value"><?php echo htmlspecialchars($registro['nombre_persona']); ?></div>
                    <?php endif; ?>
                </div>
                
                <div class="field-group field-required">
                    <label for="apellido_persona">Apellido</label>
                    <?php if ($editar): ?>
                        <input type="text" id="apellido_persona" name="apellido_persona" value="<?php echo htmlspecialchars($registro['apellido_persona']); ?>" required>
                        <div class="validation-message">Este campo es obligatorio</div>
                    <?php else: ?>
                        <div class="field-value"><?php echo htmlspecialchars($registro['apellido_persona']); ?></div>
                    <?php endif; ?>
                </div>
                
                <div class="field-group">
                    <label for="telefono">Teléfono</label>
                    <?php if ($editar): ?>
                        <input type="tel" id="telefono" name="telefono" value="<?php echo htmlspecialchars($registro['telefono'] ?? ''); ?>">
                        <div class="validation-message">Ingrese un número de teléfono válido</div>
                    <?php else: ?>
                        <div class="field-value"><?php echo htmlspecialchars($registro['telefono'] ?? 'No especificado'); ?></div>
                    <?php endif; ?>
                    
                    <?php if (!$editar && !empty($registro['telefono'])): ?>
                        <!-- Botón de WhatsApp eliminado para evitar duplicados -->
                    <?php endif; ?>
                </div>
                
                <div class="field-group">
                    <label for="cumpleanos">Cumpleaños</label>
                    <?php if ($editar): ?>
                        <input type="text" id="cumpleanos" name="cumpleanos" value="<?php echo htmlspecialchars($registro['cumpleanos'] ?? ''); ?>">
                    <?php else: ?>
                        <div class="field-value"><?php echo htmlspecialchars($registro['cumpleanos'] ?? 'No especificado'); ?></div>
                    <?php endif; ?>
                </div>
            </div>
        </div>

        <!-- Sección de información de conexión -->
        <div class="form-section">
            <h2 class="section-title"><i class="fas fa-link"></i> Información de Conexión</h2>
            
            <div class="registro-grid">
                <div class="field-group field-required">
                    <label for="nombre_conector">Nombre del Conector</label>
                    <?php if ($editar): ?>
                        <input type="text" id="nombre_conector" name="nombre_conector" value="<?php echo htmlspecialchars($registro['nombre_conector']); ?>" required>
                        <div class="validation-message">Este campo es obligatorio</div>
                    <?php else: ?>
                        <div class="field-value"><?php echo htmlspecialchars($registro['nombre_conector']); ?></div>
                    <?php endif; ?>
                </div>
                
                <div class="field-group">
                    <label for="nombre_quien_trajo">Nombre de quien lo invitó</label>
                    <?php if ($editar): ?>
                        <input type="text" id="nombre_quien_trajo" name="nombre_quien_trajo" value="<?php echo htmlspecialchars($registro['nombre_quien_trajo'] ?? ''); ?>">
                    <?php else: ?>
                        <div class="field-value"><?php echo htmlspecialchars($registro['nombre_quien_trajo'] ?? 'No especificado'); ?></div>
                    <?php endif; ?>
                </div>
                
                <div class="field-group field-required">
                    <label for="estado">Estado</label>
                    <?php if ($editar): ?>
                        <select name="estado" id="estado" class="form-control">
                            <optgroup label="Contacto Inicial">
                                <?php foreach (['Primer contacto', 'Conectado', 'Primer intento', 'Segundo Intento', 'Tercero intento', 'Intento llamada telefonica', 'Intento 2 llamada telefonica', 'Intento 3 llamada telefonica', 'No interesado'] as $est): ?>
                                    <option value="<?php echo htmlspecialchars($est); ?>" 
                                            <?php echo (trim($est) == trim($registro['estado'])) ? 'selected' : ''; ?>
                                            style="<?php echo $colores[$est]; ?>">
                                        <?php echo htmlspecialchars($est); ?>
                                    </option>
                                <?php endforeach; ?>
                            </optgroup>

                            <optgroup label="Desayunos">
                                <?php foreach (['No confirma desayuno', 'Confirmado a Desayuno', 'Desayuno Asistido'] as $est): ?>
                                    <option value="<?php echo htmlspecialchars($est); ?>" 
                                            <?php echo (trim($est) == trim($registro['estado']) || ($est == 'No confirma desayuno' && $registro['estado'] == 'No confirmado a desayuno')) ? 'selected' : ''; ?>
                                            style="<?php echo $colores[$est]; ?>">
                                        <?php echo htmlspecialchars($est); ?>
                                    </option>
                                <?php endforeach; ?>
                            </optgroup>

                            <optgroup label="Miembros">
                                <?php foreach (['Miembro activo', 'Miembro inactivo', 'Miembro ausente', 'Congregado sin desayuno', 'Visitante'] as $est): ?>
                                    <option value="<?php echo htmlspecialchars($est); ?>" 
                                            <?php echo (trim($est) == trim($registro['estado'])) ? 'selected' : ''; ?>
                                            style="<?php echo $colores[$est]; ?>">
                                        <?php echo htmlspecialchars($est); ?>
                                    </option>
                                <?php endforeach; ?>
                            </optgroup>

                            <optgroup label="Líderes">
                                <?php foreach (['Lider Activo', 'Lider inactivo', 'Lider ausente'] as $est): ?>
                                    <option value="<?php echo htmlspecialchars($est); ?>" 
                                            <?php echo (trim($est) == trim($registro['estado'])) ? 'selected' : ''; ?>
                                            style="<?php echo $colores[$est]; ?>">
                                        <?php echo htmlspecialchars($est); ?>
                                    </option>
                                <?php endforeach; ?>
                            </optgroup>

                            <optgroup label="Reconexión">
                                <?php foreach (['Reconectado', 'Intento de reconexión', 'Etapa 1 reconexion (1 mes)', 'Etapa 2 reconexion (3 mes)', 'Etapa 3 reconexion final (6 mes)'] as $est): ?>
                                    <option value="<?php echo htmlspecialchars($est); ?>" 
                                            <?php echo (trim($est) == trim($registro['estado'])) ? 'selected' : ''; ?>
                                            style="<?php echo $colores[$est]; ?>">
                                        <?php echo htmlspecialchars($est); ?>
                                    </option>
                                <?php endforeach; ?>
                            </optgroup>

                            <optgroup label="Ministerios">
                                <?php foreach (['Vencedores Kids', 'Legado', 'Teens Legado'] as $est): ?>
                                    <option value="<?php echo htmlspecialchars($est); ?>" 
                                            <?php echo (trim($est) == trim($registro['estado'])) ? 'selected' : ''; ?>
                                            style="<?php echo $colores[$est]; ?>">
                                        <?php echo htmlspecialchars($est); ?>
                                    </option>
                                <?php endforeach; ?>
                            </optgroup>

                            <optgroup label="Otros">
                                <?php foreach (['Por Validar Estado', 'Nulo', 'Delegado a acompañante', 'Datos no autorizados', 'Datos incorrectos'] as $est): ?>
                                    <option value="<?php echo htmlspecialchars($est); ?>" 
                                            <?php echo (trim($est) == trim($registro['estado'])) ? 'selected' : ''; ?>
                                            style="<?php echo $colores[$est]; ?>">
                                        <?php echo htmlspecialchars($est); ?>
                                    </option>
                                <?php endforeach; ?>
                            </optgroup>
                        </select>
                    <?php else: ?>
                        <div class="field-value" style="<?php 
                            // Maneja el caso para estados antiguos
                            if ($registro['estado'] == 'No confirmado a desayuno') {
                                echo $colores['No confirma desayuno'];
                            } else {
                                echo isset($colores[$registro['estado']]) ? $colores[$registro['estado']] : '';
                            }
                        ?> padding: 8px; border-radius: 4px; font-weight: bold;">
                            <?php 
                            // Mostrar el nombre actualizado del estado si es el caso antiguo
                            echo ($registro['estado'] == 'No confirmado a desayuno') 
                                ? 'No confirma desayuno' 
                                : htmlspecialchars($registro['estado']); 
                            ?>
                        </div>
                    <?php endif; ?>
                </div>
                
                <div class="field-group">
                    <label for="fecha_contacto">Fecha de Contacto</label>
                    <?php if ($editar): ?>
                        <input type="date" id="fecha_contacto" name="fecha_contacto" value="<?php echo htmlspecialchars($registro['fecha_contacto'] ?? ''); ?>">
                    <?php else: ?>
                        <div class="field-value">
                            <?php 
                            echo !empty($registro['fecha_contacto']) 
                                ? date('d/m/Y', strtotime($registro['fecha_contacto'])) 
                                : 'No especificada';
                            ?>
                        </div>
                    <?php endif; ?>
                </div>
                
                <div class="field-group">
                    <label for="fecha_ultimo_contacto">Fecha Último Contacto</label>
                    <?php if ($editar): ?>
                        <input type="date" id="fecha_ultimo_contacto" name="fecha_ultimo_contacto" value="<?php echo htmlspecialchars($registro['fecha_ultimo_contacto'] ?? ''); ?>">
                    <?php else: ?>
                        <div class="field-value">
                            <?php 
                            echo !empty($registro['fecha_ultimo_contacto']) 
                                ? date('d/m/Y', strtotime($registro['fecha_ultimo_contacto'])) 
                                : 'No especificada';
                            ?>
                        </div>
                    <?php endif; ?>
                </div>

                <!-- Nuevo campo para Próximo Contacto -->
                <div class="field-group">
                    <label for="proximo_contacto">Próximo Contacto</label>
                    <?php if ($editar): ?>
                        <input type="date" id="proximo_contacto" name="proximo_contacto" 
                               value="<?php echo htmlspecialchars($registro['proximo_contacto'] ?? ''); ?>">
                    <?php else: ?>
                        <div class="field-value">
                            <?php 
                            if (!empty($registro['proximo_contacto'])) {
                                $fecha_programada = new DateTime($registro['proximo_contacto']);
                                $hoy = new DateTime('today');
                                $diff = $hoy->diff($fecha_programada);
                                
                                echo date('d/m/Y', strtotime($registro['proximo_contacto']));
                                
                                // Mostrar indicador si la fecha está cercana o pasada
                                if ($fecha_programada < $hoy) {
                                    echo ' <span class="badge-vencido">Vencido</span>';
                                } elseif ($diff->days <= 2) {
                                    echo ' <span class="badge-urgente">Próximo</span>';
                                }
                            } else {
                                echo 'No programado';
                            }
                            ?>
                        </div>
                    <?php endif; ?>
                </div>
            </div>
        </div>

        <!-- Sección de formularios -->
        <div class="form-section">
            <h2 class="section-title"><i class="fas fa-file-alt"></i> Información de Formularios</h2>
            
            <div class="registro-grid">
                <div class="field-group">
                    <label for="formulario_nuevos">Formulario de Nuevos</label>
                    <?php if ($editar): ?>
                        <input type="text" id="formulario_nuevos" name="formulario_nuevos" value="<?php echo htmlspecialchars($registro['formulario_nuevos'] ?? ''); ?>">
                    <?php else: ?>
                        <div class="field-value"><?php echo htmlspecialchars($registro['formulario_nuevos'] ?? 'No especificado'); ?></div>
                    <?php endif; ?>
                </div>
                
                <div class="field-group">
                    <label for="formulario_llamadas">Formulario de Llamadas</label>
                    <?php if ($editar): ?>
                        <input type="text" id="formulario_llamadas" name="formulario_llamadas" value="<?php echo htmlspecialchars($registro['formulario_llamadas'] ?? ''); ?>">
                    <?php else: ?>
                        <div class="field-value"><?php echo htmlspecialchars($registro['formulario_llamadas'] ?? 'No especificado'); ?></div>
                    <?php endif; ?>
                </div>
                
                <div class="field-group">
                    <label for="subido_por">Subido Por</label>
                    <?php if ($editar): ?>
                        <input type="text" id="subido_por" name="subido_por" value="<?php echo htmlspecialchars($registro['subido_por'] ?? ''); ?>">
                    <?php else: ?>
                        <div class="field-value"><?php echo htmlspecialchars($registro['subido_por'] ?? 'No especificado'); ?></div>
                    <?php endif; ?>
                </div>
            </div>
        </div>

        <!-- Sección de observaciones -->
        <div class="form-section">
            <h2 class="section-title"><i class="fas fa-comment-alt"></i> Observaciones</h2>
            
            <div class="field-group full-width">
                <label for="observaciones">Observaciones Generales</label>
                <?php if ($editar): ?>
                    <textarea id="observaciones" name="observaciones"><?php echo htmlspecialchars($registro['observaciones'] ?? ''); ?></textarea>
                <?php else: ?>
                    <div class="field-value" style="white-space: pre-wrap;">
                        <?php echo htmlspecialchars($registro['observaciones'] ?: 'Sin observaciones generales.'); ?>
                    </div>
                <?php endif; ?>
            </div>
        </div>
    </form>
</div>
<?php
} else {
?>
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"width=device-width, initial-scale=1.0">
    <title><?php echo $editar ? 'Editar' : 'Ver'; ?> Registro: <?php echo htmlspecialchars($registro['nombre_persona']); ?></title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="../css/styles_ver_registro.css">
</head>
<body>
    <div class="registro-container">
        <!-- NUEVA SECCIÓN DE BOTONES AL INICIO -->
        <div class="registro-header">
            <h2><i class="fas fa-<?php echo $editar ? 'edit' : 'eye'; ?>"></i> 
                <?php echo $editar ? 'Editar Registro' : 'Detalles del Registro'; ?>
            </h2>
            
            <div class="actions-bar">
                <?php if ($editar): ?>
                    <!-- Botones para modo edición -->
                    <button type="submit" form="form-registro" class="btn-primary" title="Guardar Cambios">
                        <i class="fas fa-save"></i>
                    </button>
                    <button type="reset" form="form-registro" class="btn-secondary" title="Restablecer Campos">
                        <i class="fas fa-undo"></i>
                    </button>
                <?php else: ?>
                    <!-- Botones para modo visualización -->
                    <a href="ver_registro.php?id=<?php echo $registro['id']; ?>&editar=1" class="btn-edit" title="Editar Registro">
                        <i class="fas fa-edit"></i>
                    </a>
                <?php endif; ?>
                
                <!-- Botón de WhatsApp se mantiene -->
                <a href="https://wa.me/<?php echo formatearTelefonoWhatsApp($registro['telefono']); ?>" 
                   class="btn-whatsapp" target="_blank" title="Contactar por WhatsApp">
                    <i class="fab fa-whatsapp"></i>
                </a>
            </div>
        </div>
        
        <!-- FORMULARIO PRINCIPAL -->
        <form id="form-registro" method="post" action="../../backend/controllers/actualizar_registro.php" enctype="multipart/form-data">
            <input type="hidden" name="id" value="<?php echo $registro['id']; ?>">
            
            <!-- Sección de información personal -->
            <div class="form-section">
                <h2 class="section-title"><i class="fas fa-user"></i> Información Personal</h2>
                
                <div class="foto-section">
                    <div class="foto-container">
                        <img src="<?php echo !empty($registro['foto']) ? '../img/' . $registro['foto'] : '../img/no-foto.jpg'; ?>" alt="Foto de <?php echo htmlspecialchars($registro['nombre_persona']); ?>" 
                             onclick="window.open(this.src, '_blank', 'width=900,height=900')">
                    </div>
                    
                    <?php if ($editar): ?>
                    <div class="foto-upload">
                        <label for="foto">
                            <i class="fas fa-camera"></i> <?php echo !empty($registro['foto']) ? 'Cambiar foto' : 'Subir foto'; ?>
                        </label>
                        <input type="file" id="foto" name="foto" accept="image/*">
                        <input type="hidden" name="foto_actual" value="<?php echo htmlspecialchars($registro['foto'] ?? ''); ?>">
                    </div>
                    <?php endif; ?>
                </div>
                
                <div class="registro-grid">
                    <div class="field-group field-required">
                        <label for="nombre_persona">Nombre</label>
                        <?php if ($editar): ?>
                            <input type="text" id="nombre_persona" name="nombre_persona" value="<?php echo htmlspecialchars($registro['nombre_persona']); ?>" required>
                            <div class="validation-message">Este campo es obligatorio</div>
                        <?php else: ?>
                            <div class="field-value"><?php echo htmlspecialchars($registro['nombre_persona']); ?></div>
                        <?php endif; ?>
                    </div>
                    
                    <div class="field-group field-required">
                        <label for="apellido_persona">Apellido</label>
                        <?php if ($editar): ?>
                            <input type="text" id="apellido_persona" name="apellido_persona" value="<?php echo htmlspecialchars($registro['apellido_persona']); ?>" required>
                            <div class="validation-message">Este campo es obligatorio</div>
                        <?php else: ?>
                            <div class="field-value"><?php echo htmlspecialchars($registro['apellido_persona']); ?></div>
                        <?php endif; ?>
                    </div>
                    
                    <div class="field-group">
                        <label for="telefono">Teléfono</label>
                        <?php if ($editar): ?>
                            <input type="tel" id="telefono" name="telefono" value="<?php echo htmlspecialchars($registro['telefono'] ?? ''); ?>">
                            <div class="validation-message">Ingrese un número de teléfono válido</div>
                        <?php else: ?>
                            <div class="field-value"><?php echo htmlspecialchars($registro['telefono'] ?? 'No especificado'); ?></div>
                        <?php endif; ?>
                        
                        <?php if (!$editar && !empty($registro['telefono'])): ?>
                            <!-- Botón de WhatsApp eliminado para evitar duplicados -->
                        <?php endif; ?>
                    </div>
                    
                    <div class="field-group">
                        <label for="cumpleanos">Cumpleaños</label>
                        <?php if ($editar): ?>
                            <input type="text" id="cumpleanos" name="cumpleanos" value="<?php echo htmlspecialchars($registro['cumpleanos'] ?? ''); ?>">
                        <?php else: ?>
                            <div class="field-value"><?php echo htmlspecialchars($registro['cumpleanos'] ?? 'No especificado'); ?></div>
                        <?php endif; ?>
                    </div>
                </div>
            </div>

            <!-- Sección de información de conexión -->
            <div class="form-section">
                <h2 class="section-title"><i class="fas fa-link"></i> Información de Conexión</h2>
                
                <div class="registro-grid">
                    <div class="field-group field-required">
                        <label for="nombre_conector">Nombre del Conector</label>
                        <?php if ($editar): ?>
                            <input type="text" id="nombre_conector" name="nombre_conector" value="<?php echo htmlspecialchars($registro['nombre_conector']); ?>" required>
                            <div class="validation-message">Este campo es obligatorio</div>
                        <?php else: ?>
                            <div class="field-value"><?php echo htmlspecialchars($registro['nombre_conector']); ?></div>
                        <?php endif; ?>
                    </div>
                    
                    <div class="field-group">
                        <label for="nombre_quien_trajo">Nombre de quien lo invitó</label>
                        <?php if ($editar): ?>
                            <input type="text" id="nombre_quien_trajo" name="nombre_quien_trajo" value="<?php echo htmlspecialchars($registro['nombre_quien_trajo'] ?? ''); ?>">
                        <?php else: ?>
                            <div class="field-value"><?php echo htmlspecialchars($registro['nombre_quien_trajo'] ?? 'No especificado'); ?></div>
                        <?php endif; ?>
                    </div>
                    
                    <div class="field-group field-required">
                        <label for="estado">Estado</label>
                        <?php if ($editar): ?>
                            <select name="estado" id="estado" class="form-control">
                                <optgroup label="Contacto Inicial">
                                    <?php foreach (['Primer contacto', 'Conectado', 'Primer intento', 'Segundo Intento', 'Tercero intento', 'Intento llamada telefonica', 'Intento 2 llamada telefonica', 'Intento 3 llamada telefonica', 'No interesado'] as $est): ?>
                                        <option value="<?php echo htmlspecialchars($est); ?>" 
                                                <?php echo (trim($est) == trim($registro['estado'])) ? 'selected' : ''; ?>
                                                style="<?php echo $colores[$est]; ?>">
                                            <?php echo htmlspecialchars($est); ?>
                                        </option>
                                    <?php endforeach; ?>
                                </optgroup>

                                <optgroup label="Desayunos">
                                    <?php foreach (['No confirma desayuno', 'Confirmado a Desayuno', 'Desayuno Asistido'] as $est): ?>
                                        <option value="<?php echo htmlspecialchars($est); ?>" 
                                                <?php echo (trim($est) == trim($registro['estado']) || ($est == 'No confirma desayuno' && $registro['estado'] == 'No confirmado a desayuno')) ? 'selected' : ''; ?>
                                                style="<?php echo $colores[$est]; ?>">
                                            <?php echo htmlspecialchars($est); ?>
                                        </option>
                                    <?php endforeach; ?>
                                </optgroup>

                                <optgroup label="Miembros">
                                    <?php foreach (['Miembro activo', 'Miembro inactivo', 'Miembro ausente', 'Congregado sin desayuno', 'Visitante'] as $est): ?>
                                        <option value="<?php echo htmlspecialchars($est); ?>" 
                                                <?php echo (trim($est) == trim($registro['estado'])) ? 'selected' : ''; ?>
                                                style="<?php echo $colores[$est]; ?>">
                                            <?php echo htmlspecialchars($est); ?>
                                        </option>
                                    <?php endforeach; ?>
                                </optgroup>

                                <optgroup label="Líderes">
                                    <?php foreach (['Lider Activo', 'Lider inactivo', 'Lider ausente'] as $est): ?>
                                        <option value="<?php echo htmlspecialchars($est); ?>" 
                                                <?php echo (trim($est) == trim($registro['estado'])) ? 'selected' : ''; ?>
                                                style="<?php echo $colores[$est]; ?>">
                                            <?php echo htmlspecialchars($est); ?>
                                        </option>
                                    <?php endforeach; ?>
                                </optgroup>

                                <optgroup label="Reconexión">
                                    <?php foreach (['Reconectado', 'Intento de reconexión', 'Etapa 1 reconexion (1 mes)', 'Etapa 2 reconexion (3 mes)', 'Etapa 3 reconexion final (6 mes)'] as $est): ?>
                                        <option value="<?php echo htmlspecialchars($est); ?>" 
                                                <?php echo (trim($est) == trim($registro['estado'])) ? 'selected' : ''; ?>
                                                style="<?php echo $colores[$est]; ?>">
                                            <?php echo htmlspecialchars($est); ?>
                                        </option>
                                    <?php endforeach; ?>
                                </optgroup>

                                <optgroup label="Ministerios">
                                    <?php foreach (['Vencedores Kids', 'Legado', 'Teens Legado'] as $est): ?>
                                        <option value="<?php echo htmlspecialchars($est); ?>" 
                                                <?php echo (trim($est) == trim($registro['estado'])) ? 'selected' : ''; ?>
                                                style="<?php echo $colores[$est]; ?>">
                                            <?php echo htmlspecialchars($est); ?>
                                        </option>
                                    <?php endforeach; ?>
                                </optgroup>

                                <optgroup label="Otros">
                                    <?php foreach (['Por Validar Estado', 'Nulo', 'Delegado a acompañante', 'Datos no autorizados', 'Datos incorrectos'] as $est): ?>
                                        <option value="<?php echo htmlspecialchars($est); ?>" 
                                                <?php echo (trim($est) == trim($registro['estado'])) ? 'selected' : ''; ?>
                                                style="<?php echo $colores[$est]; ?>">
                                            <?php echo htmlspecialchars($est); ?>
                                        </option>
                                    <?php endforeach; ?>
                                </optgroup>
                            </select>
                        <?php else: ?>
                            <div class="field-value" style="<?php 
                                // Maneja el caso para estados antiguos
                                if ($registro['estado'] == 'No confirmado a desayuno') {
                                    echo $colores['No confirma desayuno'];
                                } else {
                                    echo isset($colores[$registro['estado']]) ? $colores[$registro['estado']] : '';
                                }
                            ?> padding: 8px; border-radius: 4px; font-weight: bold;">
                                <?php 
                                // Mostrar el nombre actualizado del estado si es el caso antiguo
                                echo ($registro['estado'] == 'No confirmado a desayuno') 
                                    ? 'No confirma desayuno' 
                                    : htmlspecialchars($registro['estado']); 
                                ?>
                            </div>
                        <?php endif; ?>
                    </div>
                    
                    <div class="field-group">
                        <label for="fecha_contacto">Fecha de Contacto</label>
                        <?php if ($editar): ?>
                            <input type="date" id="fecha_contacto" name="fecha_contacto" value="<?php echo htmlspecialchars($registro['fecha_contacto'] ?? ''); ?>">
                        <?php else: ?>
                            <div class="field-value">
                                <?php 
                                echo !empty($registro['fecha_contacto']) 
                                    ? date('d/m/Y', strtotime($registro['fecha_contacto'])) 
                                    : 'No especificada';
                                ?>
                            </div>
                        <?php endif; ?>
                    </div>
                    
                    <div class="field-group">
                        <label for="fecha_ultimo_contacto">Fecha Último Contacto</label>
                        <?php if ($editar): ?>
                            <input type="date" id="fecha_ultimo_contacto" name="fecha_ultimo_contacto" value="<?php echo htmlspecialchars($registro['fecha_ultimo_contacto'] ?? ''); ?>">
                        <?php else: ?>
                            <div class="field-value">
                                <?php 
                                echo !empty($registro['fecha_ultimo_contacto']) 
                                    ? date('d/m/Y', strtotime($registro['fecha_ultimo_contacto'])) 
                                    : 'No especificada';
                                ?>
                            </div>
                        <?php endif; ?>
                    </div>

                    <!-- Nuevo campo para Próximo Contacto -->
                    <div class="field-group">
                        <label for="proximo_contacto">Próximo Contacto</label>
                        <?php if ($editar): ?>
                            <input type="date" id="proximo_contacto" name="proximo_contacto" 
                                   value="<?php echo htmlspecialchars($registro['proximo_contacto'] ?? ''); ?>">
                        <?php else: ?>
                            <div class="field-value">
                                <?php 
                                if (!empty($registro['proximo_contacto'])) {
                                    $fecha_programada = new DateTime($registro['proximo_contacto']);
                                    $hoy = new DateTime('today');
                                    $diff = $hoy->diff($fecha_programada);
                                    
                                    echo date('d/m/Y', strtotime($registro['proximo_contacto']));
                                    
                                    // Mostrar indicador si la fecha está cercana o pasada
                                    if ($fecha_programada < $hoy) {
                                        echo ' <span class="badge-vencido">Vencido</span>';
                                    } elseif ($diff->days <= 2) {
                                        echo ' <span class="badge-urgente">Próximo</span>';
                                    }
                                } else {
                                    echo 'No programado';
                                }
                                ?>
                            </div>
                        <?php endif; ?>
                    </div>
                </div>
            </div>

            <!-- Sección de formularios -->
            <div class="form-section">
                <h2 class="section-title"><i class="fas fa-file-alt"></i> Información de Formularios</h2>
                
                <div class="registro-grid">
                    <div class="field-group">
                        <label for="formulario_nuevos">Formulario de Nuevos</label>
                        <?php if ($editar): ?>
                            <input type="text" id="formulario_nuevos" name="formulario_nuevos" value="<?php echo htmlspecialchars($registro['formulario_nuevos'] ?? ''); ?>">
                        <?php else: ?>
                            <div class="field-value"><?php echo htmlspecialchars($registro['formulario_nuevos'] ?? 'No especificado'); ?></div>
                        <?php endif; ?>
                    </div>
                    
                    <div class="field-group">
                        <label for="formulario_llamadas">Formulario de Llamadas</label>
                        <?php if ($editar): ?>
                            <input type="text" id="formulario_llamadas" name="formulario_llamadas" value="<?php echo htmlspecialchars($registro['formulario_llamadas'] ?? ''); ?>">
                        <?php else: ?>
                            <div class="field-value"><?php echo htmlspecialchars($registro['formulario_llamadas'] ?? 'No especificado'); ?></div>
                        <?php endif; ?>
                    </div>
                    
                    <div class="field-group">
                        <label for="subido_por">Subido Por</label>
                        <?php if ($editar): ?>
                            <input type="text" id="subido_por" name="subido_por" value="<?php echo htmlspecialchars($registro['subido_por'] ?? ''); ?>">
                        <?php else: ?>
                            <div class="field-value"><?php echo htmlspecialchars($registro['subido_por'] ?? 'No especificado'); ?></div>
                        <?php endif; ?>
                    </div>
                </div>
            </div>

            <!-- Sección de observaciones -->
            <div class="form-section">
                <h2 class="section-title"><i class="fas fa-comment-alt"></i> Observaciones</h2>
                
                <div class="field-group full-width">
                    <label for="observaciones">Observaciones Generales</label>
                    <?php if ($editar): ?>
                        <textarea id="observaciones" name="observaciones"><?php echo htmlspecialchars($registro['observaciones'] ?? ''); ?></textarea>
                    <?php else: ?>
                        <div class="field-value" style="white-space: pre-wrap;">
                            <?php echo htmlspecialchars($registro['observaciones'] ?: 'Sin observaciones generales.'); ?>
                        </div>
                    <?php endif; ?>
                </div>
            </div>
        </form>
    </div>
    
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Inicializando eventos de registro...');
        
        // Obtener referencia al selector de estado
        const estadoSelect = document.getElementById('estado');
        
        if (estadoSelect) {
            console.log('Selector de estado encontrado, añadiendo event listener');
            
            // Añadir evento al cambiar el valor
            estadoSelect.addEventListener('change', function() {
                const id = <?php echo $id; ?>;
                const nuevoEstado = this.value;
                
                console.log('Estado cambiado:', id, nuevoEstado);
                
                // Crear FormData para enviar
                const formData = new FormData();
                formData.append('id', id);
                formData.append('estado', nuevoEstado);
                
                // Mostrar indicador visual
                document.body.style.cursor = 'wait';
                this.disabled = true;
                
                // Realizar petición AJAX
                fetch('../../backend/controllers/actualizar_estado.php', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    console.log('Respuesta recibida:', data);
                    if (data.success) {
                        // Mostrar mensaje de éxito
                        alert('Estado actualizado correctamente');
                    } else {
                        alert('Error al actualizar el estado: ' + (data.message || 'Error desconocido'));
                    }
                })
                .catch(error => {
                    console.error('Error en la petición:', error);
                    alert('Error al comunicarse con el servidor');
                })
                .finally(() => {
                    // Restaurar interfaz
                    document.body.style.cursor = 'default';
                    this.disabled = false;
                });
            });
        } else {
            console.error('No se encontró el selector de estado');
        }
    });
    </script>
</body>
</html>
<?php
}
?>


==============================================================================
ARCHIVO: frontend\views\vista_estadisticas.php
==============================================================================

<?php
require_once '../../backend/controllers/check_auth.php';
checkAuth();  // Para páginas que requieren cualquier usuario autenticado

require_once __DIR__ . '/../../backend/config/database.php';

try {
    $db = new Database();
    $conn = $db->connect();
    
    // Obtener estadísticas generales por estado
    $datosEstados = [];
    $stmt = $conn->query("
        SELECT estado, COUNT(*) as total 
        FROM registros 
        WHERE estado IS NOT NULL AND estado != '' 
        GROUP BY estado 
        ORDER BY total DESC
    ");
    
    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
        $datosEstados[$row['estado']] = (int)$row['total'];
    }
    
    // Obtener estadísticas por conector
    $datosConectores = [];
    $stmt = $conn->query("
        SELECT nombre_conector, COUNT(*) as total 
        FROM registros 
        WHERE nombre_conector IS NOT NULL AND nombre_conector != '' 
        GROUP BY nombre_conector 
        ORDER BY total DESC
    ");
    
    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
        $datosConectores[$row['nombre_conector']] = (int)$row['total'];
    }
    
} catch (PDOException $e) {
    $datosEstados = [];
    $datosConectores = [];
    echo "<div class='alert alert-danger'>Error de base de datos: " . htmlspecialchars($e->getMessage()) . "</div>";
}
?>

<link rel="stylesheet" href="../css/styles_estadisticas.css">

<div class="estadisticas-container">
  <h2>Estadísticas Generales</h2>

  <div class="chart-container">
    <h3>Distribución por Estados</h3>
    <canvas id="chartEstados" 
           width="400" 
           height="300"
           data-estados='<?= json_encode($datosEstados) ?>'></canvas>
  </div>
  
  <div class="chart-container">
    <h3>Distribución por Conectores</h3>
    <canvas id="chartConectores" 
           width="400" 
           height="300"
           data-conectores='<?= json_encode($datosConectores) ?>'></canvas>
  </div>
</div>

<script>
// Script inline para asegurar que se procesen los datos
(function() {
  function inicializarEstadisticasInline() {
    // Intentar inicializar desde el JS principal si existe
    if (typeof window.inicializarEstadisticas === 'function') {
      window.inicializarEstadisticas();
    }
  }
  
  // Si el documento ya está listo, ejecutamos ahora
  if (document.readyState === 'complete' || document.readyState === 'interactive') {
    setTimeout(inicializarEstadisticasInline, 0);
  } else {
    // Si no, esperamos a que esté listo
    document.addEventListener('DOMContentLoaded', inicializarEstadisticasInline);
  }
})();
</script>


==============================================================================
ARCHIVO: frontend\views\vista_estadisticas_personales.php
==============================================================================

<?php
require_once '../../backend/controllers/check_auth.php';
checkAuth();  // Para páginas que requieren cualquier usuario autenticado
// O para páginas que requieren roles específicos:
// checkAuth('admin');  // Solo para administradores

require_once __DIR__ . '/../../backend/config/database.php';
?>
<!-- Incluir Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<?php
try {
    $db = new Database();
    $conn = $db->connect();
    
    // 1. Obtener lista de conectores
    $stmt = $conn->query("SELECT DISTINCT nombre_conector FROM registros WHERE nombre_conector IS NOT NULL AND nombre_conector != '' ORDER BY nombre_conector");
    $conectores = $stmt->fetchAll(PDO::FETCH_COLUMN);
    
    // 2. Verificar si tenemos conectores
    if (empty($conectores)) {
        echo "<div class='alert alert-warning'>No hay conectores disponibles en la base de datos.</div>";
        $conectorSeleccionado = '';
        $datosConectores = [];
    } else {
        // 3. Conector seleccionado (por GET o el primero disponible)
        $conectorSeleccionado = isset($_GET['conector']) && !empty($_GET['conector']) 
                              ? $_GET['conector'] 
                              : $conectores[0];
        
        // 4. Validamos que sea un conector válido
        if (!in_array($conectorSeleccionado, $conectores)) {
            $conectorSeleccionado = $conectores[0];
        }
        
        // 5. Obtener datos para el conector seleccionado
        $datosConectores = [];
        $stmt = $conn->prepare("
            SELECT estado, COUNT(*) as total 
            FROM registros 
            WHERE nombre_conector = :conector AND estado IS NOT NULL AND estado != ''
            GROUP BY estado 
            ORDER BY total DESC
        ");
        $stmt->execute([':conector' => $conectorSeleccionado]);
        
        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            $datosConectores[$row['estado']] = (int)$row['total'];
        }
        
        // 6. Si no hay datos, mostramos mensaje
        if (empty($datosConectores)) {
            echo "<div class='alert alert-info'>No hay datos de estados para el conector seleccionado.</div>";
        }
    }
    
} catch (PDOException $e) {
    echo "<div class='alert alert-danger'>Error de base de datos: " . htmlspecialchars($e->getMessage()) . "</div>";
    $conectores = [];
    $conectorSeleccionado = '';
    $datosConectores = [];
}

// Datos de prueba - DESCOMENTAR PARA FORZAR DATOS
// $conectorSeleccionado = "Prueba";
// $datosConectores = ["Contactado" => 5, "Pendiente" => 3, "Cerrado" => 2];
?>

<link rel="stylesheet" href="../css/styles_estadisticas_personales.css">

<div class="estadisticas-personales-container">
  <h2>Estadísticas Personales por Conector</h2>
  
  <form id="filtro-conector" style="position:relative;">
    <label for="conector">Conector:</label>
    <select id="conector">
      <option value="">-- Selecciona --</option>
      <?php foreach($conectores as $c): ?>
        <option value="<?= htmlspecialchars($c) ?>" 
                <?= $c === $conectorSeleccionado ? 'selected' : '' ?>>
          <?= htmlspecialchars($c) ?>
        </option>
      <?php endforeach; ?>
    </select>
  </form>
  
  <?php
  // Mostrar información de depuración
  echo "<pre style='background:#f5f5f5;padding:10px;font-size:12px'>";
  echo "Conector Seleccionado: " . htmlspecialchars($conectorSeleccionado) . "\n";
  echo "Datos: "; print_r($datosConectores);
  echo "</pre>";
  ?>
  
  <canvas id="graficoEstadosPersonal" 
        width="400" 
        height="400"
        data-conector="<?= htmlspecialchars($conectorSeleccionado, ENT_QUOTES) ?>"
        data-estados='<?= json_encode($datosConectores) ?>'></canvas>
</div>

<script>
// Este script se ejecutará inmediatamente
(function() {
  // El inicializador puede ser llamado después, pero ya tendrá estos datos
  const inicializar = function() {
    const canvas = document.getElementById('graficoEstadosPersonal');
    if (!canvas) return;
    
    const conector = canvas.getAttribute('data-conector') || '';
    const datos = canvas.getAttribute('data-estados') || '{}';
    
    try {
      const estadosParsed = JSON.parse(datos);
      
      // Solo llamar al inicializador si no se ha ejecutado ya
      if (typeof window.inicializarEstadisticasPersonalesConDatos === 'function') {
        window.inicializarEstadisticasPersonalesConDatos(conector, estadosParsed);
      }
    } catch(e) {
      console.error("Error parseando datos de estados:", e);
    }
  };
  
  // Si el documento ya está listo, ejecutamos ahora
  if (document.readyState === 'complete' || document.readyState === 'interactive') {
    setTimeout(inicializar, 0);
  } else {
    // Si no, esperamos a que esté listo
    document.addEventListener('DOMContentLoaded', inicializar);
  }
})();
</script>

<script>
// Script integrado que maneja el cambio de conector sin depender de archivos externos
document.addEventListener('DOMContentLoaded', function() {
    console.log('Inicializando selector de conector (script interno)');
    
    // Configurar el selector de conector
    const select = document.getElementById('conector');
    if (select) {
        select.addEventListener('change', function() {
            const valor = this.value;
            if (!valor) return;
            
            console.log('Conector seleccionado:', valor);
            
            // Mostrar indicador de carga
            const contenedor = document.querySelector('.estadisticas-personales-container');
            if (contenedor) {
                const loadingDiv = document.createElement('div');
                loadingDiv.className = 'loading-overlay';
                loadingDiv.innerHTML = '<div class="spinner">Cargando datos...</div>';
                loadingDiv.style.cssText = 'position:absolute;top:0;left:0;width:100%;height:100%;background:rgba(255,255,255,0.7);display:flex;justify-content:center;align-items:center;z-index:1000;';
                contenedor.style.position = 'relative';
                contenedor.appendChild(loadingDiv);
            }
            
            // Navegar a la misma vista con el parámetro conector
            const timestamp = new Date().getTime();
            const url = `vista_estadisticas_personales.php?conector=${encodeURIComponent(valor)}&t=${timestamp}`;
            
            // Intentar múltiples métodos para asegurar que funcione en cualquier contexto
            if (typeof window.parent.cargarVista === 'function') {
                console.log('Usando window.parent.cargarVista()');
                window.parent.cargarVista(url);
            } else if (typeof window.cargarVista === 'function') {
                console.log('Usando window.cargarVista()');
                window.cargarVista(url);
            } else {
                console.log('Usando window.location (método directo)');
                if (window.parent !== window) {
                    // Estamos en un iframe
                    window.parent.location.href = `admin.php?vista=${url}`;
                } else {
                    // Navegación directa
                    window.location.href = `?vista=${url}`;
                }
            }
        });
    } else {
        console.error('No se encontró el selector de conector');
    }
    
    // Inicializar el gráfico si está disponible Chart.js
    if (typeof Chart === 'function') {
        const canvas = document.getElementById('graficoEstadosPersonal');
        if (canvas) {
            // Extraer datos del canvas
            const conector = canvas.getAttribute('data-conector') || '';
            const datosStr = canvas.getAttribute('data-estados') || '{}';
            
            try {
                const datos = JSON.parse(datosStr);
                const labels = Object.keys(datos);
                const values = Object.values(datos);
                
                if (labels.length > 0) {
                    // Crear el gráfico
                    const ctx = canvas.getContext('2d');
                    new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: labels,
                            datasets: [{
                                label: `Estados para ${conector}`,
                                data: values,
                                backgroundColor: [
                                    '#3498db', '#2ecc71', '#e74c3c', '#f39c12', 
                                    '#9b59b6', '#1abc9c', '#34495e', '#d35400'
                                ]
                            }]
                        },
                        options: {
                            responsive: true,
                            plugins: {
                                title: {
                                    display: true,
                                    text: `Estadísticas de ${conector}`,
                                    font: { size: 16 }
                                }
                            }
                        }
                    });
                    console.log('Gráfico inicializado correctamente');
                } else {
                    console.log('No hay datos para mostrar en el gráfico');
                }
            } catch (e) {
                console.error('Error al procesar datos del gráfico:', e);
            }
        }
    } else {
        console.error('Chart.js no está disponible. Asegúrate de incluirlo en la página.');
    }
});
</script>


==============================================================================
ARCHIVO: frontend\views\vista_informes.php
==============================================================================

<?php
require_once '../../backend/controllers/check_auth.php';
checkAuth();  // Para páginas que requieren cualquier usuario autenticado

require_once __DIR__ . '/../../backend/config/database.php';

try {
    $db = new Database();
    $conn = $db->connect();
    
    // Obtener lista de conectores para el filtro
    $stmt = $conn->query("SELECT DISTINCT nombre_conector FROM registros WHERE nombre_conector IS NOT NULL AND nombre_conector != '' ORDER BY nombre_conector");
    $conectores = $stmt->fetchAll(PDO::FETCH_COLUMN);
    
    // Obtener lista de estados para el filtro
    $stmt = $conn->query("SELECT DISTINCT estado FROM registros WHERE estado IS NOT NULL AND estado != '' ORDER BY estado");
    $estados = $stmt->fetchAll(PDO::FETCH_COLUMN);
    
} catch (PDOException $e) {
    echo '<div class="alert alert-danger">Error al conectar con la base de datos: ' . $e->getMessage() . '</div>';
    $conectores = [];
    $estados = [];
}
?>

<link rel="stylesheet" href="../css/styles_informes.css">

<div class="informes-container">
    <h2>Generación de Informes</h2>
    
    <div class="alert alert-info">
        <p>Selecciona los datos que deseas incluir en tu informe y haz clic en "Generar informe".</p>
    </div>
    
    <form id="informeForm" class="informe-form">
        <div class="form-section">
            <h3>Tipo de informe</h3>
            <select id="tipo-informe" name="tipo-informe" required>
                <option value="">-- Selecciona tipo de informe --</option>
                <option value="general">Estadísticas generales</option>
                <option value="personal">Estadísticas por conector</option>
                <option value="estados">Distribución por estados</option>
                <option value="detallado">Listado detallado</option>
            </select>
        </div>
        
        <div class="form-section selector-conector" style="display: none;">
            <h3>Selecciona conector</h3>
            <select id="conector" name="conector">
                <option value="">Todos los conectores</option>
                <?php foreach ($conectores as $conector): ?>
                    <option value="<?= htmlspecialchars($conector) ?>"><?= htmlspecialchars($conector) ?></option>
                <?php endforeach; ?>
            </select>
        </div>
        
        <div class="form-section selector-estado" style="display: none;">
            <h3>Filtrar por estado</h3>
            <select id="estado" name="estado">
                <option value="">Todos los estados</option>
                <?php foreach ($estados as $estado): ?>
                    <option value="<?= htmlspecialchars($estado) ?>"><?= htmlspecialchars($estado) ?></option>
                <?php endforeach; ?>
            </select>
        </div>
        
        <div class="form-section">
            <h3>Período</h3>
            <div class="date-inputs">
                <div>
                    <label for="fecha-inicio">Desde:</label>
                    <input type="date" id="fecha-inicio" name="fecha-inicio">
                </div>
                <div>
                    <label for="fecha-fin">Hasta:</label>
                    <input type="date" id="fecha-fin" name="fecha-fin">
                </div>
            </div>
        </div>
        
        <div class="form-section">
            <h3>Opciones de formato</h3>
            <div class="checkbox-group">
                <label>
                    <input type="checkbox" id="incluir-cabecera" name="incluir-cabecera" checked>
                    Incluir cabecera con fecha de generación
                </label>
                <label>
                    <input type="checkbox" id="incluir-detalle" name="incluir-detalle" checked>
                    Incluir detalles específicos
                </label>
                <label>
                    <input type="checkbox" id="incluir-resumen" name="incluir-resumen" checked>
                    Incluir resumen al final
                </label>
            </div>
        </div>
        
        <div class="form-actions">
            <button type="button" id="btn-vista-previa" class="btn-preview">Vista previa</button>
            <button type="button" id="btn-generar" class="btn-generate">Generar y descargar</button>
        </div>
    </form>
    
    <div id="vista-previa" class="preview-section" style="display: none;">
        <h3>Vista previa del informe</h3>
        <div id="contenido-informe" class="informe-contenido">
            <p>La vista previa se mostrará aquí...</p>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Mostrar campos relevantes según el tipo de informe
    document.getElementById('tipo-informe').addEventListener('change', function() {
        const tipoInforme = this.value;
        document.querySelector('.selector-conector').style.display = 
            (tipoInforme === 'personal' || tipoInforme === 'detallado') ? 'block' : 'none';
        
        document.querySelector('.selector-estado').style.display = 
            (tipoInforme === 'estados' || tipoInforme === 'detallado') ? 'block' : 'none';
    });
    
    // Vista previa del informe
    document.getElementById('btn-vista-previa').addEventListener('click', function() {
        generarInforme(true);
    });
    
    // Generar y descargar informe
    document.getElementById('btn-generar').addEventListener('click', function() {
        generarInforme(false);
    });
});

function generarInforme(esPrevista) {
    // Obtener referencia al botón usado
    const btnUsado = esPrevista ? 
        document.getElementById('btn-vista-previa') : 
        document.getElementById('btn-generar');
    
    // Guardar texto original y mostrar estado de procesamiento
    const textoOriginal = btnUsado.textContent;
    btnUsado.textContent = 'Procesando...';
    btnUsado.disabled = true;
    
    // Crear el FormData desde el formulario
    const formData = new FormData(document.getElementById('informeForm'));
    formData.append('vista_previa', esPrevista ? '1' : '0');
    
    // Mostrar datos que se envían (para depuración)
    console.log("Enviando datos al servidor:");
    for (let pair of formData.entries()) {
        console.log(pair[0] + ': ' + pair[1]);
    }
    
    // Realizar la petición AJAX
    fetch('../../backend/controllers/generar_informe.php', {
        method: 'POST',
        body: formData
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Error en la respuesta del servidor: ' + response.status);
        }
        
        if (esPrevista) {
            return response.text();
        } else {
            return response.blob();
        }
    })
    .then(data => {
        if (esPrevista) {
            // Vista previa: mostrar en el área de resultados
            const vistaPrevia = document.getElementById('vista-previa');
            vistaPrevia.style.display = 'block';
            
            const contenidoInforme = document.getElementById('contenido-informe');
            contenidoInforme.innerHTML = '<pre>' + data + '</pre>';
        } else {
            // Descarga: generar archivo
            const url = window.URL.createObjectURL(data);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = 'informe_conexion_' + new Date().toISOString().split('T')[0] + '.txt';
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            
            // Mostrar mensaje de éxito
            alert('Informe generado con éxito');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Ha ocurrido un error al generar el informe: ' + error.message);
    })
    .finally(() => {
        // Restaurar botón
        btnUsado.textContent = textoOriginal;
        btnUsado.disabled = false;
    });
}
</script>


==============================================================================
ARCHIVO: frontend\views\vista_registros.php
==============================================================================

<?php
require_once '../../backend/controllers/check_auth.php';
checkAuth();  // Para páginas que requieren cualquier usuario autenticado

require_once __DIR__ . '/../../backend/config/database.php';

// Añadir esto al inicio del archivo o donde definas variables generales
$estados_positivos = [
    'Conectado',
    'Confirmado a Desayuno',
    'Desayuno Asistido',
    'Miembro activo',
    'Congregado sin desayuno',
    'Lider Activo',
    'Reconectado'
];

$estados_negativos = [
    'No interesado',
    'No confirma desayuno', 
    'Miembro ausente',
    'Miembro inactivo',
    'Lider ausente',
    'Lider inactivo',
    'Intento 3 llamada telefonica',
    'Etapa 3 reconexion final (6 mes)',
    'Datos incorrectos',
    'Datos no autorizados',
    'Nulo'
];

// Función para formatear teléfono para WhatsApp
function formatearTelefonoWhatsApp($telefono) {
    // Eliminar todos los caracteres no numéricos
    $numero = preg_replace('/[^0-9]/', '', $telefono);
    
    // Si no comienza con código de país (asumimos México como predeterminado)
    if (strlen($numero) <= 10) {
        $numero = '57' . $numero;
    }
    
    return $numero;
}

/**
 * Obtiene el mensaje predefinido para WhatsApp según el estado del registro
 */
function obtenerMensajeWhatsApp($estado, $nombre, $apellido, $conector = 'Conexión') {
    $nombreCompleto = trim($nombre . ' ' . $apellido);
    
    // Mensajes predefinidos por estado
    $mensajes = [
        // Contacto Inicial
        'Primer contacto' => "Hola {$nombreCompleto}, te contactamos de Iglesia en Casa. Gracias por compartir tus datos con nosotros. ¿Te gustaría recibir más información sobre nuestras actividades?",
        
        'Conectado' => "Hola {$nombreCompleto}, te saludamos de Iglesia en Casa. Nos alegra haber conectado contigo. ¿Podemos ayudarte con algo específico?",
        
        'Primer intento' => "Te saludo en nombre de nuestros Pastores Javier Aponte y Paola Palacios. Mi nombre es {$conector}, quien te dio la bienvenida el día de enero que asististe por primera vez a nuestra Comunidad Cristiana En Casa, estamos muy felices de que ahora hagas parte de nuestra familia y queremos contarte un poco acerca de nosotros. 

Nos apasiona servir a cada persona (niño, joven, hombre, mujer, adulto mayor); nuestro anhelo es contribuir a que mejore tu vida a través de la Palabra de Dios y sobre todo fomentar el crecimiento y restauración en cada área.

Nuestra comunidad tiene servicios para fortalecer las familias, parejas y matrimonios. Programas radiales y presenciales para los jóvenes, programas de TV para los niños (también presenciales), charlas de profesionales enfocadas al emprendimiento de negocios con principios, entre otras cosas.

Nos encantaría poder hablar contigo y orar por ti, por favor cuéntame si te puedo llamar hoy y a qué hora te parece bien. 
 
¡Estaré muy pendiente de tu respuesta; ten un día bendecido! 🎉
 
Pd. Agrega este número ‪+57 302 322 8906‬ (El WhatsApp oficial de nuestra Iglesia en·casa) a tu celular en tus contactos para que siempre estés al tanto de lo que hacemos.

También queremos compartirte el recuerdo de tu primer día En•Casa",
        
        'Segundo Intento' => "Hola {$nombreCompleto}, ¿cómo estás? Te escribo nuevamente desde Iglesia en Casa. Nos gustaría saber si te interesa conocer más sobre nuestras actividades.",
        
        'Tercero intento' => "Hola {$nombreCompleto}, ¿cómo has estado? Te contactamos nuevamente desde Iglesia en Casa. Nos encantaría contar contigo en nuestro próximo evento.",
        
        'Intento llamada telefonica' => "Hola {$nombreCompleto}, te contactamos desde Iglesia en Casa. Intentamos llamarte pero no pudimos comunicarnos. ¿Podrías indicarnos un momento conveniente para hablar?",
        
        'Intento 2 llamada telefonica' => "Hola {$nombreCompleto}, somos de Iglesia en Casa. Hemos intentado llamarte nuevamente sin éxito. Nos gustaría conversar contigo. ¿Cuál sería el mejor momento para comunicarnos?",
        
        'Intento 3 llamada telefonica' => "Hola {$nombreCompleto}, te escribimos de Iglesia en Casa. Hemos intentado comunicarnos por teléfono en varias ocasiones. Por favor, hazme saber cuándo estarías disponible para una llamada.",
        
        'No interesado' => "Hola {$nombreCompleto}, respetamos tu decisión de no participar por ahora en Iglesia en Casa. Si en algún momento deseas volver a conectar, estaremos aquí.",
        
        // Desayunos
        'No confirma desayuno' => "Hola {$nombreCompleto}, te escribimos de Iglesia en Casa. Queremos invitarte personalmente a nuestro próximo desayuno de conexión. ¿Te gustaría asistir?",
        
        'Confirmado a Desayuno' => "Hola {$nombreCompleto}, gracias por confirmar tu asistencia al desayuno de Iglesia en Casa. Te esperamos este domingo a las 9:00 AM. ¿Necesitas indicaciones para llegar?",
        
        'Desayuno Asistido' => "Hola {$nombreCompleto}, fue un gusto tenerte en nuestro desayuno. Nos encantaría seguir viéndote en Iglesia en Casa. ¿Te gustaría conocer nuestras próximas actividades?",
        
        // Miembros
        'Miembro activo' => "Hola {$nombreCompleto}, te saludamos desde Iglesia en Casa. Queremos recordarte sobre nuestra próxima actividad este domingo. ¡Contamos contigo!",
        
        'Miembro inactivo' => "Hola {$nombreCompleto}, hace tiempo que no te vemos en Iglesia en Casa. Nos gustaría saber cómo estás y si podemos apoyarte en algo.",
        
        'Miembro ausente' => "Hola {$nombreCompleto}, te extrañamos en Iglesia en Casa. ¿Cómo has estado? Nos gustaría reconectar contigo y saber cómo podemos servirte.",
        
        'Congregado sin desayuno' => "Hola {$nombreCompleto}, nos da gusto verte en los servicios de Iglesia en Casa. Te invitamos a nuestro próximo desayuno de conexión. ¿Te gustaría participar?",
        
        'Visitante' => "Hola {$nombreCompleto}, gracias por visitar Iglesia en Casa. Fue un gusto conocerte. ¿Te gustaría recibir información sobre nuestras próximas actividades?",
        
        // Líderes
        'Lider Activo' => "Hola {$nombreCompleto}, te escribo para coordinar los detalles de nuestro próximo evento en Iglesia en Casa. ¿Podemos agendar una llamada para discutir los preparativos?",
        
        'Lider inactivo' => "Hola {$nombreCompleto}, te escribo desde Iglesia en Casa. Extrañamos tu liderazgo y participación. ¿Podemos conversar sobre tu regreso al equipo?",
        
        'Lider ausente' => "Hola {$nombreCompleto}, desde Iglesia en Casa nos gustaría reconectar contigo. Tu experiencia y liderazgo son valiosos para nosotros. ¿Cómo has estado?",
        
        // Reconexión
        'Reconectado' => "Hola {$nombreCompleto}, qué alegría reconectar contigo en Iglesia en Casa. ¿Te gustaría participar en nuestras próximas actividades?",
        
        'Intento de reconexión' => "Hola {$nombreCompleto}, te escribimos desde Iglesia en Casa. Nos gustaría reconectar contigo y saber cómo has estado últimamente.",
        
        'Etapa 1 reconexion (1 mes)' => "Hola {$nombreCompleto}, ha pasado un mes desde nuestro último contacto. Nos gustaría saber cómo has estado y si podemos apoyarte en algo. ¡Esperamos verte pronto en Iglesia en Casa!",
        
        'Etapa 2 reconexion (3 mes)' => "Hola {$nombreCompleto}, han pasado tres meses y te extrañamos en nuestra comunidad de Iglesia en Casa. ¿Podríamos reunirnos para conversar? Nos encantaría reconectar contigo.",
        
        'Etapa 3 reconexion final (6 mes)' => "Hola {$nombreCompleto}, han pasado seis meses desde nuestro último contacto. Te seguimos teniendo presente y las puertas de Iglesia en Casa siempre estarán abiertas para ti. Nos gustaría saber de ti.",
        
        // Ministerios específicos
        'Vencedores Kids' => "Hola {$nombreCompleto}, te contactamos de Iglesia en Casa. Queremos invitar a tus hijos al grupo Vencedores Kids este fin de semana. ¿Te gustaría recibir más información?",
        
        'Legado' => "Hola {$nombreCompleto}, te contactamos de Iglesia en Casa. Queremos invitarte a nuestro grupo Legado. ¿Te gustaría recibir más información sobre nuestras próximas reuniones?",
        
        'Teens Legado' => "Hola {$nombreCompleto}, te contactamos de Iglesia en Casa. Queremos invitar a tus adolescentes al grupo Teens Legado. ¿Te gustaría recibir más información sobre nuestras actividades?",
        
        // Otros
        'Por Validar Estado' => "Hola {$nombreCompleto}, te contactamos desde Iglesia en Casa. Nos gustaría conocerte mejor y entender cómo podemos servirte.",
        
        'Datos incorrectos' => "Nota interna: Los datos de contacto de {$nombreCompleto} son incorrectos. Se requiere verificación."
    ];
    
    // Retornar el mensaje correspondiente al estado o un mensaje generérico si no está definido
    return isset($mensajes[$estado]) 
        ? $mensajes[$estado] 
        : "Hola {$nombreCompleto}, te contacto desde Iglesia en Casa. ¿Cómo estás?";
}
?>

<link rel="stylesheet" href="../css/styles_vista_registros.css">

<?php
// Lista completa de estados organizada por categorías
$estados = [
    // Contacto Inicial
    'Primer contacto',
    'Conectado',
    'Primer intento',
    'Segundo Intento',
    'Tercero intento',
    'Intento llamada telefonica',     // NUEVO
    'Intento 2 llamada telefonica',   // NUEVO
    'Intento 3 llamada telefonica',   // NUEVO
    'No interesado',
    
    // Desayunos
    'No confirma desayuno',
    'Confirmado a Desayuno',
    'Desayuno Asistido',
    
    // Miembros
    'Miembro activo',
    'Miembro inactivo',
    'Miembro ausente',
    'Congregado sin desayuno',
    'Visitante',
    
    // Líderes
    'Lider Activo',
    'Lider inactivo',
    'Lider ausente',
    
    // Reconexión
    'Reconectado',
    'Intento de reconexión',
    'Etapa 1 reconexion (1 mes)', 
    'Etapa 2 reconexion (3 mes)', 
    'Etapa 3 reconexion final (6 mes)', 
    
    // Ministerios
    'Vencedores Kids',
    'Legado',
    'Teens Legado',
    
    // Otros
    'Por Validar Estado',
    'Nulo',
    'Delegado a acompañante',
    'Datos no autorizados',
    'Datos incorrectos'               // NUEVO
];

// Colores para cada estado
$colores = [
    // Contacto Inicial
    'Primer contacto' => 'background:#ffcccc; color:#a00;',
    'Conectado' => 'background:#ffd6cc; color:#b36b00;',
    'Primer intento' => 'background:#f5e6ff; color:#5a00b3;',
    'Segundo Intento' => 'background:#e6ccff; color:#5a00b3;',
    'Tercero intento' => 'background:#d9b3ff; color:#5a00b3;',
    'Intento llamada telefonica' => 'background:#e1f5fe; color:#0288d1;',     // NUEVO
    'Intento 2 llamada telefonica' => 'background:#b3e5fc; color:#0277bd;',   // NUEVO
    'Intento 3 llamada telefonica' => 'background:#81d4fa; color:#01579b;',   // NUEVO
    'No interesado' => 'background:#ffdddd; color:#a00;',
    
    // Desayunos
    'No confirma desayuno' => 'background:#ffe5cc; color:#b36b00;', // Modificado
    'Confirmado a Desayuno' => 'background:#cce0ff; color:#00509e;',
    'Desayuno Asistido' => 'background:#cce6ff; color:#00509e;',
    
    // Miembros
    'Miembro activo' => 'background:#d9f2d9; color:#006600;',
    'Miembro inactivo' => 'background:#ffebcc; color:#994d00;',
    'Miembro ausente' => 'background:#ffe6e6; color:#cc0000;',
    'Congregado sin desayuno' => 'background:#d4edda; color:#155724;',
    'Visitante' => 'background:#fff; color:#222;',
    
    // Líderes
    'Lider Activo' => 'background:#cce0ff; color:#004080;',
    'Lider inactivo' => 'background:#e6e6e6; color:#666666;',
    'Lider ausente' => 'background:#ffe6ea; color:#990033;',
    
    // Reconexión
    'Reconectado' => 'background:#c8e6c9; color:#2e7d32;',          // Nuevo
    'Intento de reconexión' => 'background:#dcedc8; color:#33691e;', // Nuevo
    'Etapa 1 reconexion (1 mes)' => 'background:#fff9c4; color:#f57f17;', // NUEVO - Amarillo
    'Etapa 2 reconexion (3 mes)' => 'background:#ffe0b2; color:#e65100;', // NUEVO - Naranja
    'Etapa 3 reconexion final (6 mes)' => 'background:#ffcdd2; color:#c62828;', // NUEVO - Rojo
    
    // Ministerios
    'Vencedores Kids' => 'background:#ffeb3b; color:#8c6d00;',
    'Legado' => 'background:#dcedc8; color:#558b2f;',
    'Teens Legado' => 'background:#c8e6c9; color:#2e7d32;',
    
    // Otros
    'Por Validar Estado' => 'background:#ffe5b4; color:#b36b00;',
    'Nulo' => 'background:#e0e0e0; color:#757575;',
    'Delegado a acompañante' => 'background:#e1bee7; color:#6a1b9a;',
    'Datos no autorizados' => 'background:#ffcdd2; color:#d32f2f;',
    'Datos incorrectos' => 'background:#f8bbd0; color:#c2185b;'               // NUEVO
];

try {
    $db = new Database();
    $conn = $db->connect();
    $stmt = $conn->query("SELECT foto, nombre_persona, apellido_persona, telefono, nombre_conector, nombre_quien_trajo, estado, id, observaciones, fecha_contacto, proximo_contacto, fecha_ultimo_contacto FROM registros ORDER BY CASE WHEN fecha_contacto IS NULL THEN 1 ELSE 0 END, fecha_contacto DESC");
    $registros = $stmt->fetchAll(PDO::FETCH_ASSOC);
} catch (PDOException $e) {
    echo '<p>Error al conectar con la base de datos: ' . $e->getMessage() . '</p>';
    exit;
}
?>

<div class="registros-container" style="max-width: 100%; padding: 0;">
    <h2>Registros</h2>
    <div id="mensaje-estado"></div>
    <div class="table-responsive" style="overflow-x: auto; width: 100%;">
        <table border="1" cellpadding="6" cellspacing="0">
            <thead>
                <tr>
                    <th>Foto</th>
                    <th>Nombre</th>
                    <th>Apellido</th>
                    <th>Teléfono</th>
                    <th>Nombre del Conector</th>
                    <th>Quién lo invitó</th>
                    <th>Estado</th>
                    <th>Fecha de ingreso</th><!-- Agregar esta línea -->
                    <th class="th-proximo-contacto">Próximo Contacto</th>
                    <th>Último Contacto</th><!-- Nueva columna -->
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                <?php if (empty($registros)): ?>
                    <tr><td colspan="11" style="text-align:center;">No hay registros.</td></tr>
                <?php endif; ?>
                <?php foreach ($registros as $registro): ?>
                <tr data-id="<?php echo $registro['id']; ?>">
                    <td class="text-center">
                        <?php if (!empty($registro['foto'])): ?>
                            <img src="../img/<?php echo htmlspecialchars($registro['foto']); ?>" 
                                 alt="Foto de <?php echo htmlspecialchars($registro['nombre_persona']); ?>" 
                                 class="foto-perfil-mini" 
                                 onclick="mostrarFotoMaximizada('../img/<?php echo htmlspecialchars($registro['foto']); ?>', '<?php echo htmlspecialchars($registro['nombre_persona'] . ' ' . $registro['apellido_persona']); ?>')"
                                 title="Click para ampliar">
                        <?php else: ?>
                            <div class="sin-foto">
                                <i class="fas fa-user"></i>
                            </div>
                        <?php endif; ?>
                    </td>
                    <td><?php echo htmlspecialchars($registro['nombre_persona']); ?></td>
                    <td><?php echo htmlspecialchars($registro['apellido_persona']); ?></td>
                    <td><?php echo htmlspecialchars($registro['telefono']); ?></td>
                    <td><?php echo htmlspecialchars($registro['nombre_conector']); ?></td>
                    <td><?php echo htmlspecialchars($registro['nombre_quien_trajo']); ?></td>
                    <td id="estado-td-<?php echo $registro['id']; ?>" class="celda-estado" 
                        <?php 
                        // Aplicar el color directamente a la celda según el estado actual
                        if (isset($colores[trim($registro['estado'])])) {
                            echo 'style="' . $colores[trim($registro['estado'])] . '"';
                        }
                        ?>>
                        <select onchange="actualizarEstado(this.value, <?php echo $registro['id']; ?>)">
                            <optgroup label="Contacto Inicial">
                                <?php foreach (['Primer contacto', 'Conectado', 'Primer intento', 'Segundo Intento', 'Tercero intento', 'Intento llamada telefonica', 'Intento 2 llamada telefonica', 'Intento 3 llamada telefonica', 'No interesado'] as $estadoOpcion): ?>
                                    <?php $estadoClase = str_replace(' ', '', $estadoOpcion); ?>
                                    <option value="<?php echo htmlspecialchars($estadoOpcion); ?>"
                                        class="estado-<?php echo $estadoClase; ?>"
                                        style="<?php echo $colores[$estadoOpcion]; ?>"
                                        <?php if (trim($registro['estado']) == trim($estadoOpcion)) echo 'selected'; ?>>
                                        <?php echo htmlspecialchars($estadoOpcion); ?>
                                    </option>
                                <?php endforeach; ?>
                            </optgroup>
                            
                            <optgroup label="Desayunos">
                                <?php foreach (['No confirma desayuno', 'Confirmado a Desayuno', 'Desayuno Asistido'] as $estadoOpcion): ?>
                                    <?php $estadoClase = str_replace(' ', '', $estadoOpcion); ?>
                                    <option value="<?php echo htmlspecialchars($estadoOpcion); ?>"
                                        class="estado-<?php echo $estadoClase; ?>"
                                        style="<?php echo $colores[$estadoOpcion]; ?>"
                                        <?php if (trim($registro['estado']) == trim($estadoOpcion)) echo 'selected'; ?>>
                                        <?php echo htmlspecialchars($estadoOpcion); ?>
                                    </option>
                                <?php endforeach; ?>
                            </optgroup>
                            
                            <optgroup label="Miembros">
                                <?php foreach (['Miembro activo', 'Miembro inactivo', 'Miembro ausente', 'Congregado sin desayuno', 'Visitante'] as $estadoOpcion): ?>
                                    <?php $estadoClase = str_replace(' ', '', $estadoOpcion); ?>
                                    <option value="<?php echo htmlspecialchars($estadoOpcion); ?>"
                                        class="estado-<?php echo $estadoClase; ?>"
                                        style="<?php echo $colores[$estadoOpcion]; ?>"
                                        <?php if (trim($registro['estado']) == trim($estadoOpcion)) echo 'selected'; ?>>
                                        <?php echo htmlspecialchars($estadoOpcion); ?>
                                    </option>
                                <?php endforeach; ?>
                            </optgroup>
                            
                            <optgroup label="Líderes">
                                <?php foreach (['Lider Activo', 'Lider inactivo', 'Lider ausente'] as $estadoOpcion): ?>
                                    <?php $estadoClase = str_replace(' ', '', $estadoOpcion); ?>
                                    <option value="<?php echo htmlspecialchars($estadoOpcion); ?>"
                                        class="estado-<?php echo $estadoClase; ?>"
                                        style="<?php echo $colores[$estadoOpcion]; ?>"
                                        <?php if (trim($registro['estado']) == trim($estadoOpcion)) echo 'selected'; ?>>
                                        <?php echo htmlspecialchars($estadoOpcion); ?>
                                    </option>
                                <?php endforeach; ?>
                            </optgroup>
                            
                            <optgroup label="Reconexión">
                                <?php foreach ([
                                    'Reconectado', 
                                    'Intento de reconexión',
                                    'Etapa 1 reconexion (1 mes)', // NUEVO
                                    'Etapa 2 reconexion (3 mes)', // NUEVO
                                    'Etapa 3 reconexion final (6 mes)' // NUEVO
                                ] as $estadoOpcion): ?>
                                    <?php $estadoClase = str_replace(' ', '', $estadoOpcion); ?>
                                    <option value="<?php echo htmlspecialchars($estadoOpcion); ?>"
                                        class="estado-<?php echo $estadoClase; ?>"
                                        style="<?php echo $colores[$estadoOpcion]; ?>"
                                        <?php if (trim($registro['estado']) == trim($estadoOpcion)) echo 'selected'; ?>>
                                        <?php echo htmlspecialchars($estadoOpcion); ?>
                                    </option>
                                <?php endforeach; ?>
                            </optgroup>
                            
                            <optgroup label="Ministerios">
                                <?php foreach (['Vencedores Kids', 'Legado', 'Teens Legado'] as $estadoOpcion): ?>
                                    <?php $estadoClase = str_replace(' ', '', $estadoOpcion); ?>
                                    <option value="<?php echo htmlspecialchars($estadoOpcion); ?>"
                                        class="estado-<?php echo $estadoClase; ?>"
                                        style="<?php echo $colores[$estadoOpcion]; ?>"
                                        <?php if (trim($registro['estado']) == trim($estadoOpcion)) echo 'selected'; ?>>
                                        <?php echo htmlspecialchars($estadoOpcion); ?>
                                    </option>
                                <?php endforeach; ?>
                            </optgroup>
                            
                            <optgroup label="Otros">
                                <?php foreach ([
                                    'Por Validar Estado',
                                    'Nulo',
                                    'Delegado a acompañante',
                                    'Datos no autorizados',
                                    'Datos incorrectos' // NUEVO
                                ] as $estadoOpcion): ?>
                                    <?php $estadoClase = str_replace(' ', '', $estadoOpcion); ?>
                                    <option value="<?php echo htmlspecialchars($estadoOpcion); ?>"
                                        class="estado-<?php echo $estadoClase; ?>"
                                        style="<?php echo $colores[$estadoOpcion]; ?>"
                                        <?php if (trim($registro['estado']) == trim($estadoOpcion)) echo 'selected'; ?>>
                                        <?php echo htmlspecialchars($estadoOpcion); ?>
                                    </option>
                                <?php endforeach; ?>
                            </optgroup>
                        </select>
                    </td>                   
                    <td>
                        <?php 
                        if (!empty($registro['fecha_contacto'])) {
                            echo date('d/m/Y', strtotime($registro['fecha_contacto'])); 
                        } else {
                            echo "Sin fecha";
                        }
                        ?>
                    </td>
                    <td class="td-proximo-contacto">
                        <?php if (!empty($registro['proximo_contacto'])): ?>
                            <?php 
                                $fecha_programada = new DateTime($registro['proximo_contacto']);
                                $hoy = new DateTime('today');
                                $diff = $hoy->diff($fecha_programada);
                                
                                echo date('d/m/Y', strtotime($registro['proximo_contacto']));
                                
                                if ($fecha_programada < $hoy) {
                                    echo ' <span class="badge-vencido" title="Contacto vencido"><i class="fas fa-exclamation-circle"></i></span>';
                                } elseif ($diff->days <= 2) {
                                    echo ' <span class="badge-urgente" title="Contacto próximo"><i class="fas fa-clock"></i></span>';
                                }
                            ?>
                        <?php endif; ?>
                    </td>
                    <!-- Nueva celda para último contacto con lógica mejorada -->
                    <td class="fecha-ultimo-contacto">
                        <?php if (!empty($registro['fecha_ultimo_contacto'])): ?>
                            <?php
                                // Definir estados óptimos y no óptimos
                                $estados_optimos = [
                                    'Conectado',
                                    'Confirmado a Desayuno',
                                    'Desayuno Asistido',
                                    'Miembro activo',
                                    'Congregado sin desayuno',
                                    'Lider Activo',
                                    'Reconectado',
                                    'Vencedores Kids',
                                    'Legado',
                                    'Teens Legado'
                                ];
                                
                                $estados_no_optimos = [
                                    'No interesado',
                                    'No confirma desayuno', 
                                    'Miembro ausente',
                                    'Miembro inactivo',
                                    'Lider ausente',
                                    'Lider inactivo',
                                    'Intento 3 llamada telefonica',
                                    'Etapa 3 reconexion final (6 mes)',
                                    'Datos incorrectos',
                                    'Datos no autorizados',
                                    'Nulo'
                                ];
                                
                                // Calcular días transcurridos
                                $ultimo_contacto = new DateTime($registro['fecha_ultimo_contacto']);
                                $hoy = new DateTime('today');
                                $dias_transcurridos = $hoy->diff($ultimo_contacto)->days;
                                
                                $estado_actual = trim($registro['estado']);
                                $clase_fecha = '';
                                
                                if (in_array($estado_actual, $estados_optimos)) {
                                    // Estados óptimos siempre en azul, sin importar el tiempo
                                    $clase_fecha = 'fecha-positiva';
                                } elseif (in_array($estado_actual, $estados_no_optimos)) {
                                    // Estados no óptimos
                                    if ($dias_transcurridos > 30) {
                                        // Si además han pasado más de 30 días, alerta roja
                                        $clase_fecha = 'fecha-alerta';
                                    } else {
                                        // Estado no óptimo pero contacto reciente
                                        $clase_fecha = 'fecha-negativa';
                                    }
                                } else {
                                    // Estados neutros o no clasificados
                                    if ($dias_transcurridos > 30) {
                                        // Más de 30 días sin contacto es alerta para cualquier estado
                                        $clase_fecha = 'fecha-alerta';
                                    }
                                }
                            ?>
                            <span class="<?php echo $clase_fecha; ?>" 
                                  title="Último contacto hace <?php echo $dias_transcurridos; ?> días">
                                <?php echo date('d/m/Y', strtotime($registro['fecha_ultimo_contacto'])); ?>
                                <?php if ($clase_fecha == 'fecha-alerta'): ?>
                                    <i class="fas fa-exclamation-circle"></i>
                                <?php endif; ?>
                            </span>
                        <?php else: ?>
                            <span class="sin-fecha">No registrado</span>
                        <?php endif; ?>
                    </td>
                    <td class="acciones-td">
                        <div class="botones-accion">
                            <button type="button" class="btn-accion" title="Editar" 
                                    onclick="cargarRegistro(<?php echo $registro['id']; ?>, true)">
                                <i class="fas fa-edit"></i>
                            </button>
                            
                            <button type="button" class="btn-accion" title="Ver detalles" 
                                    onclick="cargarRegistro(<?php echo $registro['id']; ?>)">
                                <i class="fas fa-search"></i>
                            </button>
                            
                            <button type="button" class="btn-accion" title="Agregar observación" 
                                    onclick="abrirObservacion(<?php echo $registro['id']; ?>)">
                                <i class="fas fa-comment"></i>
                            </button>
                            
                            <button type="button" class="btn-accion" title="Ver observaciones" 
                                    onclick="verObservaciones(<?php echo $registro['id']; ?>)">
                                <i class="fas fa-eye"></i>
                            </button>
                            
                            <button type="button" class="btn-accion" title="Eliminar" 
                                    onclick="eliminarRegistro(<?php echo $registro['id']; ?>)">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                            
                            <!-- Añadir botón de WhatsApp si existe teléfono -->
                            <?php if (!empty($registro['telefono'])): ?>
                                <?php 
                                // Obtener el mensaje personalizado según el estado
                                $mensaje = obtenerMensajeWhatsApp(
                                    trim($registro['estado']),
                                    $registro['nombre_persona'],
                                    $registro['apellido_persona'],
                                    $registro['nombre_conector'] ?: 'Conexión' // Pasar el nombre del conector o 'Conexión' si está vacío
                                );
                                ?>
                                <a href="https://api.whatsapp.com/send?phone=<?php echo formatearTelefonoWhatsApp($registro['telefono']); ?>&text=<?php echo urlencode($mensaje); ?>" 
                                   target="_blank" 
                                   class="btn-accion btn-whatsapp" 
                                   title="Contactar por WhatsApp"
                                   data-mensaje="<?php echo htmlspecialchars($mensaje); ?>">
                                    <i class="fab fa-whatsapp"></i>
                                </a>
                                
                                <!-- Nuevo botón para descargar foto si tiene foto -->
                                <?php if (!empty($registro['foto'])): ?>
                                    <a href="../img/<?php echo htmlspecialchars($registro['foto']); ?>" 
                                       download="foto_<?php echo htmlspecialchars($registro['nombre_persona'] . '_' . $registro['apellido_persona']); ?>.jpg"
                                       class="btn-accion btn-descargar-foto" 
                                       title="Descargar foto para adjuntar"
                                       aria-label="Descargar foto de <?php echo htmlspecialchars($registro['nombre_persona']); ?>">
                                        <i class="fas fa-download"></i>
                                    </a>
                                <?php endif; ?>
                            <?php endif; ?>
                        </div>
                    </td>
                </tr>
                <?php endforeach; ?>
            </tbody>
        </table>
    </div>
</div>

<div id="modal-observaciones" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>Agregar observación</h3>
            <span class="close" onclick="cerrarModal('modal-observaciones')">&times;</span>
        </div>
        <div class="modal-body">
            <input type="hidden" id="id-registro" value="">
            <div class="form-group">
                <label for="texto-observacion">Observación:</label>
                <textarea id="texto-observacion" rows="4" class="form-control"></textarea>
            </div>
        </div>
        <div class="modal-footer">
            <button id="btn-guardar-obs" class="btn btn-primary" onclick="guardarObservacion()">
                <i class="fas fa-save"></i> Guardar
            </button>
            <button type="button" onclick="cerrarModal('modal-observaciones')" class="btn btn-secondary">
                <i class="fas fa-times"></i> Cancelar
            </button>
        </div>
    </div>
</div>

<script>
// Mejorar la función para abrir y cerrar el modal
window.abrirModal = function() {
    document.getElementById('modal-observaciones').style.display = 'block';
    document.getElementById('modal-overlay').style.display = 'block';
}

window.cerrarModal = function() {
    document.getElementById('modal-observaciones').style.display = 'none';
    document.getElementById('modal-overlay').style.display = 'none';
}

// Reemplazar la función original si es necesario
if (typeof verObservaciones === 'function') {
    const originalVerObservaciones = verObservaciones;
    window.verObservaciones = function(id) {
        originalVerObservaciones(id);
        abrirModal();
    }
}

// Script para mejorar la interacción con los selectores de estado
document.addEventListener('DOMContentLoaded', function() {
    // Seleccionar todos los selectores de estado
    const selects = document.querySelectorAll('select[onchange^="actualizarEstado"]');
    
    // Para cada select, añadir listeners para resaltar la celda cuando se enfoca
    selects.forEach(select => {
        // Añadir clase al inicio para destacar el estado seleccionado
        const selectedOption = select.options[select.selectedIndex];
        if (selectedOption) {
            selectedOption.classList.add('estado-selected');
        }
        
        // Cuando el usuario hace foco en el selector
        select.addEventListener('focus', function() {
            this.closest('td').classList.add('estado-activo');
        });
        
        // Cuando el usuario quita el foco
        select.addEventListener('blur', function() {
            this.closest('td').classList.remove('estado-activo');
        });
        
        // Cuando cambia la selección, actualizar la clase de la opción seleccionada
        select.addEventListener('change', function() {
            // Quitar la clase de la opción previamente seleccionada
            Array.from(this.options).forEach(option => {
                option.classList.remove('estado-selected');
            });
            
            // Añadir la clase a la nueva opción seleccionada
            const selectedOption = this.options[this.selectedIndex];
            if (selectedOption) {
                selectedOption.classList.add('estado-selected');
                
                // Actualizar el color de fondo de la celda para que coincida con la opción seleccionada
                const celda = this.closest('td');
                if (celda && selectedOption.style.background) {
                    celda.style.background = selectedOption.style.background;
                    celda.style.color = selectedOption.style.color;
                }
            }
        });
    });
});

// Modificar la función actualizarEstado existente o crearla si no existe
window.actualizarEstado = function(id, estado) {
    const originalActualizarEstado = window.actualziarEstadoOriginal || function(id, estado) {
        fetch('../../backend/controllers/actualizar_estado.php', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: `id=${id}&estado=${encodeURIComponent(estado)}`
        })
        .then(res => res.json())
        .then(data => {
            const mensaje = document.getElementById('mensaje-estado');
            mensaje.textContent = data.mensaje;
            mensaje.className = data.exito ? 'exito' : 'error';
            mensaje.style.display = 'block';
            
            setTimeout(() => {
                mensaje.style.display = 'none';
            }, 3000);
        })
        .catch(error => {
            console.error('Error:', error);
        });
    };
    
    // Guardar la función original si no se ha hecho ya
    if (!window.actualziarEstadoOriginal) {
        window.actualziarEstadoOriginal = actualizarEstado;
    }
    
    // Llamar a la función original
    originalActualizarEstado(id, estado);
    
    // Buscar el color correspondiente al estado seleccionado
    const celda = document.getElementById(`estado-td-${id}`);
    if (celda) {
        const select = celda.querySelector('select');
        if (select) {
            const selectedOption = Array.from(select.options).find(opt => opt.value === estado);
            if (selectedOption) {
                // Aplicar el color de la opción a la celda
                celda.style.background = selectedOption.style.background;
                celda.style.color = selectedOption.style.color;
            }
        }
    }
};
</script>

<script>
// Esta función reconfigurará los eventos después de cargar la vista
document.addEventListener('DOMContentLoaded', function() {
    console.log('Vista de registros cargada, configurando botones de observaciones');
    
    // Configurar el botón de guardar observación
    if (typeof configurarBotonObservacion === 'function') {
        configurarBotonObservacion();
    }
});

// Asegurar que el modal de observaciones funcione correctamente
document.querySelectorAll('button[onclick^="abrirObservacion"]').forEach(btn => {
    btn.addEventListener('click', function(e) {
        const idMatch = this.getAttribute('onclick').match(/abrirObservacion\((\d+)\)/);
        if (idMatch && idMatch[1]) {
            const id = idMatch[1];
            console.log('Click en botón observación para ID:', id);
        }
    });
});
</script>

<script>
// Función para guardar observaciones
function guardarObservacion() {
    console.log('Ejecutando guardarObservacion() desde vista_registros.php');
    
    // Obtener datos del formulario
    const id = document.getElementById('id-registro').value;
    const observacion = document.getElementById('texto-observacion').value;
    
    console.log('ID:', id);
    console.log('Observación:', observacion);

    // Validar
    if (!id) {
        alert('Error: No se encontró el ID del registro');
        return;
    }
    
    if (!observacion.trim()) {
        alert('Por favor escribe una observación');
        return;
    }
    
    // Mostrar indicador de carga
    const btnGuardar = document.getElementById('btn-guardar-obs');
    btnGuardar.disabled = true;
    btnGuardar.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Guardando...';
    
    // Crear datos para enviar
    const formData = new FormData();
    formData.append('id', id);
    formData.append('observaciones', observacion);
    
    // URL absoluta para evitar problemas con rutas relativas
    const url = '../../backend/controllers/agregar_observacion.php';
    
    // Enviar solicitud al servidor
    fetch(url, {
        method: 'POST',
        body: formData,
        credentials: 'include'
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`Error HTTP: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        console.log('Respuesta:', data);
        
        // Restaurar botón
        btnGuardar.disabled = false;
        btnGuardar.innerHTML = '<i class="fas fa-save"></i> Guardar';
        
        if (data.success) {
            // Mostrar mensaje de éxito
            alert('Observación guardada correctamente');
            
            // Cerrar el modal
            cerrarModal('modal-observaciones');
            
            // Recargar la página para mostrar la nueva observación
            location.reload();
        } else {
            alert('Error: ' + (data.message || 'No se pudo guardar la observación'));
        }
    })
    .catch(error => {
        console.error('Error en fetch:', error);
        
        // Restaurar botón
        btnGuardar.disabled = false;
        btnGuardar.innerHTML = '<i class="fas fa-save"></i> Guardar';
        
        // Mostrar mensaje de error
        alert('Error de conexión: ' + error.message);
    });
}
</script>

<script>
// Mejora para los tooltips en dispositivos móviles
document.addEventListener('DOMContentLoaded', function() {
    // Para cada botón de acción
    document.querySelectorAll('.btn-accion').forEach(button => {
        // Al mantener presionado en móvil (para emular hover)
        button.addEventListener('touchstart', function() {
            const title = this.getAttribute('title');
            if (title) {
                alert(title);
            }
        });
    });
});
</script>

<script>
// Vista previa de mensaje WhatsApp
document.addEventListener('DOMContentLoaded', function() {
    // Crear elemento para mostrar la vista previa
    const previewElement = document.createElement('div');
    previewElement.className = 'whatsapp-preview';
    previewElement.style.display = 'none';
    previewElement.style.position = 'absolute';
    previewElement.style.background = '#DCF8C6';
    previewElement.style.border = '1px solid #4CAF50';
    previewElement.style.borderRadius = '8px';
    previewElement.style.padding = '10px 15px';
    previewElement.style.maxWidth = '300px';
    previewElement.style.boxShadow = '0 3px 10px rgba(0,0,0,0.2)';
    previewElement.style.zIndex = '1000';
    previewElement.style.fontSize = '14px';
    previewElement.style.color = '#303030';
    document.body.appendChild(previewElement);
    
    // Para cada botón de WhatsApp
    document.querySelectorAll('.btn-whatsapp').forEach(btn => {
        // Mostrar vista previa al pasar el ratón
        btn.addEventListener('mouseenter', function(e) {
            const mensaje = this.getAttribute('data-mensaje');
            if (mensaje) {
                previewElement.textContent = mensaje;
                
                // Posicionar cerca del botón
                const rect = this.getBoundingClientRect();
                previewElement.style.left = rect.right + 10 + 'px';
                previewElement.style.top = rect.top + window.scrollY + 'px';
                
                // Mostrar
                previewElement.style.display = 'block';
            }
        });
        
        // Ocultar al quitar el ratón
        btn.addEventListener('mouseleave', function() {
            previewElement.style.display = 'none';
        });
    });
});
</script>

<script>
// Resaltar botones de descarga de foto para "Primer intento"
document.addEventListener('DOMContentLoaded', function() {
    // Para cada fila de la tabla
    document.querySelectorAll('tr[data-id]').forEach(row => {
        // Obtener el estado actual
        const estadoCell = row.querySelector('td.celda-estado select');
        if (estadoCell && estadoCell.value === 'Primer intento') {
            // Añadir clase especial para resaltar la foto descargable
            row.classList.add('primer-intento-badge');
        }
    });
    
    // Añadir feedback al descargar foto
    document.querySelectorAll('.btn-descargar-foto').forEach(btn => {
        btn.addEventListener('click', function() {
            // Mostrar tooltip de confirmación
            const tooltip = document.createElement('div');
            tooltip.className = 'tooltip-download';
            tooltip.textContent = '¡Foto descargada!';
            tooltip.style.cssText = 'position:absolute;background:#4CAF50;color:white;padding:5px 10px;border-radius:3px;' + 
                                   'bottom:100%;left:50%;transform:translateX(-50%);font-size:12px;white-space:nowrap;' +
                                   'margin-bottom:8px;opacity:0;transition:opacity 0.3s ease;z-index:100;';
            
            this.style.position = 'relative';
            this.appendChild(tooltip);
            
            // Mostrar y ocultar tooltip
            setTimeout(() => {
                tooltip.style.opacity = '1';
                setTimeout(() => {
                    tooltip.style.opacity = '0';
                    setTimeout(() => tooltip.remove(), 300);
                }, 1500);
            }, 100);
        });
    });
});
</script>

<style>
/* Estilos para próximo contacto */
.th-proximo-contacto, .td-proximo-contacto {
    min-width: 100px;
}

.badge-vencido {
    background-color: #f44336;
    color: white;
    padding: 2px 5px;
    border-radius: 3px;
    font-size: 0.8em;
}

.badge-urgente {
    background-color: #ff9800;
    color: white;
    padding: 2px 5px;
    border-radius: 3px;
    font-size: 0.8em;
}

.td-proximo-contacto i {
    margin-left: 3px;
}

/* Estilos para el historial de observaciones */
.observaciones-historial {
    max-height: 400px;
    overflow-y: auto;
    padding: 15px;
    background-color: #f9f9f9;
    border-radius: 4px;
    box-shadow: inset 0 0 5px rgba(0,0,0,0.1);
}

.observaciones-historial p {
    margin-bottom: 15px;
    padding-bottom: 15px;
    border-bottom: 1px solid #e0e0e0;
}

.observaciones-historial p:last-child {
    border-bottom: none;
}

.observacion-meta {
    color: #2980b9;
    font-weight: bold;
    display: block;
    margin-bottom: 5px;
}

.sin-observaciones {
    color: #7f8c8d;
    font-style: italic;
    text-align: center;
    padding: 20px;
}

.error-mensaje {
    color: #e74c3c;
    text-align: center;
    padding: 20px;
}

.cargando {
    text-align: center;
    padding: 20px;
    color: #7f8c8d;
}

/* Estilos para los botones de acción */
.botones-accion {
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
    justify-content: center;
}

.btn-accion {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 36px;
    height: 36px;
    border-radius: 50%;
    border: none;
    background-color: #f1f1f1;
    color: #333;
    font-size: 14px;
    cursor: pointer;
    transition: all 0.2s ease;
    padding: 0;
}

.btn-accion:hover {
    transform: translateY(-2px);
    box-shadow: 0 3px 5px rgba(0,0,0,0.1);
}

/* Colores específicos para cada tipo de acción */
.btn-accion:nth-child(1) { /* Editar */
    background-color: #e3f2fd;
    color: #0d47a1;
}

.btn-accion:nth-child(2) { /* Ver detalles */
    background-color: #e8f5e9;
    color: #1b5e20;
}

.btn-accion:nth-child(3) { /* Agregar observación */
    background-color: #fff3e0;
    color: #e65100;
}

.btn-accion:nth-child(4) { /* Ver observaciones */
    background-color: #ede7f6;
    color: #4527a0;
}

.btn-accion:nth-child(5) { /* Eliminar */
    background-color: #ffebee;
    color: #b71c1c;
}

.btn-whatsapp { /* WhatsApp */
    background-color: #e0f7fa;
    color: #00796b;
}

.btn-descargar-foto { /* Descargar foto */
    background-color: #f0f4c3;
    color: #827717;
}

/* Estilo para el botón de descargar foto */
.btn-descargar-foto {
    background-color: #e1bee7 !important;
    color: #6a1b9a !important;
    position: relative;
}

.btn-descargar-foto:hover {
    background-color: #d1c4e9 !important;
    transform: translateY(-2px);
    box-shadow: 0 2px 5px rgba(106, 27, 154, 0.3);
}

/* Badge indicador para "Primer intento" */
.primer-intento-badge .btn-descargar-foto::after {
    content: "!";
    position: absolute;
    top: -5px;
    right: -5px;
    background-color: #f44336;
    color: white;
    border-radius: 50%;
    width: 16px;
    height: 16px;
    font-size: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
}

/* Tamaño fijo para la columna de acciones */
.acciones-td {
    min-width: 200px;
}

/* Responsive para dispositivos pequeños */
@media (max-width: 768px) {
    .botones-accion {
        flex-direction: column;
        align-items: center;
    }
    
    .btn-accion {
        margin-bottom: 5px;
    }
}
/* Estilos para el modal de foto maximizada */
.foto-celda {
    text-align: center;
}

.foto-perfil-mini {
    max-width: 60px;
    max-height: 60px;
    border-radius: 50%;
    object-fit: cover;
    border: 2px solid transparent;
    transition: all 0.2s ease;
    cursor: pointer;
}

.foto-perfil-mini:hover {
    transform: scale(1.1);
    border-color: #3498db;
    box-shadow: 0 0 8px rgba(0,0,0,0.2);
}

.sin-foto {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    background-color: #e0e0e0;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-size: 20px;
    color: #757575;
}

/* Estilo base del modal (si no existe) */
.modal {
    display: none;
    position: fixed;
    z-index: 1050;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0,0,0,0.8);
    justify-content: center;
    align-items: center;
}

.modal.active {
    display: flex;
}

.close {
    color: white;
    position: absolute;
    top: 10px;
    right: 15px;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
    z-index: 1060;
}

.close:hover {
    color: #ccc;
}
</style>


==============================================================================
ARCHIVOS JAVASCRIPT
==============================================================================

==============================================================================
ARCHIVO JS: ecosystem.config.js
==============================================================================

module.exports = {
  apps: [{
    name: "Conexion-Main_xyz123",
    script: "./server.js",  // O la ruta a tu archivo principal si usas Node.js
    watch: true,
    env: {
      NODE_ENV: "development",
      PORT: 3000
    },
    env_production: {
      NODE_ENV: "production",
      PORT: 80
    }
  }]
};


==============================================================================
ARCHIVO JS: server.js
==============================================================================

const express = require('express');
const path = require('path');
const app = express();
const PORT = process.env.PORT || 3000;

// Configurar para servir archivos estáticos
app.use(express.static(path.join(__dirname, 'frontend')));

// Para APIs REST
app.use('/api', require('./backend/api'));

// Para cualquier otra ruta, servir el index.html
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

app.listen(PORT, () => {
  console.log(`Servidor Conexion-Main_xyz123 ejecutándose en puerto ${PORT}`);
});


==============================================================================
ARCHIVO JS: backend\api.js
==============================================================================

const express = require('express');
const router = express.Router();

// Rutas de API básicas
router.get('/status', (req, res) => {
    res.json({ status: 'online', name: 'Conexion-Main_xyz123' });
});

// Ejemplo de ruta para usuarios
router.get('/usuarios', (req, res) => {
    // Aquí implementarías la lógica para obtener usuarios
    res.json({ success: true, message: 'API de usuarios en construcción' });
});

module.exports = router;


==============================================================================
ARCHIVO JS: frontend\js\chat.js
==============================================================================

// chat.js - Sistema de chat interno para la plataforma Conexión

function inicializarChat() {
    // Añadir verificación para el elemento
    const elemento = document.getElementById('chat-container'); // o cualquier ID que esté buscando
    
    if (!elemento) {
        console.log("El elemento del chat no está disponible en esta vista");
        return; // Salir de la función si el elemento no existe
    }
    
    // Continuar con el resto del código solo si el elemento existe
    const chatContainer = elemento;
    const usuarioActual = chatContainer.dataset.usuarioId;
    let conversacionActiva = null;
    let intervaloActualizacion = null;

    const btnNuevoChat = document.getElementById('new-chat-btn');
    const btnEnviar = document.getElementById('send-message');
    const btnMinimizar = document.getElementById('minimize-chat');
    const btnCerrar = document.getElementById('close-chat');
    const textareaInput = document.querySelector('.chat-input textarea');
    const listaConvDOM = document.querySelector('.conversations-list');
    const chatWindowDOM = document.getElementById('chat-window');
    const mensajesDOM = document.querySelector('.chat-messages');
    const headerUserDOM = document.querySelector('.chat-window-header .chat-username');
    const avatarDOM = document.querySelector('.chat-window-header .chat-avatar');

    // Agregar event listeners
    if (btnNuevoChat) {
        btnNuevoChat.addEventListener('click', function() {
            console.log('Botón nueva conversación clickeado');
            mostrarNuevaConversacion();
        });
    } else {
        console.error('No se encontró el botón de nueva conversación');
    }

    if (btnEnviar) btnEnviar.addEventListener('click', enviarMensaje);
    if (btnMinimizar) btnMinimizar.addEventListener('click', minimizarChat);
    if (btnCerrar) btnCerrar.addEventListener('click', cerrarChat);

    textareaInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            enviarMensaje();
        }
    });

    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && chatWindowDOM && chatWindowDOM.style.display !== 'none') {
            cerrarChat();
        }
    });

    // Actualizar cada 10 segundos
    intervaloActualizacion = setInterval(() => {
        if (conversacionActiva) cargarMensajes(conversacionActiva);
        cargarConversaciones();
    }, 10000);

    // Funciones principales
    function cargarConversaciones() {
        fetch('/Conexion-Main/backend/controllers/chat/obtener_conversaciones.php')
            .then(res => {
                if (!res.ok) throw new Error('Status ' + res.status);
                const ct = res.headers.get('Content-Type') || '';
                if (!ct.includes('application/json')) {
                    return res.text().then(txt => {
                        throw new Error('Respuesta no JSON:\n' + txt);
                    });
                }
                return res.json();
            })
            .then(data => {
                if (data.success) renderizarConversaciones(data.conversaciones);
                else console.error('Error en API:', data.error);
            })
            .catch(err => {
                console.error('Error cargando conversaciones:', err);
                mostrarNotificacion('Error cargando conversaciones.', 'error');
            });
    }

    function renderizarConversaciones(conversaciones) {
        if (!listaConvDOM) return;
        if (!conversaciones || conversaciones.length === 0) {
            listaConvDOM.innerHTML = `
                <div class="no-conversations">
                  <p>No tienes conversaciones activas</p>
                  <p>Haz clic en <i class="fas fa-plus"></i> para iniciar una nueva</p>
                </div>`;
            return;
        }
        listaConvDOM.innerHTML = conversaciones.map(conv => {
            const unread = conv.mensajes_no_leidos > 0;
            return `
                <div class="conversation-item ${unread ? 'unread-conversation' : ''}" data-id="${conv.id}">
                  <img src="../img/${conv.foto || 'default-user.png'}" class="chat-avatar" alt="">
                  <div class="conversation-info">
                    <div class="conversation-name">${sanitizarHTML(conv.titulo)}</div>
                    <div class="conversation-last-message">${sanitizarHTML(conv.ultimo_mensaje) || 'Sin mensajes'}</div>
                  </div>
                  ${unread ? `<span class="unread-badge">${conv.mensajes_no_leidos}</span>` : ''}
                </div>`;
        }).join('');
        document.querySelectorAll('.conversation-item').forEach(item => {
            item.addEventListener('click', () => abrirConversacion(item.dataset.id));
        });
    }

    function abrirConversacion(conversacionId) {
        if (!conversacionId) return;
        conversacionActiva = conversacionId;
        chatWindowDOM.style.display = 'flex';
        cargarMensajes(conversacionId);
        // Marcar como leída
        fetch('/Conexion-Main/backend/controllers/chat/marcar_leido.php', {
            method: 'POST',
            headers: {'Content-Type': 'application/x-www-form-urlencoded'},
            body: `conversacion_id=${encodeURIComponent(conversacionId)}`
        }).catch(err => console.error('Error marcando leído:', err));
    }

    function cargarMensajes(conversacionId) {
        if (!conversacionId) return;
        fetch(`/Conexion-Main/backend/controllers/chat/obtener_mensajes.php?conversacion_id=${encodeURIComponent(conversacionId)}`)
            .then(res => res.ok ? res.json() : Promise.reject('Status ' + res.status))
            .then(data => {
                if (data.success) {
                    renderizarMensajes(data.mensajes);
                    actualizarInfoConversacion(data.conversacion);
                } else {
                    console.error('Error mensajes:', data.error);
                }
            })
            .catch(err => {
                console.error('Error cargando mensajes:', err);
                mostrarNotificacion('Error cargando mensajes', 'error');
            });
    }

    function renderizarMensajes(mensajes) {
        if (!mensajesDOM) return;
        if (!mensajes || mensajes.length === 0) {
            mensajesDOM.innerHTML = '<div class="no-messages">No hay mensajes. ¡Sé el primero!</div>';
            return;
        }
        let html = '';
        let ultimoRemitente = null;
        let ultimaFecha = null;

        mensajes.forEach(msg => {
            const esPropio = msg.remitente_id == usuarioActual;
            const fecha = new Date(msg.created_at);
            const fechaStr = fecha.toLocaleDateString();
            if (fechaStr !== ultimaFecha) {
                html += `<div class="date-separator">${fechaStr}</div>`;
                ultimaFecha = fechaStr;
                ultimoRemitente = null;
            }
            const nuevoGrupo = ultimoRemitente !== msg.remitente_id;
            if (nuevoGrupo) {
                if (ultimoRemitente !== null) html += '</div>';
                html += `<div class="message-group ${esPropio ? 'own-messages' : 'other-messages'}">`;
                if (!esPropio) html += `<div class="sender-name">${sanitizarHTML(msg.nombre_remitente||'Usuario')}</div>`;
            }
            html += `
                <div class="message ${esPropio? 'message-sent':'message-received'}">
                  <div class="message-content">${sanitizarHTML(msg.mensaje)}</div>
                  <div class="message-time">${formatearHora(fecha)}</div>
                </div>`;
            ultimoRemitente = msg.remitente_id;
        });
        if (ultimoRemitente !== null) html += '</div>';
        mensajesDOM.innerHTML = html;
        mensajesDOM.scrollTop = mensajesDOM.scrollHeight;
    }

    function actualizarInfoConversacion(conv) {
        if (!conv) return;
        if (headerUserDOM)  headerUserDOM.textContent = conv.titulo;
        if (avatarDOM) avatarDOM.src = `../img/${conv.foto|| 'default-user.png'}`;
    }

    function enviarMensaje() {
        const mensaje = textareaInput.value.trim();
        if (!mensaje || !conversacionActiva) return;
        mostrarIndicadorEnvio(true);
        fetch('/Conexion-Main/backend/controllers/chat/enviar_mensaje.php', {
            method: 'POST',
            headers: {'Content-Type': 'application/x-www-form-urlencoded'},
            body: `conversacion_id=${encodeURIComponent(conversacionActiva)}&mensaje=${encodeURIComponent(mensaje)}`
        })
        .then(res => res.ok ? res.json() : Promise.reject('Status ' + res.status))
        .then(data => {
            if (data.success) {
                textareaInput.value = '';
                cargarMensajes(conversacionActiva);
            } else {
                console.error('Error envío:', data.error);
                mostrarNotificacion('Error al enviar mensaje', 'error');
            }
        })
        .catch(err => {
            console.error('Error enviando mensaje:', err);
            mostrarNotificacion('Error al enviar el mensaje. Intenta nuevamente.', 'error');
        })
        .finally(() => mostrarIndicadorEnvio(false));
    }

    function mostrarNuevaConversacion() {
        console.log('Abriendo modal de nueva conversación');
        // Crear modal si no existe
        let modal = document.getElementById('nuevo-chat-modal');
        if (!modal) {
            modal = document.createElement('div');
            modal.id = 'nuevo-chat-modal';
            modal.className = 'modal';
            modal.innerHTML = `
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>Nueva conversación</h3>
                        <span class="close">&times;</span>
                    </div>
                    <div class="search-users">
                        <input type="text" id="buscar-usuarios" placeholder="Buscar usuarios...">
                    </div>
                    <div id="lista-usuarios" class="usuarios-lista">
                        <!-- Usuarios se cargarán aquí -->
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
            
            // Configurar eventos del modal
            modal.querySelector('.close').addEventListener('click', function() {
                modal.style.display = 'none';
            });
            
            // Cerrar al hacer clic fuera del modal
            window.addEventListener('click', function(event) {
                if (event.target === modal) {
                    modal.style.display = 'none';
                }
            });
            
            // Filtrar usuarios al escribir
            modal.querySelector('#buscar-usuarios').addEventListener('input', function() {
                const busqueda = this.value.toLowerCase().trim();
                document.querySelectorAll('.usuario-item').forEach(item => {
                    const nombre = item.querySelector('.user-name').textContent.toLowerCase();
                    item.style.display = nombre.includes(busqueda) ? 'flex' : 'none';
                });
            });
        }
        
        // Mostrar modal
        modal.style.display = 'block';
        
        // Cargar usuarios
        cargarUsuarios();
    }

    function cargarUsuarios() {
        const contenedor = document.getElementById('lista-usuarios');
        if (!contenedor) {
            console.error('Error: Elemento #lista-usuarios no encontrado');
            return;
        }
        
        contenedor.innerHTML = '<div class="loading">Cargando usuarios...</div>';
        
        console.log('Realizando fetch a obtener_usuarios.php');
        fetch('/Conexion-Main/backend/controllers/chat/obtener_usuarios.php')
            .then(response => {
                console.log('Respuesta recibida:', response);
                if (!response.ok) {
                    throw new Error('Error de red: ' + response.status);
                }
                return response.json();
            })
            .then(data => {
                console.log('Datos recibidos:', data);
                if (data.success) {
                    renderizarUsuarios(data.usuarios || []);
                } else {
                    console.error('Error en respuesta:', data.error || 'Error desconocido');
                    contenedor.innerHTML = '<div class="error">Error: ' + (data.error || 'Error desconocido') + '</div>';
                }
            })
            .catch(error => {
                console.error('Error obteniendo usuarios:', error);
                contenedor.innerHTML = '<div class="error">Error al cargar usuarios: ' + error.message + '</div>';
            });
    }

    function renderizarUsuarios(usuarios) {
        const cont = document.getElementById('lista-usuarios');
        if (!usuarios || usuarios.length === 0) {
            cont.innerHTML = '<div class="no-users">No hay usuarios disponibles</div>';
            return;
        }
        cont.innerHTML = usuarios.map(u => u.id != usuarioActual ? `
            <div class="usuario-item" data-id="${u.id}">
                <img src="https://via.placeholder.com/40" class="user-avatar" alt="">
                <div class="user-name">${sanitizarHTML(u.nombre || u.username)}</div>
                <button class="btn-iniciar-chat"><i class="fas fa-comment"></i></button>
            </div>` : ''
        ).join('');
        
        document.querySelectorAll('.btn-iniciar-chat').forEach(btn => {
            btn.addEventListener('click', () => iniciarConversacion(btn.closest('.usuario-item').dataset.id));
        });
    }

    window.iniciarConversacion = function(usuarioId) {
        document.getElementById('nuevo-chat-modal').style.display='none';
        fetch('/Conexion-Main/backend/controllers/chat/crear_conversacion.php', {
            method:'POST',
            headers:{'Content-Type':'application/x-www-form-urlencoded'},
            body:`usuario_id=${encodeURIComponent(usuarioId)}`
        })
        .then(res => res.json())
        .then(data => {
            if (data.success) {
                abrirConversacion(data.conversacion_id);
                cargarConversaciones();
            } else {
                console.error('Error crear:', data.error);
                mostrarNotificacion('Error al crear conversacion','error');
            }
        })
        .catch(err => {
            console.error('Error crear:', err);
            mostrarNotificacion('Error al crear conversacion','error');
        });
    };

    function formatearHora(fecha) {
        return fecha.toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'});
    }

    function minimizarChat() {
        chatWindowDOM.classList.toggle('minimized');
        // Forzar repintado
        chatWindowDOM.style.display='none';
        setTimeout(() => chatWindowDOM.style.display='flex', 10);
    }

    function cerrarChat() {
        console.log('Cerrando ventana de chat');
        if (chatWindowDOM) {
            chatWindowDOM.style.display = 'none';
            conversacionActiva = null;
            if (mensajesDOM) mensajesDOM.innerHTML = '';
        }
    }

    function mostrarIndicadorEnvio(mostrar) {
        btnEnviar.disabled = mostrar;
        btnEnviar.classList.toggle('sending', mostrar);
    }

    function mostrarNotificacion(msg, tipo='info') {
        let notif = document.getElementById('chat-notification');
        if (!notif) {
            notif = document.createElement('div');
            notif.id = 'chat-notification';
            document.body.appendChild(notif);
        }
        notif.textContent = msg;
        notif.className = `notification ${tipo}`;
        notif.style.display = 'block';
        setTimeout(() => notif.style.display = 'none', 3000);
    }

    function sanitizarHTML(str) {
        return str ? String(str)
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#039;') : '';
    }
}

function inicializarChatSidebar() {
    const sidebar = document.getElementById('chat-sidebar');
    const closeBtn = document.getElementById('close-chat-sidebar');
    const minimizeBtn = document.getElementById('minimize-chat-sidebar');
    
    if (closeBtn) {
        closeBtn.addEventListener('click', function() {
            sidebar.classList.remove('active');
            console.log('Chat sidebar cerrado');
        });
    }
    
    if (minimizeBtn) {
        minimizeBtn.addEventListener('click', function() {
            sidebar.classList.toggle('minimized');
        });
    }
}

// Inicializar cuando el DOM esté listo
document.addEventListener('DOMContentLoaded', function() {
    // Solo inicializar el chat si estamos en una página que lo tenga
    if (document.getElementById('chat-container')) {
        inicializarChat();
    }
    inicializarChatSidebar();
});


==============================================================================
ARCHIVO JS: frontend\js\conector.js
==============================================================================

window.inicializarConector = function() {
  // CAMBIADO: Usa ID específico para esta vista
  const select = document.getElementById('conector-personal'); 
  const tbody = document.querySelector('#tabla-registros-conector tbody');
  
  if (!select || !tbody) {
    console.log('No se encontraron elementos necesarios para Base de Datos Personal');
    return;
  }

  // evitar listeners duplicados - IMPORTANTE
  select.replaceWith(select.cloneNode(true));
  const nuevoSelect = document.getElementById('conector-personal');

  nuevoSelect.addEventListener('change', (e) => {
    // Prevenir cualquier comportamiento por defecto
    e.preventDefault();
    
    const conector = nuevoSelect.value;
    if (!conector) {
      tbody.innerHTML = '<tr><td colspan="6" style="text-align:center;">Selecciona un conector.</td></tr>';
      return;
    }
    
    console.log("Cargando datos para conector:", conector);
    
    // CORRECCIÓN: Usar la ruta relativa correcta
    fetch(`api_registros_conector.php?conector=${encodeURIComponent(conector)}`)
      .then(r => {
        if (!r.ok) throw new Error(`Error HTTP: ${r.status}`);
        return r.json();
      })
      .then(data => {
        console.log("Datos recibidos:", data.length, "registros");
        if (!data.length) {
          tbody.innerHTML = '<tr><td colspan="6" style="text-align:center;">No hay registros.</td></tr>';
        } else {
          tbody.innerHTML = data.map(r => `
            <tr>
              <td>${r.id || ''}</td>
              <td>${r.nombre_persona || ''}</td>
              <td>${r.apellido_persona || ''}</td>
              <td>${r.telefono || ''}</td>
              <td>${r.estado || ''}</td>
              <td>${r.observaciones || ''}</td>
            </tr>
          `).join('');
        }
      })
      .catch((error) => {
        console.error('Error cargando registros:', error);
        tbody.innerHTML = '<tr><td colspan="6" style="text-align:center;">Error al cargar datos.</td></tr>';
      });
  });
};


==============================================================================
ARCHIVO JS: frontend\js\eliminar_registro.js
==============================================================================

console.log('Archivo eliminar_registro.js cargado - v2');

// Función para eliminar un registro
function eliminarRegistro(id) {
    console.log('eliminarRegistro() llamada con ID:', id);
    
    // Confirmar antes de eliminar
    if (!confirm('¿Estás seguro de que deseas eliminar este registro? Esta acción no se puede deshacer.')) {
        return;
    }
    
    // Mostrar indicador visual
    const fila = document.querySelector(`tr[data-id="${id}"]`) || document.querySelector(`td button[onclick*="eliminarRegistro(${id})"]`)?.closest('tr');
    if (fila) {
        fila.style.backgroundColor = 'rgba(255,0,0,0.1)';
        fila.style.opacity = '0.7';
    }
    
    // Crear datos para enviar
    const formData = new FormData();
    formData.append('id', id);
    
    // URL absoluta para evitar problemas con rutas relativas
    const url = window.location.origin + '/conexion-main/backend/controllers/eliminar_registro.php';
    
    // Enviar solicitud al servidor
    fetch(url, {
        method: 'POST',
        body: formData,
        credentials: 'include'
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`Error HTTP: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        console.log('Respuesta del servidor:', data);
        
        if (data.success) {
            // Mensaje de éxito
            alert('Registro eliminado correctamente');
            
            // Eliminar la fila de la tabla con animación
            if (fila) {
                fila.style.transition = 'all 0.5s ease';
                fila.style.opacity = '0';
                fila.style.maxHeight = '0';
                setTimeout(() => {
                    fila.remove();
                }, 500);
            } else {
                // Si no encontramos la fila, recargar la vista
                if (typeof cargarVista === 'function' && window.vistaActual) {
                    cargarVista(window.vistaActual);
                } else {
                    // Como último recurso, recargar la página
                    location.reload();
                }
            }
        } else {
            // Restaurar apariencia normal si hay error
            if (fila) {
                fila.style.backgroundColor = '';
                fila.style.opacity = '1';
            }
            alert('Error: ' + (data.message || 'No se pudo eliminar el registro'));
        }
    })
    .catch(error => {
        console.error('Error al eliminar registro:', error);
        
        // Restaurar apariencia normal
        if (fila) {
            fila.style.backgroundColor = '';
            fila.style.opacity = '1';
        }
        
        alert('Error: ' + error.message);
    });
}

// También podemos añadir un event listener para los botones que tienen data-id
document.addEventListener('click', function(e) {
    const boton = e.target.closest('.btn-eliminar');
    if (boton) {
        const id = boton.getAttribute('data-id');
        if (id) {
            e.preventDefault();
            eliminarRegistro(id);
        }
    }
});

console.log('Event listeners de eliminar_registro.js configurados');


==============================================================================
ARCHIVO JS: frontend\js\estadisticas.js
==============================================================================

window.inicializarEstadisticas = function() {
  // 1. GRÁFICO DE ESTADOS
  const canvasEstados = document.getElementById('chartEstados');
  if (!canvasEstados) return;
  
  let datosEstadosStr = canvasEstados.getAttribute('data-estados') || '{}';
  let datosEstados;
  
  try {
    datosEstados = JSON.parse(datosEstadosStr);
  } catch (e) {
    console.error("Error parseando datos estados:", e);
    return;
  }
  
  // Verificar Chart.js
  if (typeof Chart === 'undefined') return;
  
  // Crear gráfico de estados
  try {
    if (window._chartEstados) {
      window._chartEstados.destroy();
    }
    
    window._chartEstados = new Chart(canvasEstados, {
      type: 'pie',
      data: {
        labels: Object.keys(datosEstados),
        datasets: [{
          data: Object.values(datosEstados),
          backgroundColor: [
            '#3498db', '#2ecc71', '#e74c3c', '#f39c12', 
            '#9b59b6', '#1abc9c', '#34495e', '#d35400'
          ]
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: {
            position: 'right',
          },
          title: {
            display: true,
            text: 'Distribución por Estados'
          }
        }
      }
    });
  } catch (e) {
    console.error("Error creando gráfico de estados:", e);
  }
  
  // 2. GRÁFICO DE CONECTORES
  const canvasConectores = document.getElementById('chartConectores');
  if (!canvasConectores) return;
  
  let datosConectoresStr = canvasConectores.getAttribute('data-conectores') || '{}';
  let datosConectores;
  
  try {
    datosConectores = JSON.parse(datosConectoresStr);
  } catch (e) {
    console.error("Error parseando datos conectores:", e);
    return;
  }
  
  // Crear gráfico de conectores
  try {
    if (window._chartConectores) {
      window._chartConectores.destroy();
    }
    
    window._chartConectores = new Chart(canvasConectores, {
      type: 'bar',
      data: {
        labels: Object.keys(datosConectores),
        datasets: [{
          label: 'Registros por conector',
          data: Object.values(datosConectores),
          backgroundColor: '#3498db'
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: {
            display: false
          },
          title: {
            display: true,
            text: 'Distribución por Conectores'
          }
        },
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });
  } catch (e) {
    console.error("Error creando gráfico de conectores:", e);
  }
};


==============================================================================
ARCHIVO JS: frontend\js\estadisticas_personales.js
==============================================================================

/**
 * Módulo de Estadísticas Personales
 * Gestiona la visualización y navegación de estadísticas por conector
 */

// Variable global para el gráfico (permite destruirlo si se reinicializa)
window._chartPersonal = null;

/**
 * Inicializa el módulo de estadísticas personales
 * Esta función es llamada desde admin.php cuando se carga la vista
 */
function inicializarEstadisticasPersonales() {
    console.log('Inicializando módulo de estadísticas personales');
    
    // Configurar el selector de conector
    configurarSelectorConector();
    
    // Inicializar gráfico con datos del DOM
    inicializarGraficoDesdeDom();
}

/**
 * Configura el selector de conector evitando duplicación de event listeners
 */
function configurarSelectorConector() {
    const select = document.getElementById('conector');
    if (!select) {
        console.error('No se encontró el selector de conector');
        return;
    }
    
    // Clonar el elemento para eliminar todos los event listeners previos
    const newSelect = select.cloneNode(true);
    select.parentNode.replaceChild(newSelect, select);
    
    // Agregar el nuevo event listener
    newSelect.addEventListener('change', function() {
        const valor = this.value;
        if (!valor) return;
        
        console.log(`Cambiando a conector: ${valor}`);
        mostrarCargando();
        
        // Construir URL con timestamp para evitar caché
        const timestamp = new Date().getTime();
        const url = `vista_estadisticas_personales.php?conector=${encodeURIComponent(valor)}&t=${timestamp}`;
        
        // Detectar el contexto y usar el método apropiado para navegar
        if (window !== window.parent && typeof window.parent.cargarVista === 'function') {
            console.log('Usando navegación desde iframe (parent.cargarVista)');
            window.parent.cargarVista(url);
        } else if (typeof window.cargarVista === 'function') {
            console.log('Usando navegación con cargarVista local');
            window.cargarVista(url);
        } else {
            console.log('Usando navegación directa (window.location)');
            window.location.href = url;
        }
    });
    
    console.log('Selector de conector configurado');
}

/**
 * Muestra un indicador de carga superpuesto al contenedor principal
 */
function mostrarCargando() {
    const container = document.querySelector('.estadisticas-personales-container');
    if (!container) return;
    
    // Asegurarse de posición relativa para el contenedor
    container.style.position = 'relative';
    
    // Crear y añadir el overlay de carga
    const loadingDiv = document.createElement('div');
    loadingDiv.className = 'loading-overlay';
    loadingDiv.innerHTML = '<div class="spinner">Cargando datos...</div>';
    loadingDiv.style.cssText = 'position:absolute;top:0;left:0;width:100%;height:100%;background:rgba(255,255,255,0.8);display:flex;justify-content:center;align-items:center;z-index:1000;';
    container.appendChild(loadingDiv);
}

/**
 * Inicializa el gráfico obteniendo datos desde el DOM
 */
function inicializarGraficoDesdeDom() {
    console.log('Inicializando gráfico desde datos en DOM');
    
    const canvas = document.getElementById('graficoEstadosPersonal');
    if (!canvas) {
        console.error('No se encontró el canvas para el gráfico');
        return;
    }
    
    // Extraer datos del canvas (insertados por PHP)
    const conector = canvas.getAttribute('data-conector') || '';
    const datos = canvas.getAttribute('data-estados') || '{}';
    
    try {
        const estadosParsed = JSON.parse(datos);
        inicializarGrafico(conector, estadosParsed);
    } catch(e) {
        console.error('Error al parsear datos desde el DOM:', e);
    }
}

/**
 * Inicializa el gráfico con los datos proporcionados
 * @param {string} conector - Nombre del conector seleccionado
 * @param {Object} datosEstados - Objeto con estados como claves y cantidades como valores
 */
function inicializarGrafico(conector, datosEstados) {
    console.log(`Inicializando gráfico para: ${conector}`);
    
    // Verificar que Chart.js está disponible
    if (typeof Chart !== 'function') {
        console.error('Chart.js no está disponible. Asegúrate de incluirlo antes.');
        return;
    }
    
    // Verificar datos
    if (!datosEstados || Object.keys(datosEstados).length === 0) {
        console.warn('No hay datos para mostrar en el gráfico');
        return;
    }
    
    const canvas = document.getElementById('graficoEstadosPersonal');
    if (!canvas) return;
    
    // Preparar datos para Chart.js
    const labels = Object.keys(datosEstados);
    const data = Object.values(datosEstados);
    
    // Destruir gráfico anterior si existe
    if (window._chartPersonal) {
        console.log('Destruyendo gráfico anterior');
        try {
            window._chartPersonal.destroy();
        } catch (e) {
            console.error('Error al destruir gráfico previo:', e);
        }
    }
    
    // Crear nuevo gráfico
    const ctx = canvas.getContext('2d');
    window._chartPersonal = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [{
                label: `Estados para ${conector}`,
                data: data,
                backgroundColor: [
                    '#3498db', '#2ecc71', '#e74c3c', '#f39c12', 
                    '#9b59b6', '#1abc9c', '#34495e', '#d35400'
                ],
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top',
                },
                title: {
                    display: true,
                    text: `Estadísticas de ${conector}`,
                    font: { size: 16 }
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            const label = context.label || '';
                            const value = context.raw || 0;
                            const total = context.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
                            const percentage = Math.round((value / total) * 100);
                            return `${label}: ${value} (${percentage}%)`;
                        }
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Cantidad'
                    }
                }
            }
        }
    });
    
    console.log('Gráfico inicializado correctamente ✓');
}

// Exportar funciones para uso global (necesario para que admin.php pueda llamarlas)
window.inicializarEstadisticasPersonales = inicializarEstadisticasPersonales;
window.inicializarEstadisticasPersonalesConDatos = inicializarGrafico;


==============================================================================
ARCHIVO JS: frontend\js\estados.js
==============================================================================

/**
 * Configuración de colores para cada estado
 */
const estadoColores = {
    // Contacto Inicial
    'Primer contacto':          {bg:'#ffcccc', color:'#a00'},
    'Conectado':                {bg:'#ffd6cc', color:'#b36b00'},
    'Primer intento':           {bg:'#f5e6ff', color:'#5a00b3'},
    'Segundo Intento':          {bg:'#e6ccff', color:'#5a00b3'},
    'Tercero intento':          {bg:'#d9b3ff', color:'#5a00b3'},
    'Intento llamada telefonica': {bg:'#e1f5fe', color:'#0288d1'},   // NUEVO - Azul claro
    'Intento 2 llamada telefonica': {bg:'#b3e5fc', color:'#0277bd'}, // NUEVO - Azul medio
    'Intento 3 llamada telefonica': {bg:'#81d4fa', color:'#01579b'}, // NUEVO - Azul oscuro
    'No interesado':            {bg:'#ffdddd', color:'#a00'},
    
    // Desayunos
    'No confirma desayuno':     {bg:'#ffe5cc', color:'#b36b00'},
    'No confirmado a desayuno': {bg:'#ffe5cc', color:'#b36b00'}, // Mantener para compatibilidad
    'Confirmado a Desayuno':    {bg:'#cce0ff', color:'#00509e'},
    'Desayuno Asistido':        {bg:'#cce6ff', color:'#00509e'},
    
    // Miembros
    'Miembro activo':           {bg:'#d9f2d9', color:'#006600'},
    'Miembro inactivo':         {bg:'#ffebcc', color:'#994d00'},
    'Miembro ausente':          {bg:'#ffe6e6', color:'#cc0000'},
    'Congregado sin desayuno':  {bg:'#d4edda', color:'#155724'},
    'Visitante':                {bg:'#fff', color:'#222'},
    
    // Líderes
    'Lider Activo':             {bg:'#cce0ff', color:'#004080'},
    'Lider inactivo':           {bg:'#e6e6e6', color:'#666666'},
    'Lider ausente':            {bg:'#ffe6ea', color:'#990033'},
    
    // Reconexión
    'Reconectado':              {bg:'#c8e6c9', color:'#2e7d32'},
    'Intento de reconexión':    {bg:'#dcedc8', color:'#33691e'},
    'Etapa 1 reconexion (1 mes)': {bg:'#fff9c4', color:'#f57f17'}, // NUEVO - Amarillo
    'Etapa 2 reconexion (3 mes)': {bg:'#ffe0b2', color:'#e65100'}, // NUEVO - Naranja
    'Etapa 3 reconexion final (6 mes)': {bg:'#ffcdd2', color:'#c62828'}, // NUEVO - Rojo
    
    // Ministerios Específicos (Nuevos)
    'Vencedores Kids':         {bg:'#ffeb3b', color:'#8c6d00'}, // Amarillo
    'Legado':                  {bg:'#dcedc8', color:'#558b2f'}, // Verde claro
    'Teens Legado':            {bg:'#c8e6c9', color:'#2e7d32'}, // Verde medio
    
    // Otros
    'Por Validar Estado':       {bg:'#ffe5b4', color:'#b36b00'},
    'Nulo':                     {bg:'#e0e0e0', color:'#757575'}, // NUEVO - Gris
    'Delegado a acompañante':   {bg:'#e1bee7', color:'#6a1b9a'}, // NUEVO - Púrpura
    'Datos no autorizados':     {bg:'#ffcdd2', color:'#d32f2f'}, // NUEVO - Rojo claro
    'Datos incorrectos':        {bg:'#f8bbd0', color:'#c2185b'}  // NUEVO - Rosa
};

/**
 * Lista completa de estados agrupados por categoría
 * Útil para inicializar selectores u otras funcionalidades
 */
const gruposEstados = {
    'Contacto Inicial': [
        'Primer contacto',
        'Conectado',
        'Primer intento',
        'Segundo Intento',
        'Tercero intento',
        'Intento llamada telefonica',     // NUEVO
        'Intento 2 llamada telefonica',   // NUEVO
        'Intento 3 llamada telefonica',   // NUEVO
        'No interesado'
    ],
    'Desayunos': [
        'No confirma desayuno',
        'Confirmado a Desayuno',
        'Desayuno Asistido'
    ],
    'Miembros': [
        'Miembro activo',
        'Miembro inactivo',
        'Miembro ausente',
        'Congregado sin desayuno',
        'Visitante'
    ],
    'Líderes': [
        'Lider Activo',
        'Lider inactivo',
        'Lider ausente'
    ],
    'Reconexión': [
        'Reconectado',
        'Intento de reconexión',
        'Etapa 1 reconexion (1 mes)',
        'Etapa 2 reconexion (3 mes)',
        'Etapa 3 reconexion final (6 mes)'
    ],
    'Ministerios': [
        'Vencedores Kids',
        'Legado',
        'Teens Legado'
    ],
    'Otros': [
        'Por Validar Estado',
        'Nulo',                   // NUEVO
        'Delegado a acompañante', // NUEVO
        'Datos no autorizados',   // NUEVO
        'Datos incorrectos'       // NUEVO
    ]
};

// Crear un array plano con todos los estados para facilitar validaciones
const todosEstados = Object.values(gruposEstados).flat();

/**
 * Función principal para cambiar el estado de un registro
 * @param {number} id - ID del registro
 * @param {string} nuevoEstado - Nuevo estado a asignar
 */
function cambiarEstado(id, nuevoEstado) {
    console.log("Cambiando estado:", id, nuevoEstado);
    
    // Validación adicional
    if (!id || isNaN(parseInt(id))) {
        console.error("cambiarEstado: ID inválido:", id);
        return;
    }
    
    const data = new FormData();
    data.append('id', id);
    data.append('estado', nuevoEstado);
    
    // Mostrar indicador visual
    const elemento = document.getElementById('estado-td-' + id);
    if (elemento) {
        elemento.style.opacity = '0.5';
    }
    
    fetch('../../backend/controllers/actualizar_estado.php', {
        method: 'POST',
        body: data
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            console.log('Estado actualizado correctamente');
            // Actualizar color si existe el elemento
            setEstadoColor(id, nuevoEstado);
        } else {
            console.error('Error del servidor:', data.message || 'Error desconocido');
            alert('Error al actualizar el estado: ' + (data.message || 'Error desconocido'));
        }
    })
    .catch(error => {
        console.error('Error en la petición:', error);
        alert('Error de conexión al actualizar el estado');
    })
    .finally(() => {
        // Restaurar opacidad
        if (elemento) {
            elemento.style.opacity = '1';
        }
    });
}

/**
 * Función que valida los parámetros y llama a cambiarEstado
 * Esta es la función que debe usarse en los atributos onchange
 * @param {string} estado - Nuevo estado a asignar
 * @param {number|string} id - ID del registro (debe ser numérico)
 */
function actualizarEstado(estado, id) {
    // Validación del ID
    if (!id || isNaN(parseInt(id))) {
        console.error("ID inválido:", id);
        alert("Error: ID de registro inválido");
        return;
    }
    
    // Convertir a número para asegurar formato correcto
    const idNumerico = parseInt(id);
    console.log("Actualizando estado:", idNumerico, estado);
    
    // Usar la función principal
    cambiarEstado(idNumerico, estado);
}

/**
 * Aplica los colores correspondientes al estado
 * @param {number} id - ID del registro
 * @param {string} estado - Estado cuyo color aplicar
 */
function setEstadoColor(id, estado) {
    const td = document.getElementById('estado-td-' + id);
    if (!td) {
        console.warn(`Elemento con ID 'estado-td-${id}' no encontrado`);
        return;
    }
    
    if (!estadoColores[estado]) {
        console.warn(`No hay configuración de color para el estado '${estado}'`);
        return;
    }
    
    td.style.setProperty('background', estadoColores[estado].bg, 'important');
    td.style.setProperty('color', estadoColores[estado].color, 'important');
}

/**
 * Inicializa los colores y eventos para los selectores de estado
 */
function inicializarEstados() {
    console.log("Inicializando estados...");
    
    // Inicializar colores para selectores existentes
    document.querySelectorAll('select[name="estado"]').forEach(function(sel) {
        // Intentar obtener el ID desde data-id
        let id = sel.getAttribute('data-id');
        
        // Si no hay data-id, intentar obtenerlo del elemento contenedor
        if (!id) {
            const td = sel.closest('td[id^="estado-td-"]');
            if (td) {
                id = td.id.replace('estado-td-', '');
            }
        }
        
        if (id) {
            // Aplicar color inicial
            setEstadoColor(id, sel.value);
            
            // Añadir evento solo si no tiene ya un manejador onchange
            if (!sel.hasAttribute('onchange')) {
                sel.addEventListener('change', function() {
                    actualizarEstado(sel.value, id);
                    setEstadoColor(id, sel.value);
                });
            }
        }
    });
}

// Inicializar cuando el DOM esté listo
document.addEventListener('DOMContentLoaded', inicializarEstados);

// Exportar funciones para uso global
window.actualizarEstado = actualizarEstado;
window.cambiarEstado = cambiarEstado;
window.setEstadoColor = setEstadoColor;
window.estadoColores = estadoColores;
window.gruposEstados = gruposEstados;
window.todosEstados = todos


==============================================================================
ARCHIVO JS: frontend\js\filtrar.js
==============================================================================

// Función para inicializar el módulo de filtrado
function inicializarFiltro() {
    console.log("Inicializando módulo de filtrado");
    
    // Usar una espera más larga para asegurar que el DOM esté listo
    setTimeout(function() {
        try {
            // Comprobar si los elementos existen antes de agregar event listeners
            const btnLimpiar = document.getElementById('btn-limpiar');
            const btnAplicar = document.getElementById('btn-aplicar');
            const btnVolver = document.getElementById('btn-volver');
            
            console.log("Elementos encontrados:", {
                btnLimpiar: btnLimpiar ? true : false,
                btnAplicar: btnAplicar ? true : false,
                btnVolver: btnVolver ? true : false
            });
            
            if (btnLimpiar) {
                btnLimpiar.addEventListener('click', function() {
                    document.getElementById('filtro-form').reset();
                });
            }
            
            if (btnAplicar) {
                btnAplicar.addEventListener('click', function() {
                    aplicarFiltros();
                });
            }
            
            if (btnVolver) {
                btnVolver.addEventListener('click', function() {
                    document.getElementById('resultados-container').style.display = 'none';
                    document.getElementById('filtro-form').style.display = 'block';
                });
            }
        } catch (error) {
            console.error("Error al inicializar filtros:", error);
        }
    }, 1000); // Aumentar a 1000ms (1 segundo) para dar más tiempo
}

// Función para aplicar los filtros y mostrar resultados
function aplicarFiltros() {
    try {
        // Comprobar si el formulario existe
        const form = document.getElementById('filtro-form');
        if (!form) {
            console.error("No se encontró el formulario de filtros");
            return;
        }
        
        // Comprobar si el contenedor de resultados existe
        const resultadosContainer = document.getElementById('resultados-container');
        const resultadosFiltro = document.getElementById('resultados-filtro');
        
        if (!resultadosContainer || !resultadosFiltro) {
            console.error("No se encontraron los contenedores de resultados");
            return;
        }
        
        // Recoger datos del formulario
        const formData = new FormData(form);
        const params = new URLSearchParams();
        
        // Añadir cada campo del formulario a los parámetros
        for (const [key, value] of formData.entries()) {
            if (value.trim() !== '') {
                params.append(key, value);
            }
        }
        
        // Mostrar indicador de carga
        resultadosFiltro.innerHTML = 
            '<div class="loading-spinner"><i class="fas fa-spinner fa-spin"></i> Cargando resultados...</div>';
        
        // Mostrar el contenedor de resultados
        resultadosContainer.style.display = 'block';
        
        // Ocultar el formulario
        form.style.display = 'none';
        
        // Hacer la petición AJAX
        fetch('resultados_filtro.php?' + params.toString())
            .then(response => {
                if (!response.ok) {
                    throw new Error('Error en la respuesta del servidor');
                }
                return response.text();
            })
            .then(html => {
                resultadosFiltro.innerHTML = html;
                
                // Configurar eventos para botones de los resultados
                setTimeout(function() {
                    configurarEventosResultados();
                }, 100);
            })
            .catch(error => {
                resultadosFiltro.innerHTML = 
                    `<div class="error-message">
                        <i class="fas fa-exclamation-triangle"></i> 
                        Error al cargar los resultados: ${error.message}
                    </div>`;
            });
    } catch (error) {
        console.error("Error al aplicar filtros:", error);
    }
}

// Configurar eventos para botones en los resultados
function configurarEventosResultados() {
    try {
        const btnExcel = document.getElementById('btn-excel');
        const btnPdf = document.getElementById('btn-pdf');
        const btnPrint = document.getElementById('btn-print');
        
        if (btnExcel) {
            btnExcel.addEventListener('click', function() {
                alert('Exportando a Excel... Esta función estará disponible próximamente.');
            });
        }
        
        if (btnPdf) {
            btnPdf.addEventListener('click', function() {
                alert('Exportando a PDF... Esta función estará disponible próximamente.');
            });
        }
        
        if (btnPrint) {
            btnPrint.addEventListener('click', function() {
                window.print();
            });
        }
    } catch (error) {
        console.error("Error al configurar eventos de resultados:", error);
    }
}


==============================================================================
ARCHIVO JS: frontend\js\foto_maximizada.js
==============================================================================

/**
 * Sistema de visualización de fotos ampliadas
 */
function mostrarFotoMaximizada(url, nombre) {
    console.log('Mostrando foto maximizada:', url);
    
    // Crear estructura del modal aprovechando clases existentes
    let modal = document.createElement('div');
    modal.id = 'modal-foto';
    modal.className = 'modal'; // Usar clase modal existente
    
    modal.innerHTML = `
        <div class="modal-content foto-modal-content">
            <div class="modal-header">
                <h3>${nombre || 'Vista ampliada'}</h3>
                <span class="close">&times;</span>
            </div>
            <div class="modal-body foto-modal-body">
                <img id="imagen-maximizada" src="${url}" alt="${nombre || 'Imagen ampliada'}">
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // Mostrar el modal
    modal.style.display = 'flex';
    modal.style.alignItems = 'center';
    modal.style.justifyContent = 'center';
    
    // Configurar los eventos de cierre
    const cerrarModal = function() {
        modal.style.display = 'none';
        setTimeout(() => {
            modal.remove();
        }, 300);
    };
    
    // Evento para cerrar con el botón X
    modal.querySelector('.close').onclick = cerrarModal;
    
    // Evento para cerrar al hacer clic fuera de la imagen
    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            cerrarModal();
        }
    });
    
    // Evento para cerrar con ESC
    document.addEventListener('keydown', function escHandler(e) {
        if (e.key === 'Escape') {
            cerrarModal();
            document.removeEventListener('keydown', escHandler);
        }
    });
}


==============================================================================
ARCHIVO JS: frontend\js\informes.js
==============================================================================

// Esta función será llamada desde admin.php cuando cargue la vista correspondiente
function inicializarInformes() {
    console.log("Inicializando módulo de informes");
    
    // Verificar que los elementos existan antes de añadir event listeners
    const tipoInformeSelect = document.getElementById('tipo-informe');
    const btnVistaPrevia = document.getElementById('btn-vista-previa');
    const btnGenerar = document.getElementById('btn-generar');
    
    if (!tipoInformeSelect || !btnVistaPrevia || !btnGenerar) {
        console.error("Error: No se encontraron los elementos necesarios para inicializar el módulo de informes");
        return;
    }
    
    // Mostrar campos relevantes según el tipo de informe
    tipoInformeSelect.addEventListener('change', function() {
        const tipoInforme = this.value;
        document.querySelector('.selector-conector').style.display = 
            (tipoInforme === 'personal' || tipoInforme === 'detallado') ? 'block' : 'none';
        
        document.querySelector('.selector-estado').style.display = 
            (tipoInforme === 'estados' || tipoInforme === 'detallado') ? 'block' : 'none';
    });
    
    // Vista previa del informe
    btnVistaPrevia.addEventListener('click', function() {
        generarInforme(true);
    });
    
    // Generar y descargar informe
    btnGenerar.addEventListener('click', function() {
        generarInforme(false);
    });
}

function generarInforme(esPrevista) {
    // Obtener referencia al botón usado
    const btnUsado = esPrevista ? 
        document.getElementById('btn-vista-previa') : 
        document.getElementById('btn-generar');
    
    // Guardar texto original y mostrar estado de procesamiento
    const textoOriginal = btnUsado.textContent;
    btnUsado.textContent = 'Procesando...';
    btnUsado.disabled = true;
    
    // Crear el FormData desde el formulario
    const formData = new FormData(document.getElementById('informeForm'));
    formData.append('vista_previa', esPrevista ? '1' : '0');
    
    // Mostrar datos que se envían (para depuración)
    console.log("Enviando datos al servidor:");
    for (let pair of formData.entries()) {
        console.log(pair[0] + ': ' + pair[1]);
    }
    
    // Realizar la petición AJAX
    fetch('../../backend/controllers/generar_informe.php', {
        method: 'POST',
        body: formData
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Error en la respuesta del servidor: ' + response.status);
        }
        
        if (esPrevista) {
            return response.text();
        } else {
            return response.blob();
        }
    })
    .then(data => {
        if (esPrevista) {
            // Vista previa: mostrar en el área de resultados
            const vistaPrevia = document.getElementById('vista-previa');
            vistaPrevia.style.display = 'block';
            
            const contenidoInforme = document.getElementById('contenido-informe');
            contenidoInforme.innerHTML = '<pre>' + data + '</pre>';
        } else {
            // Descarga: generar archivo
            const url = window.URL.createObjectURL(data);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = 'informe_conexion_' + new Date().toISOString().split('T')[0] + '.txt';
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            
            // Mostrar mensaje de éxito
            alert('Informe generado con éxito');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Ha ocurrido un error al generar el informe: ' + error.message);
    })
    .finally(() => {
        // Restaurar botón
        btnUsado.textContent = textoOriginal;
        btnUsado.disabled = false;
    });
}


==============================================================================
ARCHIVO JS: frontend\js\modal_util.js
==============================================================================

// Crea este nuevo archivo con las funciones de manejo de modales
function cerrarModal(id) {
    console.log('Cerrando modal:', id);
    
    // Obtener el elemento del modal
    const modal = document.getElementById(id);
    if (!modal) {
        console.error('Modal no encontrado:', id);
        return;
    }
    
    // Verificar si está visible antes de ocultarlo
    if (modal.style.display !== 'none') {
        modal.style.display = 'none';
        
        // Ocultar también el overlay
        const overlay = document.getElementById('modal-overlay');
        if (overlay) {
            overlay.style.display = 'none';
        }
        
        console.log('Modal cerrado correctamente');
    }
}

function abrirModal(id) {
    console.log('Abriendo modal:', id);
    
    // Obtener el elemento del modal
    const modal = document.getElementById(id);
    if (!modal) {
        console.error('Modal no encontrado:', id);
        return;
    }
    
    // Mostrar el modal
    modal.style.display = 'flex';
    
    // Mostrar el overlay
    const overlay = document.getElementById('modal-overlay');
    if (overlay) {
        overlay.style.display = 'block';
    }
    
    console.log('Modal abierto correctamente');
}


==============================================================================
ARCHIVO JS: frontend\js\observaciones.js
==============================================================================

console.log('Archivo observaciones.js cargado - v4');

// Función para abrir el modal de observaciones
function abrirObservacion(id) {
    console.log('Abriendo modal para ID:', id);
    
    try {
        // Asignar ID al campo oculto
        document.getElementById('id-registro').value = id;
        
        // Limpiar el textarea
        document.getElementById('texto-observacion').value = '';
        
        // Mostrar el modal
        const modal = document.getElementById('modal-observaciones');
        modal.style.display = 'flex';
        
        // Enfocar el textarea
        setTimeout(() => {
            document.getElementById('texto-observacion').focus();
        }, 100);
    } catch (error) {
        console.error('Error al abrir modal:', error);
        alert('Error al abrir el formulario de observaciones');
    }
}

// Función para cerrar el modal
function cerrarModal(id) {
    try {
        document.getElementById(id).style.display = 'none';
    } catch (error) {
        console.error('Error al cerrar modal:', error);
    }
}

// Función para guardar la observación
function guardarObservacion() {
    console.log('Ejecutando guardarObservacion()');
    
    // Obtener datos del formulario
    const id = document.getElementById('id-registro').value;
    const observacion = document.getElementById('texto-observacion').value;
    
    console.log('ID:', id);
    console.log('Observación:', observacion);

    // Validar
    if (!id) {
        alert('Error: No se encontró el ID del registro');
        return;
    }
    
    if (!observacion.trim()) {
        alert('Por favor escribe una observación');
        return;
    }
    
    // Mostrar indicador de carga
    const btnGuardar = document.getElementById('btn-guardar-obs');
    if (btnGuardar) {
        btnGuardar.disabled = true;
        btnGuardar.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Guardando...';
    }
    
    // Crear FormData como en actualizar_registro.php
    const formData = new FormData();
    formData.append('id', id);
    formData.append('observaciones', observacion);
    
    // Enviar solicitud al servidor
    fetch('../../backend/controllers/agregar_observacion.php', {
        method: 'POST',
        body: formData,
        credentials: 'include'
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`Error HTTP: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        console.log('Respuesta:', data);
        
        // Restaurar botón
        if (btnGuardar) {
            btnGuardar.disabled = false;
            btnGuardar.innerHTML = '<i class="fas fa-save"></i> Guardar';
        }
        
        if (data.success) {
            alert('Observación guardada correctamente');
            cerrarModal('modal-observaciones');
            
            // Recargar la vista actual si es posible
            if (typeof cargarVista === 'function' && window.vistaActual) {
                cargarVista(window.vistaActual);
            }
        } else {
            alert('Error: ' + (data.message || 'No se pudo guardar la observación'));
        }
    })
    .catch(error => {
        console.error('Error en fetch:', error);
        
        // Restaurar botón
        if (btnGuardar) {
            btnGuardar.disabled = false;
            btnGuardar.innerHTML = '<i class="fas fa-save"></i> Guardar';
        }
        
        alert('Error de conexión: ' + error.message);
    });
}

// Configurar eventos cuando el DOM esté listo
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM cargado - configurando eventos de observaciones');
    
    // Configurar botón guardar
    const btnGuardar = document.getElementById('btn-guardar-obs');
    if (btnGuardar) {
        console.log('Botón de guardar encontrado, configurando evento');
        btnGuardar.addEventListener('click', guardarObservacion);
    } else {
        console.warn('⚠️ Botón guardar observaciones no encontrado');
    }
});


==============================================================================
ARCHIVO JS: frontend\js\usuarios-online.js
==============================================================================

// Sistema de monitoreo de usuarios conectados

function inicializarUsuariosOnline() {
    const modal = document.getElementById('modal-usuarios-online');
    const btnAbrir = document.getElementById('btn-usuarios-online');
    const btnCerrar = document.querySelector('.btn-cerrar');
    const closeBtn = document.querySelector('.close-modal');
    const btnRefresh = document.getElementById('btn-refresh-usuarios');
    const listaUsuarios = document.getElementById('lista-usuarios-online');
    const contadorUsuarios = document.getElementById('contador-usuarios-online');
    
    let intervaloActualizacion = null;
    
    // Abrir modal
    btnAbrir.addEventListener('click', () => {
        modal.style.display = 'block';
        cargarUsuariosOnline();
    });
    
    // Cerrar modal
    btnCerrar.addEventListener('click', () => {
        modal.style.display = 'none';
    });
    
    closeBtn.addEventListener('click', () => {
        modal.style.display = 'none';
    });
    
    window.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.style.display = 'none';
        }
    });
    
    // Actualizar manualmente
    btnRefresh.addEventListener('click', cargarUsuariosOnline);

    const btnLimpiar = document.getElementById('btn-limpiar-sesiones');
    if (btnLimpiar) {
        btnLimpiar.addEventListener('click', () => {
            btnLimpiar.disabled = true;
            btnLimpiar.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Limpiando...';
            
            fetch('/Conexion-Main/backend/controllers/usuarios/limpiar_sesiones.php')
                .then(response => response.json())
                .then(data => {
                    cargarUsuariosOnline();
                    btnLimpiar.innerHTML = `<i class="fas fa-broom"></i> Limpiar (${data.limpiados})`;
                    setTimeout(() => {
                        btnLimpiar.disabled = false;
                        btnLimpiar.innerHTML = '<i class="fas fa-broom"></i> Limpiar';
                    }, 3000);
                })
                .catch(err => {
                    btnLimpiar.disabled = false;
                    btnLimpiar.innerHTML = '<i class="fas fa-broom"></i> Limpiar';
                });
        });
    }
    
    // Cargar usuarios online
    function cargarUsuariosOnline() {
        listaUsuarios.innerHTML = '<p class="cargando">Cargando usuarios...</p>';
        
        fetch('/Conexion-Main/backend/controllers/usuarios/usuarios_online.php')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    mostrarUsuariosOnline(data.usuarios);
                    actualizarContador(data.usuarios.length);
                } else {
                    listaUsuarios.innerHTML = '<p class="error">Error: ' + (data.error || 'Desconocido') + '</p>';
                }
            })
            .catch(error => {
                console.error('Error cargando usuarios online:', error);
                listaUsuarios.innerHTML = '<p class="error">Error de conexión</p>';
            });
    }
    
    // Mostrar usuarios en el modal
    function mostrarUsuariosOnline(usuarios) {
        if (!usuarios || usuarios.length === 0) {
            listaUsuarios.innerHTML = '<p>No hay usuarios conectados</p>';
            return;
        }
        
        const html = usuarios.map(u => `
            <div class="usuario-online">
                <div class="status-indicator ${u.online ? 'online' : 'offline'}"></div>
                <div class="usuario-info">
                    <div class="usuario-nombre">${sanitizarHTML(u.nombre)}</div>
                    <div class="usuario-tiempo">${formatearTiempo(u.tiempo_conexion)}</div>
                </div>
            </div>
        `).join('');
        
        listaUsuarios.innerHTML = html;
    }
    
    // Actualizar contador flotante
    function actualizarContador(cantidad) {
        contadorUsuarios.textContent = cantidad;
    }
    
    // Formatear tiempo de conexión
    function formatearTiempo(segundos) {
        if (segundos < 60) {
            return 'Hace unos segundos';
        } else if (segundos < 3600) {
            return `Hace ${Math.floor(segundos / 60)} min`;
        } else {
            return `Hace ${Math.floor(segundos / 3600)} h`;
        }
    }
    
    // Sanitizar HTML para prevenir XSS
    function sanitizarHTML(str) {
        return str ? String(str)
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#039;') : '';
    }
    
    // Actualizar cada 5 segundos en lugar de 15
    intervaloActualizacion = setInterval(() => {
        // Actualizar contador incluso si modal está cerrado
        fetch('/Conexion-Main/backend/controllers/usuarios/usuarios_online.php')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    actualizarContador(data.usuarios.length);
                    
                    // Si el modal está visible, actualizar la lista completa
                    if (modal.style.display === 'block') {
                        mostrarUsuariosOnline(data.usuarios);
                    }
                }
            })
            .catch(error => {
                console.error('Error actualizando usuarios online:', error);
            });
    }, 5000);  // 5 segundos en lugar de 15
    
    // Cargar usuarios al iniciar y actualizar contador
    cargarUsuariosOnline();
    
    // Limpiar intervalo al desmontar
    return function cleanup() {
        clearInterval(intervaloActualizacion);
    };
}

// Función de heartbeat para mantener la sesión activa
function iniciarHeartbeat() {
    // Enviar señal cada 30 segundos para indicar que el usuario sigue activo
    const heartbeatInterval = setInterval(() => {
        fetch('/Conexion-Main/backend/controllers/usuarios/heartbeat.php', {
            method: 'POST'
        }).catch(err => console.error('Error en heartbeat:', err));
    }, 30000);
    
    // Limpiar intervalo cuando la ventana se cierre
    window.addEventListener('beforeunload', () => {
        clearInterval(heartbeatInterval);
    });
}

// Función para enviar la señal de desconexión
function enviarDesconexion() {
    // Usar el método navigator.sendBeacon que es más confiable que XMLHttpRequest
    if (navigator.sendBeacon) {
        navigator.sendBeacon('/Conexion-Main/backend/controllers/usuarios/marcar_desconexion.php');
    } else {
        // Fallback al método anterior
        const xhr = new XMLHttpRequest();
        xhr.open('POST', '/Conexion-Main/backend/controllers/usuarios/marcar_desconexion.php', false);
        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        xhr.send();
    }
}

// Eventos para detectar cierre de página
window.addEventListener('beforeunload', enviarDesconexion);
window.addEventListener('unload', enviarDesconexion);
document.addEventListener('visibilitychange', function() {
    if (document.visibilityState === 'hidden') {
        enviarDesconexion();
    }
});

// Inicializar cuando el DOM esté listo
document.addEventListener('DOMContentLoaded', () => {
    inicializarUsuariosOnline();
    iniciarHeartbeat();
});


==============================================================================
ARCHIVO JS: frontend\js\ver_observaciones.js
==============================================================================

// Al inicio del archivo
// Hacer la función disponible globalmente
window.verObservaciones = function(id) {
    console.log('Iniciando carga de observaciones para ID:', id);
    console.log('ID recibido:', id); // Añade esta línea para depuración
    
    if (!id || isNaN(id)) {
        alert('Error: ID de registro inválido');
        return;
    }
    
    // Verificar que el elemento existe antes de intentar acceder a él
    const modalElement = document.getElementById('modal-ver-observaciones');
    const overlayElement = document.getElementById('overlay-observaciones');
    const contenidoElement = document.getElementById('observaciones-contenido');
    
    if (!modalElement) {
        console.error('Error: No se encontró el elemento #modal-ver-observaciones');
        alert('Error: Elemento del modal no encontrado.');
        return;
    }
    
    if (!overlayElement) {
        console.error('Error: No se encontró el elemento #overlay-observaciones');
        alert('Error: Elemento del overlay no encontrado.');
        return;
    }
    
    if (!contenidoElement) {
        console.error('Error: No se encontró el elemento #observaciones-contenido');
        alert('Error: Elemento del contenido no encontrado.');
        return;
    }
    
    // Mostrar modal y overlay
    modalElement.style.display = 'flex';
    overlayElement.style.display = 'block';
    document.body.style.overflow = 'hidden';
    
    // Mostrar cargando
    contenidoElement.innerHTML = '<div class="cargando">Cargando observaciones para registro #' + id + '...</div>';
    
    // Usar XMLHttpRequest en lugar de fetch
    var xhr = new XMLHttpRequest();
    xhr.open('POST', '../../backend/controllers/obtener_observaciones.php', true);
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    
    xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
            console.log('XHR Status:', xhr.status);
            console.log('Respuesta:', xhr.responseText);
            
            if (xhr.status === 200) {
                try {
                    var data = JSON.parse(xhr.responseText);
                    if (data.success) {
                        mostrarObservaciones(data.observaciones);
                    } else {
                        mostrarError(data.message || 'Error desconocido');
                    }
                } catch (e) {
                    console.error('Error al procesar JSON:', e);
                    mostrarError('Error al procesar la respuesta del servidor');
                }
            } else {
                mostrarError('Error en la conexión: ' + xhr.status);
            }
        }
    };
    
    // Enviar la solicitud
    xhr.send('id=' + encodeURIComponent(id));
}

// Funciones auxiliares deben estar fuera de verObservaciones
function mostrarObservaciones(texto) {
    var contenedor = document.getElementById('observaciones-contenido');
    
    if (texto && texto.trim() !== '') {
        // Formatear texto a HTML
        var html = texto
            .replace(/\n\n/g, '</p><p>')
            .replace(/\n/g, '<br>');
        
        html = '<p>' + html + '</p>';
        html = html.replace(/\[(.*?)\]/g, '<span class="observacion-meta">[$1]</span>');
        
        contenedor.innerHTML = html;
    } else {
        contenedor.innerHTML = '<p class="sin-observaciones">No hay observaciones registradas para este contacto.</p>';
    }
}

function mostrarError(mensaje) {
    document.getElementById('observaciones-contenido').innerHTML = 
        '<p class="error-mensaje">Error: ' + mensaje + '</p>';
}

function cerrarModalObservaciones() {
    document.getElementById('modal-ver-observaciones').style.display = 'none';
    document.getElementById('overlay-observaciones').style.display = 'none';
    document.body.style.overflow = 'auto'; // Restaurar scroll
}

// También agregar listener para cerrar con ESC
document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
        cerrarModalObservaciones();
    }
});

// Versión de prueba para verificar el funcionamiento del modal
function verObservacionesTest(id) {
    console.log('TEST - Mostrando observaciones para ID:', id);
    
    // Mostrar modal y overlay
    document.getElementById('modal-ver-observaciones').style.display = 'flex';
    document.getElementById('overlay-observaciones').style.display = 'block';
    
    // Deshabilitar scroll
    document.body.style.overflow = 'hidden';
    
    // Contenido de prueba
    setTimeout(() => {
        document.getElementById('observaciones-contenido').innerHTML = `
            <p><span class="observacion-meta">[23/04/2025 14:30 - Sistema]</span>Esta es una observación de prueba.</p>
            <p><span class="observacion-meta">[24/04/2025 09:15 - Admin]</span>Segunda observación para verificar funcionamiento.</p>
        `;
    }, 500);
}

// Agregar al final del archivo
document.addEventListener('DOMContentLoaded', function() {
    console.log('Configurando botones de observaciones');
    
    // Delegación de eventos para botones actuales y futuros
    document.body.addEventListener('click', function(e) {
        if (e.target.closest('.btn-ver-obs')) {
            const btn = e.target.closest('.btn-ver-obs');
            const id = btn.getAttribute('data-id');
            verObservaciones(id);
        }
    });
});



==============================================================================
ARCHIVO JS: tools\localtunnel-start.js
==============================================================================

// localtunnel-start.js - Versión mejorada con reintentos automáticos
const localtunnel = require('localtunnel');

// Configuración
const port = 80; // Puerto que deseas exponer (XAMPP)
const subdomain = 'conexion-main-xyz123'; // Subdominio base
const maxRetries = 20; // Máximo número de reintentos
let retryCount = 0;
let tunnel = null;

// Función principal con reintentos automáticos
async function startTunnel() {
  // Generar un subdominio único si hay reintentos
  const currentSubdomain = retryCount > 0 
    ? `${subdomain}-${retryCount}` 
    : subdomain;
  
  try {
    console.log(`Intento ${retryCount + 1}: Iniciando túnel en ${currentSubdomain}.loca.lt...`);
    
    tunnel = await localtunnel({ 
      port: port,
      subdomain: currentSubdomain
    });
    
    // Reiniciar contador de reintentos cuando hay éxito
    retryCount = 0;
    console.log(`✅ Túnel iniciado exitosamente en: ${tunnel.url}`);
    console.log(`Fecha y hora: ${new Date().toLocaleString()}`);
    
    // Manejar evento de cierre
    tunnel.on('close', () => {
      console.log('⚠️ Túnel cerrado inesperadamente');
      handleReconnect();
    });
    
    // Manejar errores en el túnel establecido
    tunnel.on('error', (err) => {
      console.error('❌ Error en el túnel:', err);
      handleReconnect();
    });
    
  } catch (error) {
    console.error(`❌ Error al iniciar túnel ${currentSubdomain}:`, error.message);
    handleReconnect();
  }
}

// Manejar reconexiones con retroceso exponencial
function handleReconnect() {
  if (tunnel) {
    try { tunnel.close(); } catch (e) { /* Ignorar errores al cerrar */ }
    tunnel = null;
  }
  
  retryCount++;
  const delay = Math.min(30000, 1000 * Math.pow(1.5, retryCount)); // Retroceso exponencial
  
  if (retryCount <= maxRetries) {
    console.log(`🔄 Reintento ${retryCount}/${maxRetries} en ${delay/1000} segundos...`);
    setTimeout(startTunnel, delay);
  } else {
    console.error(`❌ Se alcanzó el máximo de reintentos (${maxRetries}). Reiniciando proceso...`);
    setTimeout(() => process.exit(1), 1000); // Forzar a PM2 a reiniciar completamente
  }
}

// Manejo de señales del sistema
process.on('SIGINT', () => {
  console.log('Cerrando túnel por señal SIGINT...');
  if (tunnel) tunnel.close();
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('Cerrando túnel por señal SIGTERM...');
  if (tunnel) tunnel.close();
  process.exit(0);
});

// Iniciar el túnel
console.log(`🚀 Iniciando servicio de túnel para puerto ${port}...`);
startTunnel();


==============================================================================
ARCHIVO JS: tools\ngrok-start.js
==============================================================================

const ngrok = require('ngrok');
const fs = require('fs');
const path = require('path');

// Configuración
const PORT = 80;
let url = null;
let connectAttempts = 0;
const MAX_ATTEMPTS = 5;

async function startNgrok() {
  try {
    console.log(`🚀 Iniciando ngrok en puerto ${PORT}...`);
    
    // Intentar conectar
    url = await ngrok.connect({
      addr: PORT,
      onStatusChange: (status) => {
        console.log(`Estado del túnel: ${status}`);
      },
      onLogEvent: (data) => {
        if (data.includes('error') || data.includes('failed')) {
          console.error(`❌ Error ngrok: ${data}`);
        }
      }
    });
    
    console.log(`✅ Túnel ngrok iniciado exitosamente`);
    console.log(`📌 URL pública: ${url}`);
    console.log(`📅 Fecha y hora: ${new Date().toLocaleString()}`);
    
    // Guardar la URL para uso futuro
    const configData = {
      url: url,
      timestamp: new Date().toISOString(),
      port: PORT
    };
    
    fs.writeFileSync(
      path.join(__dirname, 'ngrok-url.json'),
      JSON.stringify(configData, null, 2)
    );
    
    // Reiniciar contador de intentos
    connectAttempts = 0;
    
  } catch (error) {
    console.error(`❌ Error al iniciar ngrok: ${error.message}`);
    
    // Manejar reintentos
    connectAttempts++;
    if (connectAttempts < MAX_ATTEMPTS) {
      const delay = Math.min(30000, 1000 * Math.pow(2, connectAttempts));
      console.log(`🔄 Reintento ${connectAttempts}/${MAX_ATTEMPTS} en ${delay/1000} segundos...`);
      setTimeout(startNgrok, delay);
    } else {
      console.error(`❌ Se alcanzó el máximo de reintentos. Reinicia manualmente.`);
      process.exit(1); // Para que PM2 lo reinicie
    }
  }
}

// Manejo de señales del sistema
process.on('SIGINT', cleanup);
process.on('SIGTERM', cleanup);

async function cleanup() {
  console.log('Cerrando túnel ngrok...');
  if (url) {
    try {
      await ngrok.disconnect(url);
      console.log('Túnel desconectado correctamente');
    } catch (e) {
      console.error('Error al desconectar túnel:', e);
    }
  }
  
  try {
    await ngrok.kill();
    console.log('Proceso ngrok terminado');
  } catch (e) {
    console.error('Error al terminar ngrok:', e);
  }
  
  process.exit(0);
}

// Iniciar ngrok
startNgrok();


