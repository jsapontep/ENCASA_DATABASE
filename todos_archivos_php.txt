
=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\api_proxy.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\api_proxy.php

// Configuración básica y manejo de errores
ini_set('display_errors', 1);
error_reporting(E_ALL);

// Habilitar CORS en todas las respuestas
header("Access-Control-Allow-Origin: *");
header("Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS");
header("Access-Control-Allow-Headers: Content-Type, Authorization, X-Requested-With");
header("Access-Control-Allow-Credentials: true");

// Si es una solicitud OPTIONS (preflight), responder inmediatamente
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    http_response_code(200);
    exit;
}

// Obtener la ruta solicitada desde el parámetro 'path'
$path = isset($_GET['path']) ? $_GET['path'] : '';

// URL base de tu API local
$target_base = 'http://localhost/ENCASA_DATABASE/';

// Construir la URL completa
$target_url = $target_base . $path;

// Inicializar cURL
$ch = curl_init($target_url);

// Configurar opciones de cURL
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);

// Transferir el método HTTP
curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $_SERVER['REQUEST_METHOD']);

// Transferir las cabeceras
$headers = [];
foreach (getallheaders() as $name => $value) {
    if (!in_array(strtolower($name), ['host', 'origin', 'referer'])) {
        $headers[] = "$name: $value";
    }
}
if (!empty($headers)) {
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
}

// Para solicitudes POST/PUT, transferir el cuerpo
if ($_SERVER['REQUEST_METHOD'] === 'POST' || $_SERVER['REQUEST_METHOD'] === 'PUT') {
    $input = file_get_contents('php://input');
    if (!empty($input)) {
        curl_setopt($ch, CURLOPT_POSTFIELDS, $input);
    } else if (!empty($_POST)) {
        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($_POST));
    }
}

// Ejecutar la solicitud
$response = curl_exec($ch);
$http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);

// Establecer el código de estado HTTP
http_response_code($http_code);

// Cerrar la conexión cURL
curl_close($ch);

// Devolver la respuesta
echo $response;


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\check-progress.php
=============================================================

<?php

// Script para verificar el progreso del proyecto

echo "<h1>Verificación de Progreso del Sistema</h1>";

// Verificar componentes críticos
$components = [
    // Etapa 1: Configuración del Entorno y Base de Datos
    'Conexión BD' => function() {
        return class_exists('PDO');
    },
    'Estructura BD' => function() {
        // Verificar si podemos conectar y si existe al menos una tabla clave
        try {
            if (!class_exists('PDO')) return false;
            $db = new PDO('mysql:host=localhost;dbname=IglesiaEnCasa', 'root', '');
            $stmt = $db->query("SHOW TABLES LIKE 'InformacionGeneral'");
            return $stmt->rowCount() > 0;
        } catch (Exception $e) {
            return false;
        }
    },
    'Entorno Configurado' => function() {
        return file_exists('app/config/config.php');
    },
    
    // Etapa 2: Núcleo MVC y Enrutamiento
    'Router' => function() {
        return file_exists('app/helpers/Router.php');
    },
    'Modelo Base' => function() {
        return file_exists('app/models/Model.php') || file_exists('app/models/BaseModel.php');
    },
    'Controlador Base' => function() {
        return file_exists('app/controllers/Controller.php') || file_exists('app/core/Controller.php');
    },
    'Sistema de Vistas' => function() {
        return is_dir('app/views') && file_exists('app/views/layouts/default.php');
    },
    
    // Etapa 3: Sistema de Autenticación y Autorización
    'Autenticación' => function() {
        return file_exists('app/controllers/AuthController.php');
    },
    'Modelo Usuario' => function() {
        return file_exists('app/models/Usuario.php');
    },
    'Login Funcional' => function() {
        return file_exists('app/views/auth/login.php');
    },
    'Middleware Auth' => function() {
        return file_exists('app/middleware/Auth.php') || file_exists('app/middleware/AuthMiddleware.php');
    },
    'Sistema de Roles' => function() {
        return file_exists('app/models/Rol.php') || file_exists('app/models/Role.php');
    },
    
    // Etapa 4: Modelos Base y CRUD de Miembros
    'Modelo Miembro' => function() {
        return file_exists('app/models/Miembro.php') || file_exists('app/models/InformacionGeneral.php');
    },
    'Controlador Miembros' => function() {
        return file_exists('app/controllers/MiembroController.php') || file_exists('app/controllers/MiembrosController.php');
    },
    'Vista Listado Miembros' => function() {
        return file_exists('app/views/miembros/index.php');
    },
    'Vista Formulario Miembro' => function() {
        return file_exists('app/views/miembros/create.php') || file_exists('app/views/miembros/form.php');
    },
    
    // Etapa 5: Ministerios, Roles y Tareas
    'Modelo Ministerio' => function() {
        return file_exists('app/models/Ministerio.php');
    },
    'Modelo Tarea' => function() {
        return file_exists('app/models/Tarea.php');
    },
    'Controlador Ministerios' => function() {
        return file_exists('app/controllers/MinisterioController.php') || file_exists('app/controllers/MinisteriosController.php');
    },
    
    // Etapa 6: Vistas y UI/UX
    'Layout Principal' => function() {
        return file_exists('app/views/layouts/default.php');
    },
    'Layout Auth' => function() {
        return file_exists('app/views/layouts/auth.php');
    },
    'Config Tailwind' => function() {
        return file_exists('tailwind.config.js');
    },
    'CSS Compilado' => function() {
        return file_exists('public/css/main.css');
    },
    'Dashboard' => function() {
        return file_exists('app/views/dashboard/index.php');
    },
    
    // Etapa 7: Integración, Pruebas y Optimización
    'Sistema de Logs' => function() {
        return file_exists('app/helpers/Logger.php');
    },
    'Visualizador de Logs' => function() {
        return file_exists('app/controllers/LogController.php') && file_exists('app/views/admin/logs.php');
    },
    'Test Unitarios' => function() {
        return is_dir('tests') && file_exists('phpunit.xml');
    },
    'Sistema Cache' => function() {
        return file_exists('app/helpers/Cache.php') || file_exists('app/services/CacheService.php');
    },
    
    // Etapa 8: Despliegue y Documentación
    'Manual Usuario' => function() {
        return file_exists('Documentacion/manual_usuario.md') || file_exists('Documentacion/manual_usuario.pdf');
    },
    'Documentación API' => function() {
        return file_exists('Documentacion/api.md') || file_exists('api/index.html');
    },
    'Script Despliegue' => function() {
        return file_exists('deploy.sh') || file_exists('deploy.php');
    },
    
    // Añadir más verificaciones para cada etapa según sea necesario
];

// Mostrar resultados
echo "<table border='1' style='border-collapse:collapse'>";
echo "<tr><th>Componente</th><th>Estado</th></tr>";

$completedCount = 0;
foreach ($components as $name => $checkFn) {
    $status = $checkFn() ? "✅ Implementado" : "❌ Pendiente";
    $style = $checkFn() ? "background-color: #d4edda;" : "background-color: #f8d7da;";
    
    echo "<tr style='$style'><td>$name</td><td>$status</td></tr>";
    
    if ($checkFn()) $completedCount++;
}

$percent = round(($completedCount / count($components)) * 100);
echo "</table>";
echo "<p>Progreso general: <b>$percent%</b></p>";

// Generar reporte de progreso por etapas
echo "<h2>Progreso por Etapas</h2>";
$etapas = [
    'Etapa 1: Config y BD' => ['Conexión BD', 'Estructura BD', 'Entorno Configurado'],
    'Etapa 2: Núcleo MVC' => ['Router', 'Modelo Base', 'Controlador Base', 'Sistema de Vistas'],
    'Etapa 3: Autenticación' => ['Autenticación', 'Modelo Usuario', 'Login Funcional', 'Middleware Auth', 'Sistema de Roles'],
    'Etapa 4: CRUD Miembros' => ['Modelo Miembro', 'Controlador Miembros', 'Vista Listado Miembros', 'Vista Formulario Miembro'],
    'Etapa 5: Ministerios/Tareas' => ['Modelo Ministerio', 'Modelo Tarea', 'Controlador Ministerios'],
    'Etapa 6: Vistas y UI/UX' => ['Layout Principal', 'Layout Auth', 'Config Tailwind', 'CSS Compilado', 'Dashboard'],
    'Etapa 7: Integración/Pruebas' => ['Sistema de Logs', 'Visualizador de Logs', 'Test Unitarios', 'Sistema Cache'],
    'Etapa 8: Despliegue/Docs' => ['Manual Usuario', 'Documentación API', 'Script Despliegue']
];

echo "<table border='1' style='border-collapse:collapse'>";
echo "<tr><th>Etapa</th><th>Componentes Completados</th><th>Progreso</th></tr>";

foreach ($etapas as $etapa => $componentesEtapa) {
    $completados = 0;
    $total = count($componentesEtapa);
    
    foreach ($componentesEtapa as $componente) {
        if (isset($components[$componente]) && $components[$componente]()) {
            $completados++;
        }
    }
    
    $porcentajeEtapa = $total > 0 ? round(($completados / $total) * 100) : 0;
    $styleEtapa = $porcentajeEtapa == 100 ? "background-color: #d4edda;" : 
                 ($porcentajeEtapa > 0 ? "background-color: #fff3cd;" : "background-color: #f8d7da;");
    
    echo "<tr style='$styleEtapa'><td>$etapa</td><td>$completados / $total</td><td>$porcentajeEtapa%</td></tr>";
}

echo "</table>";

// Mostrar gráfico visual de progreso (opcional)
echo "<h2>Gráfico de Progreso</h2>";
echo "<div style='width:100%; background-color:#eee; height:30px; border-radius:5px; overflow:hidden;'>";
echo "<div style='width:$percent%; background-color:#4CAF50; height:30px; text-align:center; line-height:30px; color:white;'>$percent%</div>";
echo "</div>";

// Mostrar próximos pasos
echo "<h2>Próximos Pasos Recomendados</h2>";
echo "<ul>";

// Analizar componentes faltantes prioritarios
$prioridadAlta = [];

// Revisar etapa 3 - Autenticación
if (!$components['Sistema de Roles']()) {
    $prioridadAlta[] = "Completar implementación del sistema de roles y permisos";
}

// Revisar etapa 4 - CRUD Miembros
if (!$components['Controlador Miembros']()) {
    $prioridadAlta[] = "Implementar controlador de miembros con operaciones CRUD básicas";
}

// Revisar nuevos componentes
if (!$components['Sistema de Logs']()) {
    $prioridadAlta[] = "Implementar sistema de logs para monitoreo de errores";
}

if (!$components['Config Tailwind']()) {
    $prioridadAlta[] = "Configurar Tailwind CSS para la interfaz de usuario";
}

foreach ($prioridadAlta as $paso) {
    echo "<li>$paso</li>";
}

echo "</ul>";
?>


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\check_miembro.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\check_miembro.php

require_once __DIR__ . '/app/config/config.php';
require_once __DIR__ . '/app/config/database.php';
require_once __DIR__ . '/app/models/Model.php';
require_once __DIR__ . '/app/models/Miembro.php';

$id = isset($_GET['id']) ? (int)$_GET['id'] : 2;
$model = new \App\Models\Miembro();
$miembro = $model->getFullProfile($id);

echo "<h1>Verificación del modelo con ID: {$id}</h1>";
echo "<pre>";
print_r($miembro);
echo "</pre>";
echo "<p><a href='miembros/{$id}'>Ver página de perfil</a></p>";


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\direct_access.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\direct_access.php

// Este archivo permite acceder directamente a la aplicación sin redirecciones
// Configuración básica sin redirecciones

// Definir constantes del sistema
define('BASE_PATH', __DIR__);
define('APP_PATH', BASE_PATH . '/app');
define('CONTROLLER_PATH', APP_PATH . '/controllers');
define('MODEL_PATH', APP_PATH . '/models');
define('VIEW_PATH', APP_PATH . '/views');
define('CONFIG_PATH', APP_PATH . '/config');

// Detectar entorno pero SIN redirecciones
$current_host = $_SERVER['HTTP_HOST'] ?? '';
$is_tunnel = strpos($current_host, 'localto.net') !== false;

// Forzar configuración sin importar el protocolo actual
$protocol = isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? 'https://' : 'http://';
define('APP_URL', $protocol . $current_host . '/encasa_database');

// Cargar configuración
require_once CONFIG_PATH . '/config.php';
require_once CONFIG_PATH . '/database.php';
require_once CONFIG_PATH . '/autoload.php';

// Iniciar sesión con configuración básica
ini_set('session.cookie_httponly', 1);
session_start();

// Mostrar formulario de login directamente sin usar el sistema de rutas
?>
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Acceso Directo - Iglesia En Casa</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card shadow">
                    <div class="card-header bg-primary text-white">
                        <h2 class="my-2">Acceso Directo - Iniciar Sesión</h2>
                    </div>
                    <div class="card-body">
                        <form action="<?= APP_URL ?>/direct_login.php" method="post" autocomplete="on">
                            <div class="mb-3">
                                <label for="email_or_username" class="form-label">Email o nombre de usuario</label>
                                <input type="text" class="form-control" id="email_or_username" name="email_or_username" required>
                            </div>
                            
                            <div class="mb-3">
                                <label for="password" class="form-label">Contraseña</label>
                                <input type="password" class="form-control" id="password" name="password" required>
                            </div>
                            
                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary">Iniciar Sesión</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
</html>


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\direct_login.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\direct_login.php

// Este archivo procesa el login directamente sin usar el sistema de rutas
// Configuración básica
define('BASE_PATH', __DIR__);
define('APP_PATH', BASE_PATH . '/app');
define('CONFIG_PATH', APP_PATH . '/config');
define('MODEL_PATH', APP_PATH . '/models');
define('VIEW_PATH', APP_PATH . '/views');

// Cargar solo lo necesario
require_once CONFIG_PATH . '/database.php';
require_once APP_PATH . '/models/User.php';

// Iniciar sesión 
session_start();

// Procesar el formulario
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $email_or_username = $_POST['email_or_username'] ?? '';
    $password = $_POST['password'] ?? '';
    
    // Validación básica
    if (empty($email_or_username) || empty($password)) {
        die("Por favor completa todos los campos");
    }
    
    try {
        // Conectar a la BD
        $db = new PDO(
            'mysql:host=' . DB_HOST . ';dbname=' . DB_NAME . ';charset=utf8',
            DB_USER,
            DB_PASS
        );
        $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        
        // Consulta para verificar credenciales
        $stmt = $db->prepare(
            "SELECT * FROM users WHERE (email = :credential OR username = :credential) LIMIT 1"
        );
        $stmt->execute(['credential' => $email_or_username]);
        $user = $stmt->fetch(PDO::FETCH_ASSOC);
        
        if ($user && password_verify($password, $user['password'])) {
            // Login exitoso
            $_SESSION['user_id'] = $user['id'];
            $_SESSION['user_name'] = $user['username'];
            $_SESSION['user_role'] = $user['role'];
            
            // Redirigir a la página de inicio (sin sistema de rutas)
            header("Location: home_direct.php");
            exit;
        } else {
            die("Credenciales incorrectas. <a href='direct_access.php'>Volver a intentar</a>");
        }
        
    } catch (PDOException $e) {
        die("Error de base de datos: " . $e->getMessage());
    }
}

// Mostrar la vista de login directamente
echo "<!DOCTYPE html>
<html lang='es'>
<head>
    <meta charset='UTF-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <title>Iniciar Sesión - Acceso Directo</title>
    <link href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css' rel='stylesheet'>
</head>
<body class='bg-light'>
    <div class='container py-5'>
        <div class='row justify-content-center'>
            <div class='col-md-6'>
                <div class='card shadow'>
                    <div class='card-header bg-primary text-white'>
                        <h2 class='my-2'>Iniciar Sesión (Acceso Directo)</h2>
                    </div>
                    <div class='card-body'>";

// Incluir el formulario de login
if (file_exists(VIEW_PATH . '/auth/login.php')) {
    include_once VIEW_PATH . '/auth/login.php';
} else {
    echo "<div class='alert alert-danger'>No se encontró el archivo de vista login.php</div>";
    echo "<p>Ruta buscada: " . VIEW_PATH . "/auth/login.php</p>";
}

echo "        </div>
                </div>
            </div>
        </div>
    </div>
    <script src='https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js'></script>
</body>
</html>";
?>


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\direct_test.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\direct_test.php

// Script para probar la extracción directa de un miembro
require_once __DIR__ . '/app/config/config.php';
require_once __DIR__ . '/app/config/database.php';

echo "<h1>Prueba directa de acceso a la base de datos</h1>";

// ID a verificar
$id = isset($_GET['id']) ? (int)$_GET['id'] : 2;

echo "<p>Buscando miembro con ID: {$id}</p>";

try {
    // Conectar directamente a la BD
    $db = Database::getInstance()->getConnection();
    
    // Consulta SQL directa
    $sql = "SELECT * FROM InformacionGeneral WHERE id = ?";
    $stmt = $db->prepare($sql);
    $stmt->execute([$id]);
    $miembro = $stmt->fetch(\PDO::FETCH_ASSOC);
    
    if ($miembro) {
        echo "<h2>Datos básicos encontrados:</h2>";
        echo "<pre>";
        print_r($miembro);
        echo "</pre>";
        
        // Recuperar datos relacionados
        $tablas = ['Contacto', 'EstudiosTrabajo', 'Tallas', 'CarreraBiblica'];
        
        foreach ($tablas as $tabla) {
            $sql = "SELECT * FROM {$tabla} WHERE miembro_id = ?";
            $stmt = $db->prepare($sql);
            $stmt->execute([$id]);
            $datos = $stmt->fetch(\PDO::FETCH_ASSOC);
            
            echo "<h3>Datos de {$tabla}:</h3>";
            echo "<pre>";
            print_r($datos ?: "No hay datos");
            echo "</pre>";
        }
        
        // Link para ver la visualización normal
        echo "<p><a href='miembros/{$id}?force=true' target='_blank'>Ver perfil en sistema</a></p>";
    } else {
        echo "<p style='color:red'>No se encontró ningún miembro con ID {$id}</p>";
    }
} catch (Exception $e) {
    echo "<p style='color:red'>Error: " . $e->getMessage() . "</p>";
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\home_direct.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\home_direct.php

// Configuración básica
define('BASE_PATH', __DIR__);
define('APP_PATH', BASE_PATH . '/app');

// Iniciar sesión
session_start();

// Verificar autenticación
if (!isset($_SESSION['user_id'])) {
    header("Location: direct_access.php");
    exit;
}

// Datos básicos del usuario actual
$username = htmlspecialchars($_SESSION['user_name']);
$role = htmlspecialchars($_SESSION['user_role']);
?>
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Página Principal - Iglesia En Casa</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="#">Iglesia En Casa</a>
            <div class="collapse navbar-collapse">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                            <?= $username ?>
                        </a>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="logout_direct.php">Cerrar Sesión</a></li>
                        </ul>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        <div class="jumbotron">
            <h1>Bienvenido, <?= $username ?></h1>
            <p>Has iniciado sesión correctamente en el modo de acceso directo.</p>
            <p>Tu rol es: <?= $role ?></p>
            
            <div class="alert alert-info mt-4">
                <p><strong>Nota:</strong> Estás usando una versión simplificada de la aplicación para evitar el problema de redirecciones infinitas.</p>
                <p>Cuando el problema se resuelva, podrás volver a usar la aplicación completa.</p>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\index.php
=============================================================

<?php
// Al inicio del archivo index.php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// Definir constantes del sistema
define('BASE_PATH', __DIR__);
define('APP_PATH', BASE_PATH . '/app');
define('CONTROLLER_PATH', APP_PATH . '/controllers');
define('MODEL_PATH', APP_PATH . '/models');
define('VIEW_PATH', APP_PATH . '/views');
define('CONFIG_PATH', APP_PATH . '/config');

// IMPORTANTE: Detectar ngrok ANTES de cargar config.php
$protocol = isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? 'https://' : 'http://';
$host = $_SERVER['HTTP_HOST'] ?? 'localhost';

// Detectar si estamos usando ngrok u otro túnel
$is_tunnel = strpos($host, 'ngrok-free.app') !== false || 
             strpos($host, 'ngrok.io') !== false ||
             strpos($host, 'localto.net') !== false || 
             strpos($host, 'loca.lt') !== false;

// Configurar APP_URL según el entorno
if ($is_tunnel) {
    define('APP_URL', $protocol . $host . '/ENCASA_DATABASE');
    define('APP_ENV', 'tunnel');
} else {
    define('APP_URL', 'http://localhost/ENCASA_DATABASE');
    define('APP_ENV', 'development');
}

// IMPORTANTE: Configurar sesiones ANTES de iniciarla
// Configuración de sesiones
ini_set('session.cookie_httponly', 1);
ini_set('session.use_only_cookies', 1);
ini_set('session.use_strict_mode', 1);
ini_set('session.cookie_samesite', 'Lax');

// NO forzar cookies seguras para ngrok - esto causa redirecciones infinitas
if (APP_ENV === 'production') {
    ini_set('session.cookie_secure', 1);
} else {
    ini_set('session.cookie_secure', 0);
}

// Ahora iniciar sesión DESPUÉS de configurarla
session_start();

// Cargar helpers antes de configuración
if (file_exists(APP_PATH . '/helpers/functions.php')) {
    require_once APP_PATH . '/helpers/functions.php';
}

// Cargar configuración
require_once CONFIG_PATH . '/config.php';
require_once CONFIG_PATH . '/database.php';
require_once CONFIG_PATH . '/autoload.php';
require_once CONFIG_PATH . '/mail_autoload.php';

// Cargar y ejecutar el router
$router = require_once CONFIG_PATH . '/routes.php';
try {
    $router->dispatch();
} catch (Exception $e) {
    echo '<pre>';
    echo 'Error: ' . $e->getMessage();
    echo '<br>En archivo: ' . $e->getFile() . ' línea: ' . $e->getLine();
    echo '<br>Stack trace:<br>';
    echo $e->getTraceAsString();
    echo '</pre>';
    die();
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\login_test.php
=============================================================

<?php

// Archivo para probar la seguridad del formulario de login
echo "<!DOCTYPE html>
<html>
<head>
    <meta charset='UTF-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <meta http-equiv='Content-Security-Policy' content='upgrade-insecure-requests'>
    <meta name='referrer' content='origin'>
    <title>Prueba de Login Seguro</title>
    <link href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css' rel='stylesheet'>
</head>
<body>
    <div class='container mt-5'>
        <div class='row justify-content-center'>
            <div class='col-md-6'>
                <div class='card'>
                    <div class='card-header bg-primary text-white'>
                        <h3>Prueba de Login Seguro</h3>
                    </div>
                    <div class='card-body'>
                        <form action='auth/login' method='post' autocomplete='on'>
                            <input type='hidden' name='secure_form' value='1'>
                            
                            <div class='mb-3'>
                                <label for='email_or_username' class='form-label'>Email o nombre de usuario</label>
                                <input type='text' class='form-control' id='email_or_username' 
                                       name='email_or_username' autocomplete='username' required>
                            </div>
                            
                            <div class='mb-3'>
                                <label for='password' class='form-label'>Contraseña</label>
                                <input type='password' class='form-control' id='password' 
                                       name='password' autocomplete='current-password' required>
                            </div>
                            
                            <div class='d-grid'>
                                <button type='submit' class='btn btn-primary'>Iniciar Sesión</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
</html>";
?>


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\logout_direct.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\logout_direct.php

// Iniciar sesión
session_start();

// Destruir la sesión
$_SESSION = array();
session_destroy();

// Redirigir a la página de login directo
header("Location: direct_access.php");
exit;


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\ngrok_test.php
=============================================================

<?php
// NO incluir index.php completo

// Definir constantes básicas
define('BASE_PATH', __DIR__);
define('APP_PATH', BASE_PATH . '/app');

// Detectar entorno
$protocol = isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? 'https://' : 'http://';
$host = $_SERVER['HTTP_HOST'] ?? 'localhost';
$is_ngrok = strpos($host, 'ngrok-free.app') !== false || strpos($host, 'ngrok.io') !== false;

// Crear una versión simplificada de url() para pruebas
function test_url($path = '') {
    global $protocol, $host, $is_ngrok;
    
    if ($is_ngrok) {
        $baseUrl = $protocol . $host . '/ENCASA_DATABASE';
    } else {
        $baseUrl = 'http://localhost/ENCASA_DATABASE';
    }
    
    $baseUrl = rtrim($baseUrl, '/');
    $path = ltrim($path, '/');
    
    return $baseUrl . ($path ? '/' . $path : '');
}

echo "<!DOCTYPE html>
<html>
<head>
    <title>Prueba de ngrok</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }
        .card { border: 1px solid #ddd; padding: 15px; margin-bottom: 20px; border-radius: 4px; }
        pre { background: #f5f5f5; padding: 10px; border-radius: 4px; }
    </style>
</head>
<body>
    <h1>Prueba de configuración de ngrok</h1>
    
    <div class='card'>
        <h2>Información básica</h2>
        <p><strong>Host:</strong> {$host}</p>
        <p><strong>Protocolo:</strong> {$protocol}</p>
        <p><strong>¿Es ngrok?:</strong> " . ($is_ngrok ? 'SÍ' : 'NO') . "</p>
        <p><strong>URL base generada:</strong> " . test_url() . "</p>
    </div>
    
    <div class='card'>
        <h2>Enlaces de prueba:</h2>
        <ul>
            <li><a href='" . test_url('login') . "'>Ir a login</a></li>
            <li><a href='" . test_url('miembros') . "'>Ir a miembros</a></li>
        </ul>
    </div>
</body>
</html>";
?>


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\proxy.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\proxy.php

// Configuración básica y manejo de errores
ini_set('display_errors', 1);
error_reporting(E_ALL);

// Orígenes permitidos
$allowed_origins = [
    'http://localhost',
    'https://localhost',
    'https://uvca8jwlr.localto.net',
    'http://uvca8jwlr.localto.net',
    'http://127.0.0.1'
];

// Capturar el origen de la solicitud
$origin = isset($_SERVER['HTTP_ORIGIN']) ? $_SERVER['HTTP_ORIGIN'] : '';

// Configurar cabeceras CORS
if (in_array($origin, $allowed_origins)) {
    header("Access-Control-Allow-Origin: $origin");
} else {
    header("Access-Control-Allow-Origin: *");
}

header("Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS");
header("Access-Control-Allow-Headers: Content-Type, Authorization, X-Requested-With");
header("Access-Control-Allow-Credentials: true");

// Si es una solicitud OPTIONS (preflight), responder inmediatamente
if ($_SERVER['REQUEST_METHOD'] == 'OPTIONS') {
    header("HTTP/1.1 200 OK");
    exit;
}

// Construir la URL de destino
// Esta será la URL interna donde se encuentra realmente tu aplicación
$target_base = 'http://localhost/ENCASA_DATABASE';
$request_uri = $_SERVER['REQUEST_URI'];

// Eliminar la parte del proxy de la URI si existe
$request_path = str_replace('/proxy.php', '', $request_uri);

// URL final a la que se enviará la solicitud
$target_url = $target_base . $request_path;

// Crear contexto para la solicitud con todos los parámetros y headers originales
$context_options = [
    'http' => [
        'method' => $_SERVER['REQUEST_METHOD']
    ]
];

// Transferir headers de la solicitud original
$headers = [];
foreach (getallheaders() as $name => $value) {
    // No transferir headers relacionados con CORS o host
    if (!in_array(strtolower($name), ['host', 'origin', 'referer'])) {
        $headers[] = "$name: $value";
    }
}

// Si hay headers, añadirlos al contexto
if (!empty($headers)) {
    $context_options['http']['header'] = implode("\r\n", $headers);
}

// Para solicitudes POST/PUT, transferir el cuerpo de la solicitud
$input = file_get_contents('php://input');
if (!empty($input)) {
    $context_options['http']['content'] = $input;
}

// Crear el contexto de flujo
$context = stream_context_create($context_options);

// Enviar la solicitud al servidor interno y capturar la respuesta
try {
    $response = file_get_contents($target_url, false, $context);
    
    // Transferir todos los headers de respuesta
    foreach ($http_response_header as $header) {
        // No transferir headers relacionados con CORS
        if (!strpos(strtolower($header), 'access-control')) {
            header($header);
        }
    }
    
    // Devolver el contenido de la respuesta
    echo $response;
} catch (Exception $e) {
    // En caso de error
    header("HTTP/1.1 500 Internal Server Error");
    echo json_encode([
        'error' => true,
        'message' => 'Proxy error: ' . $e->getMessage(),
        'target_url' => $target_url
    ]);
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\redirect_debug.php
=============================================================

<?php

session_start();
echo "<h1>Diagnóstico de redirecciones</h1>";

echo "<h2>Headers de respuesta:</h2>";
echo "<pre>";
var_dump(headers_list());
echo "</pre>";

echo "<h2>Variables de sesión:</h2>";
echo "<pre>";
var_dump($_SESSION);
echo "</pre>";

echo "<h2>Cookies:</h2>";
echo "<pre>";
var_dump($_COOKIE);
echo "</pre>";

echo "<h2>Variables de servidor:</h2>";
echo "<pre>";
$serverVars = [
    'HTTP_HOST', 'HTTPS', 'REQUEST_URI', 'SCRIPT_NAME'
];
foreach ($serverVars as $var) {
    echo "$var: " . ($_SERVER[$var] ?? 'No definido') . "\n";
}
echo "</pre>";
?>


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\rewrite_test.php
=============================================================

<?php

echo "<h1>Prueba de mod_rewrite</h1>";

if (function_exists('apache_get_modules')) {
    $modules = apache_get_modules();
    echo "<p>mod_rewrite está " . (in_array('mod_rewrite', $modules) ? "habilitado" : "deshabilitado") . "</p>";
} else {
    echo "<p>No se puede determinar si mod_rewrite está habilitado en este servidor.</p>";
}

echo "<p>Verificación de .htaccess: ";
$htaccess_path = __DIR__ . '/.htaccess';
if (file_exists($htaccess_path)) {
    echo "El archivo .htaccess existe ✓</p>";
    echo "<pre>" . htmlspecialchars(file_get_contents($htaccess_path)) . "</pre>";
} else {
    echo "El archivo .htaccess NO existe ✗</p>";
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\route.debug.php
=============================================================

<?php


echo "<h1>Diagnóstico de rutas</h1>";

// Analizar URL actual
$requestUri = $_SERVER['REQUEST_URI'] ?? 'No disponible';
$scriptName = $_SERVER['SCRIPT_NAME'] ?? 'No disponible';
$base = str_replace('/index.php', '', $scriptName);
$url = str_replace($base, '', $requestUri);
$url = ltrim($url, '/');
$url = explode('?', $url)[0];

echo "<h2>Información de la URL actual:</h2>";
echo "<ul>";
echo "<li><strong>REQUEST_URI:</strong> " . htmlspecialchars($requestUri) . "</li>";
echo "<li><strong>SCRIPT_NAME:</strong> " . htmlspecialchars($scriptName) . "</li>";
echo "<li><strong>Base detectada:</strong> " . htmlspecialchars($base) . "</li>";
echo "<li><strong>URL procesada:</strong> " . htmlspecialchars($url) . "</li>";
echo "</ul>";

// Verificar carga de archivos críticos
echo "<h2>Verificación de archivos críticos:</h2>";
echo "<ul>";
$filesRequired = [
    'index.php' => __DIR__ . '/index.php',
    'config.php' => __DIR__ . '/app/config/config.php',
    'routes.php' => __DIR__ . '/app/config/routes.php',
    'functions.php' => __DIR__ . '/app/helpers/functions.php',
    'Router.php' => __DIR__ . '/app/helpers/Router.php',
    '.htaccess' => __DIR__ . '/.htaccess',
];

foreach ($filesRequired as $name => $path) {
    echo "<li>";
    if (file_exists($path)) {
        echo "✅ <strong>$name:</strong> Existe";
    } else {
        echo "❌ <strong>$name:</strong> NO existe";
    }
    echo "</li>";
}
echo "</ul>";
?>


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\test.php
=============================================================

<?php

echo "<h1>Prueba de ngrok</h1>";
echo "<p>Si puedes ver esta página, ngrok está funcionando correctamente con tu proyecto.</p>";
echo "<p>Fecha y hora actual: " . date('Y-m-d H:i:s') . "</p>";
?>


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\test_logs.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\test_logs.php

// Script para probar la configuración de logs
echo "<h1>Diagnóstico de logs de PHP</h1>";

// Mostrar configuración actual de error_log
echo "<h2>Configuración de logs</h2>";
echo "<p>error_log configurado en: " . ini_get('error_log') . "</p>";
echo "<p>error_reporting: " . ini_get('error_reporting') . "</p>";
echo "<p>display_errors: " . ini_get('display_errors') . "</p>";
echo "<p>log_errors: " . ini_get('log_errors') . "</p>";

// Intentar crear un directorio de logs si no existe
$logDir = "C:/xampp/php/logs";
if (!file_exists($logDir)) {
    echo "<p>Directorio de logs no existe. Intentando crear...</p>";
    mkdir($logDir, 0777, true);
    echo "<p>Directorio creado: " . (file_exists($logDir) ? "SÍ" : "NO") . "</p>";
}

// Escribir en el log para probarlo
error_log("Prueba de escritura en log desde test_logs.php");
echo "<p>Se ha intentado escribir en el log. Verifica si el archivo se ha creado.</p>";

// Intentar con una ruta alternativa
$altLogPath = __DIR__ . '/debug.log';
error_log("Prueba de escritura en log alternativo", 3, $altLogPath);
echo "<p>Log alternativo creado en: {$altLogPath}</p>";

// Mostrar los archivos en el directorio de logs
echo "<h2>Archivos en el directorio de logs</h2>";
echo "<pre>";
if (file_exists($logDir)) {
    print_r(scandir($logDir));
} else {
    echo "El directorio de logs no existe.";
}
echo "</pre>";


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\test_minimal.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\test_minimal.php

// NO incluir nada más, sin autoload, sin configuraciones
// Mostrar información básica del servidor
?>
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Test Mínimo</title>
    <style>
        body { font-family: Arial, sans-serif; padding: 20px; }
        .info { background: #f0f0f0; padding: 20px; border-radius: 5px; }
    </style>
</head>
<body>
    <h1>Prueba mínima - Sin redirecciones</h1>
    <div class="info">
        <p><strong>Servidor:</strong> <?php echo $_SERVER['SERVER_NAME']; ?></p>
        <p><strong>URL actual:</strong> <?php echo $_SERVER['REQUEST_URI']; ?></p>
        <p><strong>Protocolo:</strong> <?php echo isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? 'HTTPS' : 'HTTP'; ?></p>
        <p><strong>Hora del servidor:</strong> <?php echo date('H:i:s'); ?></p>
    </div>
    
    <h2>Formulario de prueba</h2>
    <form action="test_process.php" method="post">
        <div>
            <label>Nombre:</label>
            <input type="text" name="nombre" value="Test">
        </div>
        <div style="margin-top: 10px;">
            <button type="submit">Enviar prueba</button>
        </div>
    </form>
</body>
</html>


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\test_process.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\test_process.php

// NO incluir nada más, sin autoload, sin configuraciones
// Solo mostrar los datos recibidos
?>
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Procesador de prueba</title>
    <style>
        body { font-family: Arial, sans-serif; padding: 20px; }
        .info { background: #f0f0f0; padding: 20px; border-radius: 5px; }
    </style>
</head>
<body>
    <h1>Datos recibidos</h1>
    <div class="info">
        <?php if ($_SERVER['REQUEST_METHOD'] === 'POST'): ?>
            <p><strong>Nombre enviado:</strong> <?php echo htmlspecialchars($_POST['nombre'] ?? 'No enviado'); ?></p>
        <?php else: ?>
            <p>No se recibieron datos POST.</p>
        <?php endif; ?>
        
        <p><strong>Servidor:</strong> <?php echo $_SERVER['SERVER_NAME']; ?></p>
        <p><strong>URL actual:</strong> <?php echo $_SERVER['REQUEST_URI']; ?></p>
        <p><strong>Protocolo:</strong> <?php echo isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? 'HTTPS' : 'HTTP'; ?></p>
    </div>
    
    <p><a href="test_minimal.php">Volver a la prueba</a></p>
</body>
</html>


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\test_router.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\test_router.php

// Script para probar la gestión de parámetros en rutas
require_once __DIR__ . '/app/config/config.php';
require_once __DIR__ . '/app/helpers/Router.php';

echo "<h1>Prueba de Router y Parámetros</h1>";

// Clase de prueba simple
class TestController {
    public function test($id = null) {
        echo "<p>Método test() recibió ID: " . ($id ?? "null") . "</p>";
        return true;
    }
}

// Crear router de prueba
$router = new \App\Helpers\Router();
$router->get('test/{id}', 'Test', 'test');

// Simular solicitudes
echo "<h2>Probando ruta: test/123</h2>";
$_SERVER['REQUEST_URI'] = '/Encasa_Database/test/123';
$router->setControllerTestMode(new TestController());
$router->dispatch();

echo "<p><a href='miembros/2'>Ir a miembros/2</a></p>";


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\test_router_simple.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\test_router_simple.php

// Script simplificado para probar la gestión de rutas
require_once __DIR__ . '/app/config/config.php';

// Mostrar la URI actual para depuración
echo "<h1>Información de la URL actual</h1>";
echo "<p>REQUEST_URI: " . $_SERVER['REQUEST_URI'] . "</p>";
echo "<p>URL para prueba: <a href='miembros/2'>miembros/2</a></p>";

// Analizar manualmente la URL para simular el comportamiento del router
$requestUri = $_SERVER['REQUEST_URI'];
$basePath = '/Encasa_Database/';
$route = str_replace($basePath, '', $requestUri);

echo "<p>Ruta extraída: " . htmlspecialchars($route) . "</p>";

// Analizar parámetros de URL
if (preg_match('#^miembros/(\d+)$#', $route, $matches)) {
    echo "<p>ID detectado: " . $matches[1] . "</p>";
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\tunnel_fix.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\tunnel_fix.php

// 1. Eliminar todas las cookies para limpiar sesión
if (isset($_GET['clear_cookies'])) {
    $past = time() - 3600;
    foreach ($_COOKIE as $key => $value) {
        setcookie($key, '', $past, '/');
    }
    echo "<p>Cookies eliminadas. <a href='?'>Continuar</a></p>";
    exit;
}

// 2. Mostrar información de diagnóstico
echo "<h1>Diagnóstico de Tunnel</h1>";

// Información del servidor
echo "<h2>Información del servidor</h2>";
echo "<pre>";
echo "HTTP_HOST: " . ($_SERVER['HTTP_HOST'] ?? 'No definido') . "\n";
echo "REQUEST_URI: " . ($_SERVER['REQUEST_URI'] ?? 'No definido') . "\n"; 
echo "HTTPS: " . (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? 'on' : 'off') . "\n";
echo "</pre>";

// 3. Enlace para acceder directamente al login
$host = $_SERVER['HTTP_HOST'];
$protocol = isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? 'https://' : 'http://';
$login_url = $protocol . $host . "/ENCASA_DATABASE/login";
$ignored_url = $protocol . $host . "/encasa_database/login?bypass_redirect=1";

echo "<h2>Enlaces de prueba:</h2>";
echo "<p><a href='$login_url'>Acceso normal al login</a></p>";
echo "<p><a href='$ignored_url'>Acceso al login sin redirecciones</a></p>";
echo "<p><a href='?clear_cookies'>Limpiar cookies y sesión</a></p>";

// 4. Proporcionar instrucciones
echo "<h2>Instrucciones:</h2>";
echo "<ol>";
echo "<li>Primero, haz clic en 'Limpiar cookies y sesión'</li>";
echo "<li>Luego intenta el 'Acceso al login sin redirecciones'</li>";
echo "<li>Si funciona, necesitas modificar tu index.php según las instrucciones abajo</li>";
echo "</ol>";

echo "<h2>Modificación recomendada para index.php:</h2>";
echo "<pre style='background:#f8f9fa;padding:10px;'>";
echo '// Añadir esta condición antes de cualquier redirección
if (isset($_GET["bypass_redirect"])) {
    // No hacer ninguna redirección
    define("BYPASS_REDIRECTS", true);
}

// Modificar la redirección existente:
if (!defined("BYPASS_REDIRECTS") && $is_tunnel && empty($_SERVER["HTTPS"])) {
    $redirect_url = "https://" . $_SERVER["HTTP_HOST"] . $_SERVER["REQUEST_URI"];
    header("Location: $redirect_url");
    exit;
}';
echo "</pre>";

// 5. Diagnóstico de Router y URL
echo "<h2>Diagnóstico del Router:</h2>";
echo "<p>Tu Router.php está usando esta línea para redirecciones:</p>";
echo "<code>header('Location: ' . APP_URL . '/' . \$url);</code>";
echo "<p>Si APP_URL está establecido incorrectamente, causará bucles de redirección.</p>";

echo "<p>APP_URL actual (o esperado): ";
if (defined('APP_URL')) {
    echo APP_URL;
} else {
    echo "No definido aquí";
}
echo "</p>";


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\tunnel_fix_global.php
=============================================================

<?php

// Script para diagnosticar y solucionar problemas de URL en túneles

// 1. Mostrar información del entorno
$protocol = isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? 'https://' : 'http://';
$host = $_SERVER['HTTP_HOST'] ?? 'localhost';
$requestUri = $_SERVER['REQUEST_URI'] ?? '/';
$is_tunnel = strpos($host, 'localto.net') !== false || 
             strpos($host, 'loca.lt') !== false ||
             strpos($host, 'ngrok-free.app') !== false;

echo "<h1>Diagnóstico Global de URLs</h1>";

echo "<h2>Información del Entorno</h2>";
echo "<pre>";
echo "Host: $host\n";
echo "Protocol: $protocol\n";
echo "Request URI: $requestUri\n";
echo "¿Es túnel?: " . ($is_tunnel ? "SÍ" : "NO") . "\n";
echo "</pre>";

// 2. Verificar configuraciones existentes
if (defined('APP_URL')) {
    echo "<h2>Constantes Actuales</h2>";
    echo "<pre>";
    echo "APP_URL: " . APP_URL . "\n";
    if (defined('APP_ENV')) echo "APP_ENV: " . APP_ENV . "\n";
    echo "</pre>";
}

// 3. Generar una URL de prueba con la función url() si existe
echo "<h2>Prueba de Generación de URL</h2>";
if (function_exists('url')) {
    echo "<p>Función url() existe.</p>";
    echo "<p>url('login') genera: " . url('login') . "</p>";
} else {
    echo "<p style='color:red'>⚠️ Función url() no encontrada. Esto puede causar problemas.</p>";
}

// 4. Verificar archivos críticos
$files_to_check = [
    'index.php',
    'app/helpers/functions.php',
    'app/helpers/Router.php',
    'app/views/layouts/default.php',
    'app/views/auth/login.php'
];

echo "<h2>Verificación de Archivos Críticos</h2>";
echo "<ul>";
foreach ($files_to_check as $file) {
    $path = __DIR__ . '/' . $file;
    if (file_exists($path)) {
        echo "<li>✅ $file <span style='color:green'>existe</span></li>";
    } else {
        echo "<li>❌ $file <span style='color:red'>no existe</span></li>";
    }
}
echo "</ul>";

// 5. Proporcionar solución integral
echo "<h2>Solución Recomendada</h2>";
echo "<p>Para resolver los problemas de URL en túneles, sigue estos pasos:</p>";
echo "<ol>";
echo "<li>En index.php, asegúrate de que APP_URL se configure adecuadamente para túneles.</li>";
echo "<li>En todas las vistas y controladores, usa la función url() en lugar de URLs absolutas.</li>";
echo "<li>Verifica que el Router esté usando APP_URL para las redirecciones.</li>";
echo "<li>Actualiza los enlaces de la barra de navegación para usar url().</li>";
echo "</ol>";

// 6. Proporcionar código para solucionarlo inmediatamente
echo "<h2>Código para Solucionar el Problema</h2>";

echo "<h3>1. Función url() en app/helpers/functions.php</h3>";
echo '<pre style="background-color: #f5f5f5; padding: 10px; border: 1px solid #ddd; overflow: auto;">';
echo htmlspecialchars('<?php
// En app/helpers/functions.php
/**
 * Genera una URL completa para la aplicación
 * @param string $path Ruta relativa (sin / inicial)
 * @return string URL completa
 */
function url($path = \'\')
{
    // Asegurar que APP_URL existe
    if (!defined(\'APP_URL\')) {
        // Determinar URL base si no está definida
        $protocol = isset($_SERVER[\'HTTPS\']) && $_SERVER[\'HTTPS\'] === \'on\' ? \'https://\' : \'http://\';
        $host = $_SERVER[\'HTTP_HOST\'] ?? \'localhost\';
        $is_tunnel = strpos($host, \'localto.net\') !== false || 
                     strpos($host, \'loca.lt\') !== false ||
                     strpos($host, \'ngrok-free.app\') !== false;
                     
        // Configurar base URL
        $base_url = $protocol . $host;
        if ($is_tunnel) {
            $base_url .= \'/encasa_database\'; 
        } else {
            $base_url .= \'/ENCASA_DATABASE\';
        }
    } else {
        $base_url = APP_URL;
    }
    
    // Formatear URL
    $base_url = rtrim($base_url, \'/\');
    $path = ltrim($path, \'/\');
    
    return $base_url . ($path ? \'/\' . $path : \'\');
}');
echo '</pre>';

echo "<h3>2. Método redirect en Router.php</h3>";
echo '<pre style="background-color: #f5f5f5; padding: 10px; border: 1px solid #ddd; overflow: auto;">';
echo htmlspecialchars('// En app/helpers/Router.php - Método redirect
/**
 * Redirige a una URL
 */
public static function redirect($url) {
    // Usar la función url() para generar URLs consistentes
    if (function_exists(\'url\')) {
        header(\'Location: \' . url($url));
    } else {
        // Fallback si la función url() no existe
        $baseUrl = defined(\'APP_URL\') ? APP_URL : \'/ENCASA_DATABASE\';
        header(\'Location: \' . rtrim($baseUrl, \'/\') . \'/\' . ltrim($url, \'/\'));
    }
    exit;
}');
echo '</pre>';

// 7. Proporcionar enlaces de prueba
echo "<h2>Enlaces de Prueba</h2>";
$base = $protocol . $host . ($is_tunnel ? '/encasa_database' : '/ENCASA_DATABASE');
echo "<p><a href='$base/login' target='_blank'>Probar login</a></p>";
echo "<p><a href='$base/direct_access.php' target='_blank'>Usar direct_access.php</a> (bypass del sistema de rutas)</p>";
echo "<p><a href='$base/direct_test.php' target='_blank'>Probar base de datos directamente</a></p>";
?>


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\url_test.php
=============================================================

<?php

// Este archivo permite probar la función url() directamente

// Definir constantes del sistema básicas
define('BASE_PATH', __DIR__);
define('APP_PATH', BASE_PATH . '/app');

// Cargar la función url()
require_once APP_PATH . '/helpers/functions.php';

// Detectar entorno para información
$protocol = isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? 'https://' : 'http://';
$host = $_SERVER['HTTP_HOST'] ?? 'localhost';
$is_tunnel = strpos($host, 'localto.net') !== false || 
             strpos($host, 'loca.lt') !== false ||
             strpos($host, 'ngrok-free.app') !== false;

echo "<h1>Prueba de función url()</h1>";
echo "<p><strong>Host:</strong> $host</p>";
echo "<p><strong>Protocolo:</strong> $protocol</p>";
echo "<p><strong>¿Es túnel?:</strong> " . ($is_tunnel ? "SÍ" : "NO") . "</p>";

// Probar la generación de URLs
$urls = [
    '' => 'URL base',
    'login' => 'URL de login',
    'miembros' => 'URL de miembros',
    'miembros/crear' => 'URL para crear miembro'
];

echo "<h2>URLs generadas:</h2>";
echo "<ul>";
foreach ($urls as $path => $description) {
    echo "<li><strong>$description:</strong> " . url($path) . "</li>";
}
echo "</ul>";

echo "<h2>Enlaces de prueba:</h2>";
echo "<ul>";
foreach ($urls as $path => $description) {
    echo "<li><a href='" . url($path) . "' target='_blank'>$description</a></li>";
}
echo "</ul>";
?>


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\verify_router.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\verify_router.php

require_once __DIR__ . '/app/config/config.php';
require_once __DIR__ . '/app/Controllers/MiembrosController.php';
require_once __DIR__ . '/app/models/Miembro.php';
require_once __DIR__ . '/app/config/database.php';

echo "<h1>Verificación de Router y Controlador</h1>";

// Simular una solicitud a miembros/2
$_SERVER['REQUEST_URI'] = '/Encasa_Database/miembros/2';

echo "<p>Simulando acceso a URI: {$_SERVER['REQUEST_URI']}</p>";

// Extracción manual del ID como lo haría el router
if (preg_match('#/miembros/(\d+)#', $_SERVER['REQUEST_URI'], $matches)) {
    $id = (int)$matches[1];
    echo "<p>ID extraído: {$id}</p>";
    
    // Crear instancia del controlador y llamar al método directamente
    try {
        $controller = new \App\Controllers\MiembrosController();
        echo "<p>Controlador instanciado correctamente</p>";
        
        // Llamar al método ver() directamente
        $result = $controller->ver($id);
        echo "<p>Método ver() ejecutado con resultado: " . ($result ? "OK" : "Error") . "</p>";
    } catch (Exception $e) {
        echo "<p style='color:red'>Error al ejecutar el controlador: " . $e->getMessage() . "</p>";
    }
} else {
    echo "<p style='color:red'>No se pudo extraer ID de la URI</p>";
}

echo "<p><a href='miembros/2?nocache=" . time() . "' target='_blank'>Intentar acceso normal</a></p>";


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\config\autoload.php
=============================================================

<?php
// Autoload mejorado para manejar problemas de mayúsculas/minúsculas en directorios
spl_autoload_register(function ($className) {
    // Normalizar separadores y quitar prefijo de namespace
    $className = str_replace('App\\', '', $className);
    $path = str_replace('\\', '/', $className);
    
    // Primera opción: ruta exacta
    $file = APP_PATH . '/' . $path . '.php';
    if (file_exists($file)) {
        require_once $file;
        return true;
    }
    
    // Segunda opción: directorio en minúsculas, nombre de archivo normal
    $dir = dirname($path);
    $filename = basename($path);
    $file = APP_PATH . '/' . strtolower($dir) . '/' . $filename . '.php';
    if (file_exists($file)) {
        require_once $file;
        return true;
    }
    
    // Tercera opción: comprobar existencia de Controllers vs controllers
    $file = APP_PATH . '/Controllers/' . $filename . '.php';
    if (file_exists($file)) {
        require_once $file;
        return true;
    }
    
    // Cuarta opción: comprobar existencia de controllers vs Controllers
    $file = APP_PATH . '/controllers/' . $filename . '.php';
    if (file_exists($file)) {
        require_once $file;
        return true;
    }
    
    return false;
});


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\config\config.php
=============================================================

<?php
// Configuración general de la aplicación
if (!defined('APP_NAME')) define('APP_NAME', 'Iglesia En Casa');
if (!defined('APP_URL')) define('APP_URL', 'http://localhost/Encasa_Database');
if (!defined('APP_ENV')) define('APP_ENV', 'development'); // 'development' o 'production'

// Configuración de zona horaria
date_default_timezone_set('America/Bogota');

// Configuración de correo electrónico con cuenta de Gmail para autenticación
define('SMTP_HOST', 'smtp.gmail.com');  // Servidor SMTP de Gmail
define('SMTP_PORT', 587);  // Puerto para TLS
define('SMTP_SECURE', 'tls');  // Tipo de seguridad
define('SMTP_AUTH', true);  // Requiere autenticación
define('SMTP_USER', 'iglesiaencasautenticador@gmail.com');  // Nueva cuenta de correo
define('SMTP_PASS', 'uhko nczq nclq uzkx');  // Nueva contraseña de aplicación
define('MAIL_FROM', 'iglesiaencasautenticador@gmail.com');  // Actualizado
define('MAIL_FROM_NAME', 'Iglesia En Casa');

// Controles para la verificación
define('REQUIRE_EMAIL_VERIFICATION', true);
define('REQUIRE_2FA_LOGIN', true);

// Constantes de Base de Datos
define('DB_HOST', 'localhost');
define('DB_NAME', 'IglesiaEnCasa');
define('DB_USER', 'root');
define('DB_PASS', '');


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\config\cors.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\app\config\cors.php
/**
 * Configuración global de CORS para la aplicación
 * Detecta automáticamente entornos y configura las cabeceras adecuadamente
 */

// Obtener el origen de la solicitud
$origin = isset($_SERVER['HTTP_ORIGIN']) ? $_SERVER['HTTP_ORIGIN'] : '';
$referer = isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : '';

// Función para extraer el dominio base
function getDomainFromUrl($url) {
    $parsedUrl = parse_url($url);
    return isset($parsedUrl['host']) ? $parsedUrl['host'] : '';
}

// Detectar si estamos usando ngrok o localtunnel
$isTunnel = false;
$tunnelDomain = '';

// Detectar ngrok
if (strpos($origin, 'ngrok-free.app') !== false) {
    $isTunnel = true;
    $tunnelDomain = $origin;
} elseif (strpos($referer, 'ngrok-free.app') !== false) {
    $isTunnel = true;
    $tunnelDomain = preg_replace('/^(https?:\/\/[^\/]+).*$/', '$1', $referer);
}

// Detectar localtunnel
if (!$isTunnel) {
    if (strpos($origin, 'loca.lt') !== false || strpos($origin, 'localto.net') !== false) {
        $isTunnel = true;
        $tunnelDomain = $origin;
    } elseif (strpos($referer, 'loca.lt') !== false || strpos($referer, 'localto.net') !== false) {
        $isTunnel = true;
        $tunnelDomain = preg_replace('/^(https?:\/\/[^\/]+).*$/', '$1', $referer);
    }
}

// Configurar los encabezados CORS según el entorno
if ($isTunnel) {
    // Si es un túnel, permitir ese origen específico
    header("Access-Control-Allow-Origin: $tunnelDomain");
    error_log("CORS: Permitido origen de túnel: $tunnelDomain");
} elseif (in_array($_SERVER['SERVER_NAME'] ?? '', ['localhost', '127.0.0.1'])) {
    // Entorno de desarrollo local
    header('Access-Control-Allow-Origin: *');
    error_log("CORS: Permitido cualquier origen (desarrollo local)");
} else {
    // Entorno de producción - aquí puedes definir dominios específicos
    $allowedDomains = [
        'iglesiaencasa.org',
        'www.iglesiaencasa.org'
    ];
    
    $domain = getDomainFromUrl($origin);
    if (in_array($domain, $allowedDomains)) {
        header("Access-Control-Allow-Origin: $origin");
        error_log("CORS: Permitido origen de producción: $origin");
    }
}

// Configurar otros encabezados CORS
header('Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type, Authorization, X-Requested-With, X-XSRF-TOKEN');
header('Access-Control-Allow-Credentials: true');
header('Access-Control-Max-Age: 86400'); // 24 horas

// Si es una solicitud OPTIONS (preflight), terminar aquí
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    exit(0);
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\config\database.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\app\config\database.php

// Eliminar estas líneas que causan la redefinición de constantes
// define('DB_HOST', 'localhost');
// define('DB_NAME', 'IglesiaEnCasa');
// define('DB_USER', 'root');
// define('DB_PASS', '');

// Solo mantener las que no están en config.php
define('DB_PORT', '3306');
define('DB_CHARSET', 'utf8mb4');

// Clase Singleton para conexión a la base de datos
class Database {
    private static $instance = null;
    private $conn;
    
    private function __construct() {
        // Usar las constantes ya definidas en config.php
        try {
            $dsn = "mysql:host=" . DB_HOST . ";dbname=" . DB_NAME . ";charset=" . DB_CHARSET;
            $options = [
                PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
                PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
                PDO::ATTR_EMULATE_PREPARES => false,
            ];
            $this->conn = new PDO($dsn, DB_USER, DB_PASS, $options);
        } catch (PDOException $e) {
            die('Error de conexión: ' . $e->getMessage());
        }
    }
    
    public static function getInstance() {
        if (self::$instance == null) {
            self::$instance = new Database();
        }
        return self::$instance;
    }
    
    public function getConnection() {
        return $this->conn;
    }
}

// Crear una instancia de la base de datos global para uso general
$database = Database::getInstance();
$db = $database->getConnection();


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\config\db_verifier.php
=============================================================

<?php

require_once __DIR__ . '/database.php';

class DBVerifier {
    private $db;
    private $errors = [];
    
    public function __construct() {
        $this->db = Database::getInstance()->getConnection();
    }
    
    public function verifyDatabase() {
        try {
            // Verificar si la base de datos existe
            $this->db->query("USE IglesiaEnCasa");
            $this->verifyTables();
            $this->verifyConstraints();
            $this->verifyIndexes();
            
            if (empty($this->errors)) {
                return true;
            } else {
                $this->logErrors();
                return false;
            }
        } catch (PDOException $e) {
            $this->errors[] = "Error de base de datos: " . $e->getMessage();
            $this->logErrors();
            return false;
        }
    }
    
    private function verifyTables() {
        $tables = [
            'InformacionGeneral', 'Contacto', 'Roles', 'Ministerios', 
            'MiembrosMinisterios', 'Usuarios'
        ];
        
        foreach ($tables as $table) {
            try {
                $result = $this->db->query("SELECT 1 FROM `$table` LIMIT 1");
            } catch (PDOException $e) {
                $this->errors[] = "La tabla '$table' no existe o no es accesible.";
            }
        }
    }
    
    private function verifyConstraints() {
        $constraints = [
            ['InformacionGeneral', 'informacion_general_ibfk_1'],
            ['Contacto', 'contacto_ibfk_1'],
            ['Ministerios', 'ministerios_ibfk_1'],
            ['MiembrosMinisterios', 'miembrosministerios_ibfk_1'],
            ['MiembrosMinisterios', 'miembrosministerios_ibfk_2'],
            ['MiembrosMinisterios', 'miembrosministerios_ibfk_3'],
            ['Usuarios', 'usuarios_ibfk_1'],
            ['Usuarios', 'usuarios_ibfk_2']
        ];
        
        foreach ($constraints as $constraint) {
            try {
                $query = "
                    SELECT * FROM information_schema.TABLE_CONSTRAINTS 
                    WHERE CONSTRAINT_SCHEMA = 'IglesiaEnCasa' 
                    AND TABLE_NAME = ? 
                    AND CONSTRAINT_NAME = ?
                ";
                $stmt = $this->db->prepare($query);
                $stmt->execute([$constraint[0], $constraint[1]]);
                
                if ($stmt->rowCount() === 0) {
                    $this->errors[] = "La restricción '{$constraint[1]}' no existe en la tabla '{$constraint[0]}'.";
                }
            } catch (PDOException $e) {
                $this->errors[] = "Error verificando restricciones: " . $e->getMessage();
            }
        }
    }
    
    private function verifyIndexes() {
        $indexes = [
            ['InformacionGeneral', 'PRIMARY'],
            ['Contacto', 'PRIMARY'],
            ['Roles', 'PRIMARY'],
            ['Ministerios', 'PRIMARY'],
            ['Ministerios', 'lider_id'],
            ['MiembrosMinisterios', 'PRIMARY']
        ];
        
        foreach ($indexes as $index) {
            try {
                $query = "
                    SELECT * FROM information_schema.STATISTICS 
                    WHERE TABLE_SCHEMA = 'IglesiaEnCasa' 
                    AND TABLE_NAME = ? 
                    AND INDEX_NAME = ?
                ";
                $stmt = $this->db->prepare($query);
                $stmt->execute([$index[0], $index[1]]);
                
                if ($stmt->rowCount() === 0) {
                    $this->errors[] = "El índice '{$index[1]}' no existe en la tabla '{$index[0]}'.";
                }
            } catch (PDOException $e) {
                $this->errors[] = "Error verificando índices: " . $e->getMessage();
            }
        }
    }
    
    private function logErrors() {
        $logFile = APP_PATH . '/logs/db_verification.log';
        $directory = dirname($logFile);
        
        if (!is_dir($directory)) {
            mkdir($directory, 0755, true);
        }
        
        $timestamp = date('Y-m-d H:i:s');
        $logMessage = "[$timestamp] Verificación de base de datos:" . PHP_EOL;
        
        foreach ($this->errors as $error) {
            $logMessage .= "- $error" . PHP_EOL;
        }
        
        file_put_contents($logFile, $logMessage, FILE_APPEND);
    }
    
    public function getErrors() {
        return $this->errors;
    }
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\config\https_handler.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\app\config\https_handler.php

/**
 * Mejorar manejo de HTTPS para evitar problemas de formularios
 */
function configure_https() {
    // Forzar HSTS para conexiones seguras
    if (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on') {
        header('Strict-Transport-Security: max-age=31536000; includeSubDomains');
    }
    
    // Configuración CORS básica
    header('Access-Control-Allow-Origin: *');
    header('Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS');
    header('Access-Control-Allow-Headers: Content-Type, Authorization, X-Requested-With');
    
    // Forzar recursos seguros
    header('Content-Security-Policy: upgrade-insecure-requests');
}

// Aplicar configuración
configure_https();


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\config\mail_autoload.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\app\config\mail_autoload.php

// Autoloader para PHPMailer (versión manual)
require_once BASE_PATH . '/vendor/phpmailer/phpmailer/PHPMailer-6.10.0/src/PHPMailer.php';
require_once BASE_PATH . '/vendor/phpmailer/phpmailer/PHPMailer-6.10.0/src/SMTP.php';
require_once BASE_PATH . '/vendor/phpmailer/phpmailer/PHPMailer-6.10.0/src/Exception.php';


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\config\routes.php
=============================================================

<?php
// filepath: /Applications/XAMPP/xamppfiles/htdocs/Encasa_Database/app/config/routes.php

use App\Helpers\Router;

// Instancia del router
$router = new Router();

// Página principal
$router->get('', 'Home', 'index');
$router->get('home', 'Home', 'index');

// Rutas de miembros
$router->get('miembros', 'Miembros', 'index', ['Auth']);
$router->get('miembros/crear', 'Miembros', 'crear', ['Auth']);
$router->post('miembros/guardar', 'Miembros', 'guardar', ['Auth']);
$router->get('miembros/{id}', 'Miembros', 'ver', ['Auth']);

// Rutas de ministerios
$router->get('ministerios', 'Ministerios', 'index', ['Auth']);
$router->get('ministerios/crear', 'Ministerios', 'crear', ['Auth']);
$router->post('ministerios/guardar', 'Ministerios', 'guardar', ['Auth']);
$router->get('ministerios/{id}', 'Ministerios', 'ver', ['Auth']);
$router->get('ministerios/{id}/editar', 'Ministerios', 'editar', ['Auth']);
$router->post('ministerios/{id}/actualizar', 'Ministerios', 'actualizar', ['Auth']);
$router->post('ministerios/{id}/eliminar', 'Ministerios', 'eliminar', ['Auth', 'AdminOnly']);

// Rutas de autenticación
$router->get('login', 'Auth', 'login');
$router->post('auth/login', 'Auth', 'authenticate');
$router->get('logout', 'Auth', 'logout');
$router->get('registro', 'Auth', 'register');
$router->post('auth/registro', 'Auth', 'store');

// Rutas de verificación
$router->get('auth/verify', 'Auth', 'verify');
$router->post('auth/verify', 'Auth', 'verify');
$router->get('auth/resendCode', 'Auth', 'resendCode');

// Rutas de verificación 2FA para login
$router->get('auth/verify-login', 'Auth', 'verifyLogin');
$router->post('auth/verify-login', 'Auth', 'verifyLogin');
$router->get('auth/resend-login-code', 'Auth', 'resendLoginCode');

// Rutas de error
$router->setNotFound(function() {
    include VIEW_PATH . '/errors/404.php';
});

return $router;


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\Controllers\AuthController.php
=============================================================

<?php
// filepath: /Applications/XAMPP/xamppfiles/htdocs/Encasa_Database/app/controllers/AuthController.php
namespace App\Controllers;

class AuthController extends Controller {
    private $userModel;
    
    public function __construct() {
        parent::__construct();
        $this->userModel = new \App\Models\Usuario();
    }
    
    /**
     * Muestra el formulario de login
     */
    public function login() {
        // Si ya está autenticado, redirigir al dashboard
        if ($this->isAuthenticated()) {
            $this->redirect('');
            return;
        }
        
        $this->renderWithLayout('auth/login', 'auth', [
            'title' => 'Iniciar Sesión'
        ]);
    }
    
    /**
     * Procesa el intento de login
     */
    public function authenticate() {
        if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
            $this->redirect('login');
            return;
        }

        $email_or_username = $_POST['email_or_username'] ?? '';
        $password = $_POST['password'] ?? '';

        if (empty($email_or_username) || empty($password)) {
            return $this->renderWithLayout('auth/login', 'auth', [
                'error' => 'Por favor ingrese su correo/usuario y contraseña',
                'title' => 'Iniciar Sesión'
            ]);
        }

        $userModel = new \App\Models\Usuario();
        $user = $userModel->findByEmailOrUsername($email_or_username);

        // Este es el cambio clave: primero verifica las credenciales, luego el estado
        if ($user && password_verify($password, $user['password'])) {
            // Si las credenciales son correctas, verificar el estado del usuario
            if (strtolower($user['estado']) != 'activo') {
                // Usuario no activo - Mostrar mensaje de verificación pendiente
                $_SESSION['pending_verification'] = [
                    'user_id' => $user['id'],
                    'email' => $user['email'],
                    'name' => $user['nombre_completo']
                ];
                
                $_SESSION['flash_message'] = 'Tu cuenta aún no ha sido verificada. Por favor revisa tu correo electrónico para el código de verificación.';
                $_SESSION['flash_type'] = 'warning';
                
                // Añadir un enlace para reenviar el código
                $_SESSION['flash_action'] = '<a href="'.APP_URL.'/auth/resendCode" class="btn btn-sm btn-primary mt-2">Reenviar código</a>';
                
                return $this->renderWithLayout('auth/login', 'auth', [
                    'error' => 'Tu cuenta aún no ha sido verificada.',
                    'title' => 'Iniciar Sesión'
                ]);
            }
            
            // Añadir verificación de 2FA
            if (defined('REQUIRE_2FA_LOGIN') && REQUIRE_2FA_LOGIN) {
                // Guardar información del usuario en sesión para el segundo paso
                $_SESSION['pending_2fa'] = [
                    'user_id' => $user['id'],
                    'email' => $user['email'],
                    'name' => $user['nombre_completo']
                ];
                
                // Generar código de verificación
                $verificationModel = new \App\Models\VerificationCode();
                $code = $verificationModel->createForUser($user['id'], 'login_verification');
                
                // Enviar código por correo
                $emailService = new \App\Helpers\EmailService();
                $emailService->sendVerificationCode($user['email'], $user['nombre_completo'], $code);
                
                // Redirigir a la página de verificación 2FA
                $this->redirect('auth/verify-login');
                return;
            }
            
            // Si no se requiere 2FA, continuar con el flujo normal de autenticación
            $_SESSION['user_id'] = $user['id'];
            $_SESSION['user_name'] = $user['nombre_completo'];
            $_SESSION['user_role'] = $user['rol_id'];
            
            // Redireccionar al panel adecuado
            $this->redirect(''); // Redirige a la página de inicio
            return;
        }
        
        // Si llegamos aquí, las credenciales son incorrectas
        return $this->renderWithLayout('auth/login', 'auth', [
            'error' => 'Credenciales incorrectas',
            'title' => 'Iniciar Sesión'
        ]);
    }
    
    /**
     * Cierra la sesión
     */
    public function logout() {
        // Destruir la sesión
        session_unset();
        session_destroy();
        
        // Redirigir a login
        $this->redirect('login');
    }
    
    /**
     * Muestra el formulario de registro
     */
    public function register() {
        // Si ya está autenticado, redirigir al dashboard
        if ($this->isAuthenticated()) {
            $this->redirect('');
            return;
        }
        
        $this->renderWithLayout('auth/register', 'auth', [
            'title' => 'Registro de Usuario'
        ]);
    }
    
    /**
     * Procesa el registro de usuario
     */
    public function store() {
        // Verificar que sea una petición POST
        if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
            // Redirigir a la página de registro si no es POST
            header('Location: ' . APP_URL . '/registro');
            exit;
        }
        
        // Obtener datos del formulario
        $data = [
            'nombre_completo' => $_POST['nombre_completo'] ?? '',
            'username' => $_POST['username'] ?? '',
            'email' => $_POST['email'] ?? '',
            'password' => $_POST['password'] ?? '',
            'password_confirmation' => $_POST['password_confirmation'] ?? '',
            'miembro_id' => 1,
            'rol_id' => 5,
            // Cambiar esto:
            'estado' => defined('REQUIRE_EMAIL_VERIFICATION') && REQUIRE_EMAIL_VERIFICATION ? 'Pendiente' : 'Activo'
        ];
        
        // Validar datos
        $errors = [];
        
        if (empty($data['username'])) {
            $errors[] = "El nombre de usuario es obligatorio";
        }
        
        if (empty($data['email'])) {
            $errors[] = "El correo electrónico es obligatorio";
        } elseif (!filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {
            $errors[] = "El formato del correo electrónico no es válido";
        }
        
        if (empty($data['password'])) {
            $errors[] = "La contraseña es obligatoria";
        } elseif (strlen($data['password']) < 6) {
            $errors[] = "La contraseña debe tener al menos 6 caracteres";
        } elseif ($data['password'] !== $data['password_confirmation']) {
            $errors[] = "Las contraseñas no coinciden";
        }
        
        // Si hay errores, mostrar formulario con errores
        if (!empty($errors)) {
            return $this->renderWithLayout('auth/register', 'auth', [
                'errors' => $errors,
                'title' => 'Registro de Usuario',
                'data' => $data // Para mantener los datos ingresados
            ]);
        }
        
        // Intentar registrar al usuario
        error_log('Estado del usuario al registrar: ' . $data['estado']);

        $userModel = new \App\Models\Usuario();
        $result = $userModel->register($data);
        
        if ($result) {
            $userId = $result;
            
            // Verificar si se requiere verificación por correo
            if (defined('REQUIRE_EMAIL_VERIFICATION') && REQUIRE_EMAIL_VERIFICATION) {
                $userModel->update($userId, ['estado' => 'Pendiente']);
                
                // Generar código de verificación
                $verificationModel = new \App\Models\VerificationCode();
                $code = $verificationModel->createForUser($userId);
                
                // Guardar datos en sesión para la verificación
                $_SESSION['pending_verification'] = [
                    'user_id' => $userId,
                    'email' => $data['email'],  // Asegúrate de que esta variable existe en tu contexto
                    'name' => $data['nombre_completo']   // Asegúrate de que esta variable existe en tu contexto
                ];
                
                // Enviar código por correo
                $emailService = new \App\Helpers\EmailService();
                $emailService->sendVerificationCode($data['email'], $data['nombre_completo'], $code);
                
                // Redirigir a la página de verificación
                $this->redirect('auth/verify');
                return;
            } else {
                // Si no se requiere verificación, continuar con el flujo normal
                $_SESSION['flash_message'] = 'Registro exitoso. Ya puedes iniciar sesión.';
                $_SESSION['flash_type'] = 'success';
                $this->redirect('login');
                return;
            }
        } else {
            // Error en el registro
            $errors[] = "No se pudo completar el registro. El usuario o correo ya existe.";
            return $this->renderWithLayout('auth/register', 'auth', [
                'errors' => $errors,
                'title' => 'Registro de Usuario',
                'data' => $data // Para mantener los datos ingresados
            ]);
        }
    }
    
    /**
     * Muestra y procesa la verificación del código
     */
    public function verify() {
        // Si no hay verificación pendiente, redirigir a login
        if (!isset($_SESSION['pending_verification'])) {
            $this->redirect('login');
            return;
        }
        
        // Si es POST, verificar el código
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $code = trim($_POST['code'] ?? '');
            $userId = $_SESSION['pending_verification']['user_id'];
            
            if (empty($code)) {
                return $this->renderWithLayout('auth/verify', 'auth', [
                    'error' => 'Ingrese el código de verificación',
                    'email' => $_SESSION['pending_verification']['email'],
                    'title' => 'Verificación de Cuenta'
                ]);
            }
            
            // Verificar el código
            $verificationModel = new \App\Models\VerificationCode();
            $isValid = $verificationModel->verifyCode($userId, $code);
            
            if ($isValid) {
                // Activar el usuario
                $userModel = new \App\Models\Usuario();
                $userModel->update($userId, ['estado' => 'Activo']);
                
                // Limpiar datos de verificación pendiente
                unset($_SESSION['pending_verification']);
                
                // Mensaje de éxito
                $_SESSION['flash_message'] = 'Cuenta verificada correctamente. Ya puedes iniciar sesión.';
                $_SESSION['flash_type'] = 'success';
                
                $this->redirect('login');
                return;
            } else {
                return $this->renderWithLayout('auth/verify', 'auth', [
                    'error' => 'Código de verificación inválido o expirado',
                    'email' => $_SESSION['pending_verification']['email'],
                    'title' => 'Verificación de Cuenta'
                ]);
            }
        }
        
        // Mostrar formulario de verificación
        return $this->renderWithLayout('auth/verify', 'auth', [
            'email' => $_SESSION['pending_verification']['email'],
            'title' => 'Verificación de Cuenta'
        ]);
    }
    
    /**
     * Reenvía el código de verificación
     */
    public function resendCode() {
        if (!isset($_SESSION['pending_verification'])) {
            $this->redirect('login');
            return;
        }
        
        $userId = $_SESSION['pending_verification']['user_id'];
        $email = $_SESSION['pending_verification']['email'];
        $name = $_SESSION['pending_verification']['name'];
        
        // Generar nuevo código
        $verificationModel = new \App\Models\VerificationCode();
        $code = $verificationModel->createForUser($userId);
        
        // Enviar código
        $emailService = new \App\Helpers\EmailService();
        $sent = $emailService->sendVerificationCode($email, $name, $code);
        
        if ($sent) {
            $_SESSION['flash_message'] = 'Código de verificación reenviado correctamente.';
            $_SESSION['flash_type'] = 'success';
        } else {
            $_SESSION['flash_message'] = 'Error al enviar el código. Inténtelo de nuevo.';
            $_SESSION['flash_type'] = 'danger';
        }
        
        $this->redirect('auth/verify');
    }
    
    /**
     * Muestra y procesa la verificación del código de 2FA
     */
    public function verifyLogin() {
        // Si no hay verificación 2FA pendiente, redirigir a login
        if (!isset($_SESSION['pending_2fa'])) {
            $this->redirect('login');
            return;
        }
        
        // Si es POST, verificar el código
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $code = trim($_POST['code'] ?? '');
            $userId = $_SESSION['pending_2fa']['user_id'];
            
            if (empty($code)) {
                return $this->renderWithLayout('auth/verify-login', 'auth', [
                    'error' => 'Ingrese el código de verificación',
                    'email' => $_SESSION['pending_2fa']['email'],
                    'title' => 'Verificación de Inicio de Sesión'
                ]);
            }
            
            // Verificar el código
            $verificationModel = new \App\Models\VerificationCode();
            $isValid = $verificationModel->verifyCode($userId, $code, 'login_verification');
            
            if ($isValid) {
                // Recuperar datos del usuario y establecer sesión
                $userModel = new \App\Models\Usuario();
                $user = $userModel->findById($userId);
                
                $_SESSION['user_id'] = $user['id'];
                $_SESSION['user_name'] = $user['nombre_completo'];
                $_SESSION['user_role'] = $user['rol_id'];
                
                // Actualizar último acceso
                $userModel->update($user['id'], [
                    'ultimo_acceso' => date('Y-m-d H:i:s')
                ]);
                
                // Limpiar datos de verificación pendiente
                unset($_SESSION['pending_2fa']);
                
                // Mensaje de éxito
                $_SESSION['flash_message'] = 'Inicio de sesión completado correctamente.';
                $_SESSION['flash_type'] = 'success';
                
                $this->redirect('');
                return;
            } else {
                return $this->renderWithLayout('auth/verify-login', 'auth', [
                    'error' => 'Código de verificación inválido o expirado',
                    'email' => $_SESSION['pending_2fa']['email'],
                    'title' => 'Verificación de Inicio de Sesión'
                ]);
            }
        }
        
        // Mostrar formulario de verificación
        return $this->renderWithLayout('auth/verify-login', 'auth', [
            'email' => $_SESSION['pending_2fa']['email'],
            'title' => 'Verificación de Inicio de Sesión'
        ]);
    }
    
    /**
     * Reenvía el código de verificación para 2FA
     */
    public function resendLoginCode() {
        if (!isset($_SESSION['pending_2fa'])) {
            $this->redirect('login');
            return;
        }
        
        $userId = $_SESSION['pending_2fa']['user_id'];
        $email = $_SESSION['pending_2fa']['email'];
        $name = $_SESSION['pending_2fa']['name'];
        
        // Generar nuevo código
        $verificationModel = new \App\Models\VerificationCode();
        $code = $verificationModel->createForUser($userId, 'login_verification');
        
        // Enviar código
        $emailService = new \App\Helpers\EmailService();
        $sent = $emailService->sendVerificationCode($email, $name, $code);
        
        if ($sent) {
            $_SESSION['flash_message'] = 'Código de verificación reenviado correctamente.';
            $_SESSION['flash_type'] = 'success';
        } else {
            $_SESSION['flash_message'] = 'Error al enviar el código. Inténtelo de nuevo.';
            $_SESSION['flash_type'] = 'danger';
        }
        
        $this->redirect('auth/verify-login');
    }
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\Controllers\Controller.php
=============================================================

<?php
namespace App\Controllers;

abstract class Controller {
    protected $view;
    protected $model;
    
    public function __construct() {
        $this->view = new \App\Helpers\View();
    }
    
    /**
     * Método para renderizar una vista
     */
    protected function render($view, $data = []) {
        $this->view->render($view, $data);
    }
    
    /**
     * Método para renderizar una vista con un layout
     */
    protected function renderWithLayout($view, $layout = 'default', $data = []) {
        $this->view->renderWithLayout($view, $layout, $data);
    }
    
    /**
     * Método para validar datos de formulario
     */
    protected function validate($data, $rules) {
        $validator = new \App\Helpers\Validator();
        return $validator->validate($data, $rules);
    }
    
    /**
     * Método para redireccionar
     */
    protected function redirect($url) {
        \App\Helpers\Router::redirect($url);
    }
    
    /**
     * Método para obtener el usuario actual
     */
    protected function getCurrentUser() {
        if (isset($_SESSION['user_id'])) {
            $userModel = new \App\Models\Usuario();
            return $userModel->findById($_SESSION['user_id']);
        }
        return null;
    }
    
    /**
     * Método para verificar si el usuario está autenticado
     */
    protected function isAuthenticated() {
        return isset($_SESSION['user_id']);
    }
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\Controllers\HomeController.php
=============================================================

<?php
// filepath: /Applications/XAMPP/xamppfiles/htdocs/Encasa_Database/app/Controllers/HomeController.php
namespace App\Controllers;

class HomeController extends Controller {
    public function index() {
        $title = 'Bienvenido a Iglesia En Casa';
        $this->renderWithLayout('home/index', 'default', [
            'title' => $title,
            'user' => $this->getCurrentUser()
        ]);
    }
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\Controllers\MiembrosController.php
=============================================================

<?php

namespace App\Controllers;

use App\Models\Miembro;
use App\Models\Contacto;
use App\Models\EstudiosTrabajo;
use App\Models\Tallas;
use App\Models\CarreraBiblica;

class MiembrosController extends Controller {
    private $miembroModel;
    
    public function __construct() {
        parent::__construct();
        $this->miembroModel = new Miembro();
    }
    
    /**
     * Muestra el listado de miembros
     */
    public function index() {
        // Obtener parámetros de filtrado y paginación
        $busqueda = isset($_GET['busqueda']) ? $_GET['busqueda'] : '';
        $pagina = isset($_GET['pagina']) ? (int)$_GET['pagina'] : 1;
        $porPagina = 10;
        
        // Obtener miembros según filtros
        if (!empty($busqueda)) {
            $miembros = $this->miembroModel->buscar($busqueda);
            $totalMiembros = count($miembros);
        } else {
            $miembros = $this->miembroModel->getAll();
            $totalMiembros = count($miembros);
        }
        
        // Implementar paginación manual básica
        $totalPaginas = ceil($totalMiembros / $porPagina);
        $offset = ($pagina - 1) * $porPagina;
        $miembrosPaginados = array_slice($miembros, $offset, $porPagina);
        
        return $this->renderWithLayout('miembros/index', 'default', [
            'miembros' => $miembrosPaginados,
            'busqueda' => $busqueda,
            'pagina' => $pagina,
            'totalPaginas' => $totalPaginas,
            'title' => 'Directorio de Miembros'
        ]);
    }
    
    /**
     * Muestra el formulario para crear un nuevo miembro
     */
    public function crear() {
        return $this->renderWithLayout('miembros/crear', 'default', [
            'title' => 'Registrar Nuevo Miembro'
        ]);
    }
    
    /**
     * Método para guardar un nuevo miembro
     */
    public function guardar() {
        // Verificar que sea una petición POST
        if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
            $this->redirect('miembros');
            return;
        }
        
        // Obtener y validar datos básicos
        $datos = [
            'nombres' => htmlspecialchars($_POST['nombres'] ?? ''),
            'apellidos' => htmlspecialchars($_POST['apellidos'] ?? ''),
            'celular' => htmlspecialchars($_POST['celular'] ?? ''),
            'localidad' => htmlspecialchars($_POST['localidad'] ?? ''),
            'barrio' => htmlspecialchars($_POST['barrio'] ?? ''),
            'fecha_nacimiento' => $_POST['fecha_nacimiento'] ?? null,
            'invitado_por' => !empty($_POST['invitado_por']) ? (int)$_POST['invitado_por'] : null,
            'conector' => htmlspecialchars($_POST['conector'] ?? ''),
            'recorrido_espiritual' => htmlspecialchars($_POST['recorrido_espiritual'] ?? ''),
            'estado_espiritual' => htmlspecialchars($_POST['estado_espiritual'] ?? ''),
            'habeas_data' => isset($_POST['habeas_data']) ? 1 : 0,
        ];
        
        // Validar campos requeridos
        if (empty($datos['nombres']) || empty($datos['apellidos']) || empty($datos['celular'])) {
            $_SESSION['flash_message'] = 'Por favor complete los campos obligatorios';
            $_SESSION['flash_type'] = 'danger';
            $this->redirect('miembros/crear');
            return;
        }
        
        // Procesar la foto si se subió
        if (!empty($_FILES['foto']['name'])) {
            $foto = $this->procesarFoto($_FILES['foto']);
            if ($foto) {
                $datos['foto'] = $foto;
            }
        }
        
        // Guardar información general y obtener el ID insertado
        $miembroId = $this->miembroModel->crear($datos);
        
        if (!$miembroId) {
            $_SESSION['flash_message'] = 'Error al guardar la información del miembro';
            $_SESSION['flash_type'] = 'danger';
            $this->redirect('miembros/crear');
            return;
        }
        
        // Guardar información de contacto
        if (isset($_POST['contacto']) && is_array($_POST['contacto'])) {
            $contacto = $_POST['contacto'];
            $contacto['miembro_id'] = $miembroId;
            $this->miembroModel->guardarContacto($contacto);
        }
        
        // Guardar información de estudios y trabajo
        if (isset($_POST['estudios']) && is_array($_POST['estudios'])) {
            $estudios = $_POST['estudios'];
            $estudios['miembro_id'] = $miembroId;
            $this->miembroModel->guardarEstudiosTrabajo($estudios);
        }
        
        // Guardar tallas
        if (isset($_POST['tallas']) && is_array($_POST['tallas'])) {
            $tallas = $_POST['tallas'];
            $tallas['miembro_id'] = $miembroId;
            $this->miembroModel->guardarTallas($tallas);
        }
        
        // Guardar información de carrera bíblica
        if (isset($_POST['carrera']) && is_array($_POST['carrera'])) {
            $carrera = $_POST['carrera'];
            $carrera['miembro_id'] = $miembroId;
            $this->miembroModel->guardarCarreraBiblica($carrera);
        }
        
        $_SESSION['flash_message'] = 'Miembro registrado exitosamente';
        $_SESSION['flash_type'] = 'success';
        $this->redirect('miembros/' . $miembroId);
    }

    /**
     * Procesa y guarda la foto subida
     */
    private function procesarFoto($archivo) {
        // Directorio para guardar las fotos
        $directorio = __DIR__ . '/../../public/uploads/miembros/';
        
        // Crear directorio si no existe
        if (!file_exists($directorio)) {
            mkdir($directorio, 0777, true);
        }
        
        // Validar el archivo
        $tiposPermitidos = ['image/jpeg', 'image/png', 'image/gif'];
        if (!in_array($archivo['type'], $tiposPermitidos)) {
            return false;
        }
        
        // Generar nombre único
        $nombreArchivo = uniqid() . '_' . basename($archivo['name']);
        $rutaArchivo = $directorio . $nombreArchivo;
        
        // Mover el archivo
        if (move_uploaded_file($archivo['tmp_name'], $rutaArchivo)) {
            return $nombreArchivo;
        }
        
        return false;
    }
    
    /**
     * Obtiene y muestra el perfil completo del miembro
     */
    public function ver($id = null) {
        // Validar y sanitizar ID
        if (!$id) {
            $uri = $_SERVER['REQUEST_URI'];
            if (preg_match('#/miembros/(\d+)#', $uri, $matches)) {
                $id = (int)$matches[1];
            } else {
                $_SESSION['flash_message'] = 'ID de miembro no especificado';
                $_SESSION['flash_type'] = 'danger';
                $this->redirect('miembros');
                return;
            }
        }
        
        // Asegurar que ID es entero
        $id = (int)$id;
        
        // Obtener datos del miembro
        $miembro = $this->miembroModel->getFullProfile($id);
        
        // Log seguro usando json_encode para arrays
        error_log("Datos del miembro: " . ($miembro ? json_encode($miembro) : "no encontrado"));
        
        if (!$miembro) {
            $_SESSION['flash_message'] = 'Miembro no encontrado';
            $_SESSION['flash_type'] = 'danger';
            $this->redirect('miembros');
            return;
        }
        
        // Renderizar la vista con los datos
        return $this->renderWithLayout('miembros/ver', 'default', [
            'miembro' => $miembro,
            'title' => "Perfil de {$miembro['nombres']} {$miembro['apellidos']}"
        ]);
    }

    /**
     * Obtiene los parámetros de la URL
     */
    private function getParams() {
        return isset($GLOBALS['router']) ? $GLOBALS['router']->getParams() : [];
    }
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\Core\Session.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\app\Core\Session.php

class Session {
    public static function start() {
        // No volver a configurar la sesión si ya está activa
        if (session_status() === PHP_SESSION_ACTIVE) {
            return;
        }
        
        // Configuración básica de seguridad
        ini_set('session.use_only_cookies', 1);
        ini_set('session.use_strict_mode', 1);
        ini_set('session.cookie_httponly', 1);
        
        // Solo habilitar cookies seguras cuando estamos en HTTPS
        if (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on') {
            ini_set('session.cookie_secure', 1);
        }
        
        // Nombre de sesión consistente
        session_name('ENCASASESSID');
        
        // Iniciar la sesión
        session_start();
        
        // Generar token CSRF si no existe
        if (!isset($_SESSION['csrf_token'])) {
            $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
        }
    }
    
    // El resto de métodos...
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\helpers\cors_helper.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\app\helpers\cors_helper.php

/**
 * Configuración dinámica de CORS para formularios
 * Detecta automáticamente si estamos en túnel o localhost
 */
function setup_cors() {
    // Detectar el entorno
    $is_https = isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on';
    $current_host = $_SERVER['HTTP_HOST'];
    $is_tunnel = (strpos($current_host, 'localto.net') !== false || 
                 strpos($current_host, 'loca.lt') !== false || 
                 strpos($current_host, 'serveo.net') !== false);
    
    // Establecer cabeceras CORS apropiadas
    if ($is_tunnel) {
        // Permitir el origen actual en túneles
        $protocol = $is_https ? 'https://' : 'http://';
        $origin = isset($_SERVER['HTTP_ORIGIN']) ? $_SERVER['HTTP_ORIGIN'] : $protocol . $current_host;
        header("Access-Control-Allow-Origin: $origin");
    } else {
        // En localhost ser menos restrictivo
        header("Access-Control-Allow-Origin: *");
    }
    
    // Cabeceras CORS comunes
    header("Access-Control-Allow-Methods: POST, GET, OPTIONS");
    header("Access-Control-Allow-Headers: Content-Type, Authorization, X-Requested-With");
    header("Access-Control-Allow-Credentials: true");
    
    // Manejar solicitudes preflight OPTIONS
    if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
        header("HTTP/1.1 200 OK");
        exit;
    }
}

/**
 * Genera URLs correctas según el entorno
 */
function form_url($path = '') {
    $current_host = $_SERVER['HTTP_HOST'];
    $is_tunnel = (strpos($current_host, 'localto.net') !== false || 
                 strpos($current_host, 'loca.lt') !== false || 
                 strpos($current_host, 'serveo.net') !== false);
    
    // Construir la base de la URL
    if ($is_tunnel) {
        // En túneles siempre usar HTTPS
        $base_url = "https://$current_host/encasa_database";
    } else {
        // En localhost usar HTTP
        $base_url = "http://$current_host/ENCASA_DATABASE";
    }
    
    // Formatear la URL
    $base_url = rtrim($base_url, '/');
    $path = $path ? '/' . ltrim($path, '/') : '';
    
    return $base_url . $path;
}

// Aplicar CORS automáticamente
setup_cors();


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\helpers\EmailService.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\app\helpers\EmailService.php
namespace App\Helpers;

use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;

class EmailService {
    private $mailer;
    
    /**
     * Constructor: configura el servicio de email
     */
    public function __construct() {
        // Inicializar PHPMailer
        $this->mailer = new PHPMailer(true);
        
        // Cambiar esto:
        if (APP_ENV === 'development') {
            $this->mailer->SMTPDebug = 1; // 1 = errores y mensajes
        }
        
        // Por esto:
        if (APP_ENV === 'development') {
            $this->mailer->SMTPDebug = 0; // 0 = sin depuración
        }
        
        // Esto debería usarse solo en desarrollo
        $this->mailer->SMTPOptions = [
            'ssl' => [
                'verify_peer' => false,
                'verify_peer_name' => false,
                'allow_self_signed' => true
            ]
        ];
        
        // Configurar servidor SMTP
        $this->mailer->isSMTP();
        $this->mailer->Host = SMTP_HOST;
        $this->mailer->SMTPAuth = SMTP_AUTH; // Usar la constante en lugar de hardcodear true
        $this->mailer->Username = SMTP_USER;
        $this->mailer->Password = SMTP_PASS;
        $this->mailer->SMTPSecure = SMTP_SECURE; // Usar la constante en lugar de hardcodear 'tls'
        $this->mailer->Port = SMTP_PORT;
        $this->mailer->CharSet = 'UTF-8';
        
        // Configuración del remitente (usar el mismo que SMTP_USER)
        $this->mailer->setFrom(SMTP_USER, MAIL_FROM_NAME);
    }
    
    /**
     * Envía un código de verificación por email
     * @param string $email Correo del destinatario
     * @param string $name Nombre del destinatario
     * @param string $code Código de verificación
     * @return bool True si se envió correctamente, false en caso contrario
     */
    public function sendVerificationCode($email, $name, $code) {
        try {
            $this->mailer->clearAddresses(); // Limpiar destinatarios previos
            $this->mailer->addAddress($email, $name);
            $this->mailer->isHTML(true);
            $this->mailer->Subject = 'Código de verificación - Iglesia En Casa';
            
            // Contenido del correo
            $body = "
            <div style='font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;'>
                <h2 style='color: #3949ab;'>Iglesia En Casa - Verificación</h2>
                <p>Hola {$name},</p>
                <p>Tu código de verificación es:</p>
                <div style='background-color: #f5f5f5; padding: 15px; text-align: center; font-size: 24px; letter-spacing: 5px; font-weight: bold;'>
                    {$code}
                </div>
                <p>Este código expirará en 1 hora.</p>
                <p>Si no solicitaste este código, puedes ignorar este correo.</p>
                <p>Gracias,<br>Equipo de Iglesia En Casa</p>
            </div>";
            
            $this->mailer->Body = $body;
            $this->mailer->AltBody = "Tu código de verificación es: {$code}. Este código expirará en 1 hora.";
            
            $this->mailer->send();
            
            // Registrar el éxito si existe la función log_info
            if (function_exists('log_info')) {
                log_info("Código de verificación enviado a $email");
            }
            return true;
        } catch (Exception $e) {
            // Registrar error si existe la función log_error
            if (function_exists('log_error')) {
                log_error("Error al enviar correo de verificación: " . $this->mailer->ErrorInfo);
            }
            return false;
        }
    }
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\helpers\functions.php
=============================================================

<?php
/**
 * Funciones auxiliares globales para logging y generación de URLs
 */

if (!function_exists('log_error')) {
    function log_error($message, $context = []) {
        \App\Helpers\Logger::getInstance()->error($message, $context);
    }
}

if (!function_exists('log_warning')) {
    function log_warning($message, $context = []) {
        \App\Helpers\Logger::getInstance()->warning($message, $context);
    }
}

if (!function_exists('log_info')) {
    function log_info($message, $context = []) {
        \App\Helpers\Logger::getInstance()->info($message, $context);
    }
}

if (!function_exists('log_debug')) {
    function log_debug($message, $context = []) {
        \App\Helpers\Logger::getInstance()->debug($message, $context);
    }
}

/**
 * Genera una URL completa para la aplicación
 * @param string $path Ruta relativa
 * @return string URL completa
 */
if (!function_exists('url')) {
    function url($path = '', $force_https = true)
    {
        // Usar APP_URL si está definida
        if (defined('APP_URL')) {
            $baseUrl = APP_URL;
            
            // Si es un túnel y queremos forzar HTTPS, asegurarnos que use https://
            if ($force_https && defined('APP_ENV') && APP_ENV === 'tunnel') {
                $baseUrl = str_replace('http://', 'https://', $baseUrl);
            }
        } else {
            // Si no está definida, detectar el entorno
            $protocol = isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? 'https://' : 'http://';
            $host = $_SERVER['HTTP_HOST'] ?? 'localhost';
            
            // Detectar si estamos usando un túnel
            $is_tunnel = strpos($host, 'ngrok-free.app') !== false || 
                       strpos($host, 'ngrok.io') !== false ||
                       strpos($host, 'localto.net') !== false || 
                       strpos($host, 'loca.lt') !== false;
            
            if ($is_tunnel) {
                // Forzar HTTPS para túneles
                $baseUrl = ($force_https ? 'https://' : $protocol) . $host . '/ENCASA_DATABASE';
            } else {
                $baseUrl = 'http://localhost/ENCASA_DATABASE';
            }
        }
        
        // Formatear URL correctamente
        $baseUrl = rtrim($baseUrl, '/');
        $path = ltrim($path, '/');
        
        return $baseUrl . ($path ? '/' . $path : '');
    }
}

/**
 * Genera una URL para recursos estáticos (CSS, JS, imágenes)
 * @param string $path Ruta relativa al archivo dentro de la carpeta /public
 * @return string URL completa al recurso
 */
if (!function_exists('asset')) {
    function asset($path = '')
    {
        return url('public/' . ltrim($path, '/'));
    }
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\helpers\JWT.php
=============================================================

<?php
namespace App\Helpers;

class JWT {
    private static $secret;
    
    /**
     * Inicializa la clave secreta para JWT
     */
    public static function init($secret = null) {
        if ($secret === null) {
            self::$secret = getenv('JWT_SECRET') ?: 'encasa_secret_key_change_in_production';
        } else {
            self::$secret = $secret;
        }
    }
    
    /**
     * Genera un JWT token
     */
    public static function encode($payload, $expiry = 86400) {
        if (self::$secret === null) {
            self::init();
        }
        
        // Añadir timestamps
        $payload['iat'] = time();
        $payload['exp'] = time() + $expiry;
        
        // Crear las partes del JWT
        $header = self::base64UrlEncode(json_encode([
            'alg' => 'HS256',
            'typ' => 'JWT'
        ]));
        
        $payload = self::base64UrlEncode(json_encode($payload));
        
        // Crear firma
        $signature = self::base64UrlEncode(hash_hmac(
            'sha256',
            "$header.$payload",
            self::$secret,
            true
        ));
        
        return "$header.$payload.$signature";
    }
    
    /**
     * Decodifica y verifica un JWT token
     */
    public static function decode($token) {
        if (self::$secret === null) {
            self::init();
        }
        
        // Dividir el token
        $parts = explode('.', $token);
        
        if (count($parts) !== 3) {
            return false;
        }
        
        list($header, $payload, $signature) = $parts;
        
        // Recrear la firma para verificación
        $recalculatedSignature = self::base64UrlEncode(hash_hmac(
            'sha256',
            "$header.$payload",
            self::$secret,
            true
        ));
        
        // Verificar firma
        if ($signature !== $recalculatedSignature) {
            return false;
        }
        
        // Decodificar el payload
        $payload = json_decode(self::base64UrlDecode($payload), true);
        
        // Verificar expiración
        if (isset($payload['exp']) && $payload['exp'] < time()) {
            return false;
        }
        
        return $payload;
    }
    
    private static function base64UrlEncode($data) {
        return str_replace(['+', '/', '='], ['-', '_', ''], base64_encode($data));
    }
    
    private static function base64UrlDecode($data) {
        $data = str_replace(['-', '_'], ['+', '/'], $data);
        $remainder = strlen($data) % 4;
        
        if ($remainder) {
            $data .= str_repeat('=', 4 - $remainder);
        }
        
        return base64_decode($data);
    }
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\helpers\Logger.php
=============================================================

<?php
namespace App\Helpers;

class Logger {
    private static $instance = null;
    private $logPath;
    private $logLevels = ['ERROR', 'WARNING', 'INFO', 'DEBUG'];
    private $currentLevel = 3; // Por defecto: DEBUG (todos los niveles)

    private function __construct() {
        $this->logPath = dirname(__DIR__) . '/logs/';
        if (!is_dir($this->logPath)) {
            mkdir($this->logPath, 0755, true);
        }
        $env = getenv('APP_ENV') ?: 'development';
        if ($env === 'production') {
            $this->currentLevel = 1; // Solo ERROR y WARNING
        }
    }

    public static function getInstance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    public function error($message, $context = []) { $this->log(0, $message, $context); }
    public function warning($message, $context = []) { $this->log(1, $message, $context); }
    public function info($message, $context = []) { $this->log(2, $message, $context); }
    public function debug($message, $context = []) { $this->log(3, $message, $context); }

    private function log($level, $message, $context = []) {
        if ($level > $this->currentLevel) return;

        $date = date('Y-m-d H:i:s');
        $logLevel = $this->logLevels[$level];
        
        $backtrace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, 2);
        $caller = isset($backtrace[1]['class']) ? $backtrace[1]['class'] . '::' . $backtrace[1]['function'] : 'unknown';
        
        $contextStr = !empty($context) ? ' ' . json_encode($context, JSON_UNESCAPED_UNICODE) : '';
        $logMessage = "[$date] [$logLevel] [$caller] $message$contextStr" . PHP_EOL;
        
        $filename = $this->logPath . date('Y-m-d') . '.log';
        file_put_contents($filename, $logMessage, FILE_APPEND);
    }
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\helpers\Router.php
=============================================================

<?php
namespace App\Helpers;

class Router {
    private $routes = [];
    private $params = [];
    private $notFoundCallback;
    
    /**
     * Añade una ruta al sistema
     */
    public function add($route, $controller, $action, $methods = ['GET'], $middleware = []) {
        // Convertir ruta a expresión regular para capturar parámetros
        $route = preg_replace('/\//', '\\/', $route);
        $route = preg_replace('/\{([a-z]+)\}/', '(?P<\1>[a-z0-9-]+)', $route);
        $route = '/^' . $route . '$/i';
        
        $this->routes[] = [
            'route' => $route,
            'controller' => $controller,
            'action' => $action,
            'methods' => $methods,
            'middleware' => $middleware
        ];
    }
    
    /**
     * Registra callback para rutas no encontradas
     */
    public function setNotFound($callback) {
        $this->notFoundCallback = $callback;
    }
    
    /**
     * Método abreviado para rutas GET
     */
    public function get($route, $controller, $action, $middleware = []) {
        $this->add($route, $controller, $action, ['GET'], $middleware);
    }
    
    /**
     * Método abreviado para rutas POST
     */
    public function post($route, $controller, $action, $middleware = []) {
        $this->add($route, $controller, $action, ['POST'], $middleware);
    }
    
    /**
     * Método abreviado para rutas PUT
     */
    public function put($route, $controller, $action, $middleware = []) {
        $this->add($route, $controller, $action, ['PUT'], $middleware);
    }
    
    /**
     * Método abreviado para rutas DELETE
     */
    public function delete($route, $controller, $action, $middleware = []) {
        $this->add($route, $controller, $action, ['DELETE'], $middleware);
    }
    
    /**
     * Despacha la ruta actual
     */
    public function dispatch() {
        // Obtener la ruta solicitada
        $url = $_SERVER['REQUEST_URI'] ?? '';
        
        // Eliminar la base del proyecto de la URL
        $base = str_replace('/index.php', '', $_SERVER['SCRIPT_NAME']);
        $url = str_replace($base, '', $url);
        
        // Eliminar la barra inicial y parámetros GET
        $url = ltrim($url, '/');
        $url = explode('?', $url)[0];
        
        // Debug para ver qué URL se está procesando
        error_log("URL a procesar: '$url'");
        
        $method = $_SERVER['REQUEST_METHOD'];
        
        // Si se envía _method en un formulario, usar ese método
        if ($method == 'POST' && isset($_POST['_method'])) {
            $method = strtoupper($_POST['_method']);
        }
        
        foreach ($this->routes as $route) {
            if (preg_match($route['route'], $url, $matches)) {
                // Verificar método HTTP
                if (!in_array($method, $route['methods'])) {
                    continue; // Método no permitido, seguir buscando
                }
                
                // Extraer los parámetros de la URL
                foreach ($matches as $key => $value) {
                    if (is_string($key)) {
                        $this->params[$key] = $value;
                    }
                }
                
                // Ejecutar middleware si existe
                foreach ($route['middleware'] as $middleware) {
                    $middlewareClass = "App\\Middleware\\$middleware";
                    if (class_exists($middlewareClass)) {
                        $middlewareObj = new $middlewareClass();
                        $result = $middlewareObj->handle();
                        if (!$result) {
                            // Si el middleware retorna falso, detener la ejecución
                            return;
                        }
                    }
                }
                
                // Cargar el controlador
                $controllerName = "App\\Controllers\\{$route['controller']}Controller";
                if (class_exists($controllerName)) {
                    $controller = new $controllerName();
                    $action = $route['action'];
                    
                    if (method_exists($controller, $action)) {
                        // Ejecutar la acción del controlador
                        $controller->$action($this->params);
                        return;
                    }
                }
                
                // Si llegamos aquí, el controlador o acción no existen
                $this->handleNotFound();
                return;
            }
        }
        
        // No se encontró ninguna ruta
        $this->handleNotFound();
    }
    
    /**
     * Maneja la situación de ruta no encontrada
     */
    private function handleNotFound() {
        if ($this->notFoundCallback) {
            call_user_func($this->notFoundCallback);
        } else {
            header("HTTP/1.0 404 Not Found");
            echo '<h1>404 - Página no encontrada</h1>';
            echo '<p>La página que estás buscando no existe.</p>';
        }
    }
    
    /**
     * Obtiene la URL actual
     */
    private function getUrl() {
        $url = isset($_GET['url']) ? $_GET['url'] : '';
        $url = rtrim($url, '/');
        $url = filter_var($url, FILTER_SANITIZE_URL);
        return $url;
    }
    
    /**
     * Obtiene los parámetros de la URL
     */
    public function getParams() {
        return $this->params;
    }
    
    /**
     * Redirige a una URL
     * @param string $url Ruta relativa a la que redirigir
     */
    public static function redirect($url) {
        // Usar la función url() para generar URLs consistentes
        if (function_exists('url')) {
            header('Location: ' . url($url));
        } else {
            // Fallback si la función url() no existe
            $baseUrl = defined('APP_URL') ? APP_URL : '/ENCASA_DATABASE';
            header('Location: ' . rtrim($baseUrl, '/') . '/' . ltrim($url, '/'));
        }
        exit;
    }
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\helpers\Validator.php
=============================================================

<?php
// filepath: /Applications/XAMPP/xamppfiles/htdocs/Encasa_Database/app/helpers/Validator.php
namespace App\Helpers;

class Validator {
    private $errors = [];
    
    public function validate($data, $rules) {
        $this->errors = [];
        
        foreach ($rules as $field => $fieldRules) {
            foreach ($fieldRules as $rule) {
                $ruleParts = explode(':', $rule);
                $ruleName = $ruleParts[0];
                $ruleParam = isset($ruleParts[1]) ? $ruleParts[1] : null;
                
                switch ($ruleName) {
                    case 'required':
                        if (!isset($data[$field]) || trim($data[$field]) === '') {
                            $this->errors[$field][] = "El campo {$field} es obligatorio.";
                        }
                        break;
                        
                    case 'email':
                        if (isset($data[$field]) && !filter_var($data[$field], FILTER_VALIDATE_EMAIL)) {
                            $this->errors[$field][] = "El campo {$field} debe ser un email válido.";
                        }
                        break;
                        
                    case 'min':
                        if (isset($data[$field]) && strlen($data[$field]) < $ruleParam) {
                            $this->errors[$field][] = "El campo {$field} debe tener al menos {$ruleParam} caracteres.";
                        }
                        break;
                }
            }
        }
        
        return empty($this->errors);
    }
    
    public function getErrors() {
        return $this->errors;
    }
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\helpers\View.php
=============================================================

<?php
namespace App\Helpers;

class View {
    /**
     * Renderiza una vista
     */
    public function render($view, $data = []) {
        // Extraer variables para que estén disponibles en la vista
        extract($data);
        
        // Incluir la vista
        $viewPath = VIEW_PATH . '/' . $view . '.php';
        
        if (file_exists($viewPath)) {
            include $viewPath;
        } else {
            throw new \Exception("Vista no encontrada: {$view}");
        }
    }
    
    /**
     * Renderiza una vista con un layout
     */
    public function renderWithLayout($view, $layout = 'default', $data = []) {
        // Extraer variables para que estén disponibles en la vista y el layout
        extract($data);
        
        // Capturar el contenido de la vista
        ob_start();
        $this->render($view, $data);
        $content = ob_get_clean();
        
        // Incluir el layout
        $layoutPath = VIEW_PATH . '/layouts/' . $layout . '.php';
        
        if (file_exists($layoutPath)) {
            include $layoutPath;
        } else {
            throw new \Exception("Layout no encontrado: {$layout}");
        }
    }
    
    /**
     * Incluye una vista parcial
     */
    public static function partial($partial, $data = []) {
        extract($data);
        
        $partialPath = VIEW_PATH . '/partials/' . $partial . '.php';
        
        if (file_exists($partialPath)) {
            include $partialPath;
        } else {
            throw new \Exception("Partial no encontrado: {$partial}");
        }
    }
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\middleware\AdminOnly.php
=============================================================

<?php
// filepath: /Applications/XAMPP/xamppfiles/htdocs/Encasa_Database/app/middleware/AdminOnly.php
namespace App\Middleware;

class AdminOnly extends Middleware {
    public function handle() {
        if (!isset($_SESSION['roles']) || !in_array('Admin', $_SESSION['roles'])) {
            $_SESSION['flash_message'] = 'No tienes permiso para acceder a esta área';
            $_SESSION['flash_type'] = 'danger';
            
            header('Location: ' . APP_URL);
            exit;
        }
        
        return true;
    }
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\middleware\Auth.php
=============================================================

<?php
// filepath: /Applications/XAMPP/xamppfiles/htdocs/Encasa_Database/app/middleware/Auth.php
namespace App\Middleware;

class Auth extends Middleware {
    public function handle() {
        if (!isset($_SESSION['user_id'])) {
            $_SESSION['flash_message'] = 'Debes iniciar sesión para acceder';
            $_SESSION['flash_type'] = 'warning';
            
            // Guardar URL intentada para redirección después del login
            $_SESSION['intended_url'] = $_SERVER['REQUEST_URI'];
            
            header('Location: ' . APP_URL . '/login');
            exit;
        }
        
        return true;
    }
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\middleware\Middleware.php
=============================================================

<?php
// filepath: /Applications/XAMPP/xamppfiles/htdocs/Encasa_Database/app/middleware/Middleware.php
namespace App\Middleware;

abstract class Middleware {
    /**
     * Método que se debe implementar en cada middleware
     */
    abstract public function handle();
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\middleware\RoleMiddleware.php
=============================================================

<?php

namespace App\Middleware;

use App\Models\Usuario;
use App\Models\Rol;

class RoleMiddleware {
    private $requiredLevel;
    
    public function __construct($level) {
        $this->requiredLevel = $level;
    }
    
    public function handle() {
        // Verificar que el usuario está autenticado
        if (!isset($_SESSION['user_id'])) {
            header('Location: ' . APP_URL . '/login');
            exit;
        }
        
        // Obtener información del rol del usuario
        $userModel = new Usuario();
        $user = $userModel->findById($_SESSION['user_id']);
        
        if (!$user) {
            $_SESSION['flash_message'] = 'Sesión inválida';
            $_SESSION['flash_type'] = 'danger';
            header('Location: ' . APP_URL . '/logout');
            exit;
        }
        
        // Cargar el rol
        $rolModel = new Rol();
        $rol = $rolModel->findById($user['rol_id']);
        
        // Verificar si el nivel de acceso es suficiente
        if (!$rol || $rol['nivel_acceso'] < $this->requiredLevel) {
            // Redirect a página de acceso denegado
            header('Location: ' . APP_URL . '/acceso-denegado');
            exit;
        }
        
        return true;
    }
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\models\CarreraBiblica.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\app\models\CarreraBiblica.php
namespace App\Models;

class CarreraBiblica extends Model {
    protected $table = 'CarreraBiblica';
    protected $fillable = [
        'miembro_id', 'carrera_biblica', 'miembro_de', 'casa_de_palabra_y_vida',
        'cobertura', 'estado', 'anotaciones', 'recorrido_espiritual'
    ];
    
    /**
     * Encuentra la información de carrera bíblica por ID de miembro
     */
    public function findByMiembro($miembroId) {
        $sql = "SELECT * FROM {$this->table} WHERE miembro_id = :miembro_id LIMIT 1";
        $stmt = $this->db->prepare($sql);
        $stmt->execute(['miembro_id' => $miembroId]);
        return $stmt->fetch();
    }
    
    /**
     * Actualiza o crea un registro de carrera bíblica para un miembro
     */
    public function actualizarOCrear($miembroId, $datos) {
        $actual = $this->findByMiembro($miembroId);
        
        if ($actual) {
            return $this->update($actual['id'], $datos);
        } else {
            $datos['miembro_id'] = $miembroId;
            return $this->create($datos);
        }
    }
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\models\Contacto.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\app\models\Contacto.php
namespace App\Models;

class Contacto extends Model {
    protected $table = 'Contacto';
    protected $fillable = [
        'miembro_id', 'tipo_documento', 'numero_documento', 'telefono', 'pais',
        'ciudad', 'direccion', 'estado_civil', 'correo_electronico',
        'instagram', 'facebook', 'notas', 'familiares'
    ];
    
    /**
     * Encuentra el contacto por ID de miembro
     */
    public function findByMiembro($miembroId) {
        $sql = "SELECT * FROM {$this->table} WHERE miembro_id = :miembro_id LIMIT 1";
        $stmt = $this->db->prepare($sql);
        $stmt->execute(['miembro_id' => $miembroId]);
        return $stmt->fetch();
    }
    
    /**
     * Actualiza o crea un registro de contacto para un miembro
     */
    public function actualizarOCrear($miembroId, $datos) {
        $actual = $this->findByMiembro($miembroId);
        
        if ($actual) {
            return $this->update($actual['id'], $datos);
        } else {
            $datos['miembro_id'] = $miembroId;
            return $this->create($datos);
        }
    }
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\models\EstudiosTrabajo.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\app\models\EstudiosTrabajo.php
namespace App\Models;

class EstudiosTrabajo extends Model {
    protected $table = 'EstudiosTrabajo';
    protected $fillable = [
        'miembro_id', 'nivel_estudios', 'profesion', 'otros_estudios',
        'empresa', 'direccion_empresa', 'emprendimientos'
    ];
    
    /**
     * Encuentra la información de estudios y trabajo por ID de miembro
     */
    public function findByMiembro($miembroId) {
        $sql = "SELECT * FROM {$this->table} WHERE miembro_id = :miembro_id LIMIT 1";
        $stmt = $this->db->prepare($sql);
        $stmt->execute(['miembro_id' => $miembroId]);
        return $stmt->fetch();
    }
    
    /**
     * Actualiza o crea un registro de estudios/trabajo para un miembro
     */
    public function actualizarOCrear($miembroId, $datos) {
        $actual = $this->findByMiembro($miembroId);
        
        if ($actual) {
            return $this->update($actual['id'], $datos);
        } else {
            $datos['miembro_id'] = $miembroId;
            return $this->create($datos);
        }
    }
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\models\Miembro.php
=============================================================

<?php
namespace App\Models;

class Miembro extends Model {
    protected $table = 'InformacionGeneral';
    protected $fillable = [
        'nombres', 'apellidos', 'celular', 'localidad', 'barrio', 
        'fecha_nacimiento', 'invitado_por', 'conector', 'estado_espiritual',
        'recorrido_espiritual', 'foto', 'habeas_data', 'fecha_ingreso'
    ];
    
    /**
     * Obtiene todos los miembros con información básica
     */
    public function getAll($order = 'apellidos', $dir = 'ASC') {
        $sql = "SELECT * FROM {$this->table} ORDER BY {$order} {$dir}";
        $stmt = $this->db->prepare($sql);
        $stmt->execute();
        return $stmt->fetchAll();
    }
    
    /**
     * Busca miembros por criterios
     */
    public function buscar($termino) {
        $termino = "%{$termino}%";
        $sql = "SELECT * FROM {$this->table} 
                WHERE nombres LIKE ? 
                OR apellidos LIKE ? 
                OR celular LIKE ?
                OR barrio LIKE ?
                OR localidad LIKE ?
                ORDER BY apellidos, nombres";
        $stmt = $this->db->prepare($sql);
        $stmt->execute([$termino, $termino, $termino, $termino, $termino]);
        return $stmt->fetchAll();
    }
    
    /**
     * Obtiene un listado básico de miembros para selector
     */
    public function getParaSelector() {
        $sql = "SELECT id, CONCAT(nombres, ' ', apellidos) as nombre_completo 
                FROM {$this->table} 
                ORDER BY apellidos, nombres";
        $stmt = $this->db->prepare($sql);
        $stmt->execute();
        return $stmt->fetchAll();
    }
    
    /**
     * Crea un nuevo miembro con sus datos relacionados
     */
    public function crearCompleto($datos) {
        try {
            $this->db->beginTransaction();
            
            // 1. Crear registro principal en InformacionGeneral
            $miembroId = $this->create($datos['informacion_general']);
            
            if (!$miembroId) {
                $this->db->rollBack();
                return false;
            }
            
            // 2. Crear registro de contacto si hay datos
            if (!empty($datos['contacto'])) {
                $datos['contacto']['miembro_id'] = $miembroId;
                $contactoModel = new Contacto();
                if (!$contactoModel->create($datos['contacto'])) {
                    $this->db->rollBack();
                    return false;
                }
            }
            
            // 3. Crear registro de estudios/trabajo si hay datos
            if (!empty($datos['estudios_trabajo'])) {
                $datos['estudios_trabajo']['miembro_id'] = $miembroId;
                $estudiosModel = new EstudiosTrabajo();
                if (!$estudiosModel->create($datos['estudios_trabajo'])) {
                    $this->db->rollBack();
                    return false;
                }
            }
            
            // 4. Crear registro de tallas si hay datos
            if (!empty($datos['tallas'])) {
                $datos['tallas']['miembro_id'] = $miembroId;
                $tallasModel = new Tallas();
                if (!$tallasModel->create($datos['tallas'])) {
                    $this->db->rollBack();
                    return false;
                }
            }
            
            // 5. Crear registro de carrera bíblica si hay datos
            if (!empty($datos['carrera_biblica'])) {
                $datos['carrera_biblica']['miembro_id'] = $miembroId;
                $carreraModel = new CarreraBiblica();
                if (!$carreraModel->create($datos['carrera_biblica'])) {
                    $this->db->rollBack();
                    return false;
                }
            }
            
            $this->db->commit();
            return $miembroId;
        } catch (\Exception $e) {
            $this->db->rollBack();
            error_log("Error al crear miembro: " . $e->getMessage());
            return false;
        }
    }
    
    /**
     * Obtiene el perfil completo de un miembro
     */
    public function getFullProfile($id) {
        // Asegurar que el ID es un entero
        $id = (int)$id;
        
        // Preparar consulta principal
        $sql = "SELECT * FROM InformacionGeneral WHERE id = ?";
        $stmt = $this->db->prepare($sql);
        $stmt->execute([$id]);
        $miembro = $stmt->fetch(\PDO::FETCH_ASSOC);
        
        if (!$miembro) {
            return null;
        }
        
        // Obtener datos de contacto
        $sql = "SELECT * FROM Contacto WHERE miembro_id = ?";
        $stmt = $this->db->prepare($sql);
        $stmt->execute([$id]);
        $contacto = $stmt->fetch(\PDO::FETCH_ASSOC);
        if ($contacto) {
            $miembro['contacto'] = $contacto;
        }
        
        // Obtener datos de estudios y trabajo
        $sql = "SELECT * FROM EstudiosTrabajo WHERE miembro_id = ?";
        $stmt = $this->db->prepare($sql);
        $stmt->execute([$id]);
        $estudios = $stmt->fetch(\PDO::FETCH_ASSOC);
        if ($estudios) {
            $miembro['estudios'] = $estudios;
        }
        
        // Obtener datos de tallas
        $sql = "SELECT * FROM Tallas WHERE miembro_id = ?";
        $stmt = $this->db->prepare($sql);
        $stmt->execute([$id]);
        $tallas = $stmt->fetch(\PDO::FETCH_ASSOC);
        if ($tallas) {
            $miembro['tallas'] = $tallas;
        }
        
        // Obtener datos de carrera bíblica
        $sql = "SELECT * FROM CarreraBiblica WHERE miembro_id = ?";
        $stmt = $this->db->prepare($sql);
        $stmt->execute([$id]);
        $carrera = $stmt->fetch(\PDO::FETCH_ASSOC);
        if ($carrera) {
            $miembro['carrera'] = $carrera;
        }
        
        return $miembro;
    }
    
    /**
     * Verifica si un miembro existe en la base de datos
     */
    public function checkMemberExists($id) {
        $sql = "SELECT id FROM {$this->table} WHERE id = :id";
        $stmt = $this->db->prepare($sql);
        $stmt->execute(['id' => $id]);
        return $stmt->rowCount() > 0;
    }
    
    /**
     * Crea un nuevo registro en la tabla de información general
     */
    public function crear($datos) {
        try {
            // Preparar consulta
            $campos = array_keys($datos);
            $valores = array_values($datos);
            
            $campos_str = implode(', ', $campos);
            $placeholders = implode(', ', array_fill(0, count($campos), '?'));
            
            $sql = "INSERT INTO InformacionGeneral ($campos_str) VALUES ($placeholders)";
            
            $stmt = $this->db->prepare($sql);
            $stmt->execute($valores);
            
            return $this->db->lastInsertId();
        } catch (\PDOException $e) {
            error_log("Error al crear miembro: " . $e->getMessage());
            return false;
        }
    }
    
    /**
     * Guarda datos de contacto de un miembro
     */
    public function guardarContacto($datos) {
        try {
            // Verificar si ya existe un registro para este miembro
            $stmt = $this->db->prepare("SELECT id FROM Contacto WHERE miembro_id = ?");
            $stmt->execute([$datos['miembro_id']]);
            $existe = $stmt->fetch(\PDO::FETCH_ASSOC);
            
            if ($existe) {
                // Actualizar registro existente
                $id = $existe['id'];
                
                // Eliminar miembro_id del array para la actualización
                $miembro_id = $datos['miembro_id'];
                unset($datos['miembro_id']);
                
                $sets = [];
                foreach ($datos as $campo => $valor) {
                    $sets[] = "$campo = ?";
                }
                $sets_str = implode(', ', $sets);
                
                $sql = "UPDATE Contacto SET $sets_str WHERE id = ?";
                
                $stmt = $this->db->prepare($sql);
                $stmt->execute([...array_values($datos), $id]);
            } else {
                // Insertar nuevo registro
                $campos = array_keys($datos);
                $valores = array_values($datos);
                
                $campos_str = implode(', ', $campos);
                $placeholders = implode(', ', array_fill(0, count($campos), '?'));
                
                $sql = "INSERT INTO Contacto ($campos_str) VALUES ($placeholders)";
                
                $stmt = $this->db->prepare($sql);
                $stmt->execute($valores);
            }
            
            return true;
        } catch (\PDOException $e) {
            error_log("Error al guardar contacto: " . $e->getMessage());
            return false;
        }
    }
    
    // Implementar métodos similares para las otras tablas:
    // - guardarEstudiosTrabajo()
    // - guardarTallas()
    // - guardarCarreraBiblica()
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\models\Model.php
=============================================================

<?php
namespace App\Models;

abstract class Model {
    protected $db;
    protected $table;
    protected $fillable = [];
    
    public function __construct() {
        $database = \Database::getInstance(); // Usamos el namespace global
        $this->db = $database->getConnection();
    }
    
    /**
     * Encuentra un registro por su ID
     */
    public function findById($id) {
        $query = "SELECT * FROM {$this->table} WHERE id = :id LIMIT 1";
        $stmt = $this->db->prepare($query);
        $stmt->bindValue(':id', $id);
        $stmt->execute();
        return $stmt->fetch();
    }
    
    /**
     * Obtiene todos los registros
     */
    public function getAll() {
        $query = "SELECT * FROM {$this->table}";
        $stmt = $this->db->prepare($query);
        $stmt->execute();
        return $stmt->fetchAll();
    }
    
    /**
     * Crea un nuevo registro
     */
    public function create(array $data) {
        // Filtrar solo los campos permitidos
        $data = $this->filterFields($data);
        
        if (empty($data)) {
            return false;
        }
        
        $fields = array_keys($data);
        $placeholders = array_map(function($field) {
            return ':' . $field;
        }, $fields);
        
        $query = "INSERT INTO {$this->table} (" . implode(', ', $fields) . ") 
                  VALUES (" . implode(', ', $placeholders) . ")";
        
        $stmt = $this->db->prepare($query);
        
        foreach ($data as $key => $value) {
            $stmt->bindValue(':' . $key, $value);
        }
        
        $stmt->execute();
        return $this->db->lastInsertId();
    }
    
    /**
     * Actualiza un registro existente
     */
    public function update($id, $data) {
        $fields = [];
        foreach ($data as $key => $value) {
            $fields[] = "{$key} = :{$key}";
        }
        
        $query = "UPDATE {$this->table} SET " . implode(', ', $fields) . " WHERE id = :id";
        $stmt = $this->db->prepare($query);
        
        foreach ($data as $key => $value) {
            $stmt->bindValue(":{$key}", $value);
        }
        
        $stmt->bindValue(':id', $id);
        return $stmt->execute();
    }
    
    /**
     * Elimina un registro
     */
    public function delete($id) {
        $query = "DELETE FROM {$this->table} WHERE id = :id";
        $stmt = $this->db->prepare($query);
        $stmt->bindValue(':id', $id);
        return $stmt->execute();
    }
    
    /**
     * Filtra los campos según las reglas de fillable y guarded
     */
    protected function filterFields(array $data) {
        if (!empty($this->fillable)) {
            return array_intersect_key($data, array_flip($this->fillable));
        }
        
        return $data;
    }
    
    /**
     * Encuentra registros por condición
     */
    public function findWhere($field, $value) {
        $query = "SELECT * FROM {$this->table} WHERE {$field} = :value";
        $stmt = $this->db->prepare($query);
        $stmt->bindValue(':value', $value);
        $stmt->execute();
        return $stmt->fetchAll();
    }
    
    /**
     * Encuentra un único registro por condición
     */
    public function findOneWhere($field, $value) {
        $query = "SELECT * FROM {$this->table} WHERE {$field} = :value LIMIT 1";
        $stmt = $this->db->prepare($query);
        $stmt->bindValue(':value', $value);
        $stmt->execute();
        return $stmt->fetch();
    }
    
    /**
     * Cuenta registros totales
     */
    public function count() {
        $query = "SELECT COUNT(*) as count FROM {$this->table}";
        $stmt = $this->db->prepare($query);
        $stmt->execute();
        $result = $stmt->fetch();
        return (int) $result['count'];
    }
    
    /**
     * Ejecuta una consulta personalizada
     */
    public function query($sql, $params = []) {
        $stmt = $this->db->prepare($sql);
        $stmt->execute($params);
        return $stmt;
    }
    
    /**
     * Obtiene una fila de la base de datos
     * 
     * @param string $sql Consulta SQL
     * @param array $params Parámetros para la consulta
     * @return array|null Fila encontrada o null
     */
    protected function getRow($sql, $params = []) {
        $stmt = $this->db->prepare($sql);
        $stmt->execute($params);
        return $stmt->fetch(\PDO::FETCH_ASSOC);
    }
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\models\Permiso.php
=============================================================

<?php

namespace App\Models;

class Permiso extends Model {
    protected $table = 'Permisos';
    protected $fillable = ['nombre', 'descripcion', 'categoria'];
    
    /**
     * Obtiene todos los permisos agrupados por categoría
     */
    public function getAllByCategory() {
        $sql = "SELECT * FROM {$this->table} ORDER BY categoria, nombre";
        $stmt = $this->db->prepare($sql);
        $stmt->execute();
        $permisos = $stmt->fetchAll();
        
        $result = [];
        foreach ($permisos as $permiso) {
            $categoria = $permiso['categoria'];
            if (!isset($result[$categoria])) {
                $result[$categoria] = [];
            }
            $result[$categoria][] = $permiso;
        }
        
        return $result;
    }
    
    /**
     * Verifica si un usuario tiene un permiso específico
     */
    public function usuarioTienePermiso($userId, $permisoNombre) {
        $sql = "SELECT COUNT(*) FROM Permisos p 
                JOIN RolesPermisos rp ON p.id = rp.permiso_id 
                JOIN Roles r ON r.id = rp.rol_id
                JOIN Usuarios u ON u.rol_id = r.id
                WHERE u.id = ? AND p.nombre = ?";
        
        $stmt = $this->db->prepare($sql);
        $stmt->execute([$userId, $permisoNombre]);
        return (int)$stmt->fetchColumn() > 0;
    }
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\models\Rol.php
=============================================================

<?php
namespace App\Models;

class Rol extends Model {
    protected $table = 'Roles';
    protected $fillable = ['nombre', 'descripcion', 'nivel_acceso'];
    
    /**
     * Obtiene todos los permisos asociados a este rol
     */
    public function getPermisos($rolId) {
        $sql = "SELECT p.* FROM Permisos p 
                JOIN RolesPermisos rp ON p.id = rp.permiso_id 
                WHERE rp.rol_id = ?";
                
        $stmt = $this->db->prepare($sql);
        $stmt->execute([$rolId]);
        return $stmt->fetchAll();
    }
    
    /**
     * Verifica si el rol tiene un permiso específico
     */
    public function tienePermiso($rolId, $permisoNombre) {
        $sql = "SELECT COUNT(*) FROM Permisos p 
                JOIN RolesPermisos rp ON p.id = rp.permiso_id 
                WHERE rp.rol_id = ? AND p.nombre = ?";
                
        $stmt = $this->db->prepare($sql);
        $stmt->execute([$rolId, $permisoNombre]);
        return (int)$stmt->fetchColumn() > 0;
    }
    
    /**
     * Asigna un permiso al rol
     */
    public function asignarPermiso($rolId, $permisoId) {
        $sql = "INSERT IGNORE INTO RolesPermisos (rol_id, permiso_id) VALUES (?, ?)";
        $stmt = $this->db->prepare($sql);
        return $stmt->execute([$rolId, $permisoId]);
    }
    
    /**
     * Revoca un permiso del rol
     */
    public function revocarPermiso($rolId, $permisoId) {
        $sql = "DELETE FROM RolesPermisos WHERE rol_id = ? AND permiso_id = ?";
        $stmt = $this->db->prepare($sql);
        return $stmt->execute([$rolId, $permisoId]);
    }
    
    /**
     * Elimina todos los permisos de un rol
     */
    public function eliminarTodosPermisos($rolId) {
        $sql = "DELETE FROM RolesPermisos WHERE rol_id = ?";
        $stmt = $this->db->prepare($sql);
        return $stmt->execute([$rolId]);
    }
    
    /**
     * Obtiene los usuarios asignados a un rol
     */
    public function getUsuarios($rolId) {
        $sql = "SELECT u.* FROM Usuarios u WHERE u.rol_id = ?";
        $stmt = $this->db->prepare($sql);
        $stmt->execute([$rolId]);
        return $stmt->fetchAll();
    }
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\models\Tallas.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\app\models\Tallas.php
namespace App\Models;

class Tallas extends Model {
    protected $table = 'Tallas';
    protected $fillable = [
        'miembro_id', 'talla_camisa', 'talla_camiseta', 'talla_pantalon',
        'talla_zapatos'
    ];
    
    /**
     * Encuentra la información de tallas por ID de miembro
     */
    public function findByMiembro($miembroId) {
        $sql = "SELECT * FROM {$this->table} WHERE miembro_id = :miembro_id LIMIT 1";
        $stmt = $this->db->prepare($sql);
        $stmt->execute(['miembro_id' => $miembroId]);
        return $stmt->fetch();
    }
    
    /**
     * Actualiza o crea un registro de tallas para un miembro
     */
    public function actualizarOCrear($miembroId, $datos) {
        $actual = $this->findByMiembro($miembroId);
        
        if ($actual) {
            return $this->update($actual['id'], $datos);
        } else {
            $datos['miembro_id'] = $miembroId;
            return $this->create($datos);
        }
    }
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\models\Usuario.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\app\models\Usuario.php
namespace App\Models;

class Usuario extends Model {
    protected $table = 'usuarios';
    // Actualizar $fillable para que coincida con la estructura de la tabla
    protected $fillable = [
        'username', 
        'email', 
        'password', 
        'nombre_completo', 
        'miembro_id', 
        'rol_id',
        'ultimo_acceso', 
        'estado',
        'intentos_fallidos',
        'token_reset'
    ];
    
    /**
     * Encuentra un usuario por su nombre de usuario
     */
    public function findByUsername($username) {
        return $this->findOneWhere('username', $username);
    }
    
    /**
     * Encuentra un usuario por su correo electrónico
     */
    public function findByEmail($email) {
        return $this->findOneWhere('email', $email);
    }
    
    /**
     * Encuentra un usuario por email o nombre de usuario
     * @param string $emailOrUsername Email o nombre de usuario
     * @return array|bool El usuario encontrado o false
     */
    public function findByEmailOrUsername($emailOrUsername) {
        $query = "SELECT * FROM {$this->table} WHERE email = ? OR username = ? LIMIT 1";
        $stmt = $this->db->prepare($query);
        $stmt->execute([$emailOrUsername, $emailOrUsername]);
        
        $result = $stmt->fetch();
        return $result ? $result : false;
    }
    
    /**
     * Encuentra un registro por una condición específica
     */
    public function findOneWhere($field, $value) {
        $query = "SELECT * FROM {$this->table} WHERE {$field} = :value LIMIT 1";
        $stmt = $this->db->prepare($query);
        $stmt->bindValue(':value', $value);
        $stmt->execute();
        return $stmt->fetch();
    }
    
    /**
     * Encuentra un usuario por su ID
     */
    public function findById($id) {
        $query = "SELECT * FROM {$this->table} WHERE id = ? LIMIT 1";
        $stmt = $this->db->prepare($query);
        $stmt->execute([$id]);
        
        return $stmt->fetch();
    }

    /**
     * Autentica un usuario por su nombre de usuario/email y contraseña
     */
    public function authenticate($username, $password) {
        echo "<div style='background:#f8f9fa;padding:10px;margin:10px 0;border-radius:5px;'>";
        echo "<h4>Depuración de autenticación:</h4>";
        
        $user = $this->findByUsername($username);
        echo "<p>Buscando por username: " . ($user ? "Encontrado" : "No encontrado") . "</p>";
        
        if (!$user) {
            // Intentar con email
            echo "<p>Buscando por email...</p>";
            $user = $this->findByEmail($username);
            echo "<p>Resultado búsqueda por email: " . ($user ? "Encontrado" : "No encontrado") . "</p>";
        }
        
        if (!$user) {
            echo "<p>Usuario no encontrado</p>";
            echo "</div>";
            return false;
        }
        
        // Verificamos si la contraseña está hasheada correctamente
        echo "<p>Usuario encontrado, ID: {$user['id']}, Username: {$user['username']}</p>";
        echo "<p>Hash almacenado: {$user['password']}</p>";
        
        $passwordMatch = password_verify($password, $user['password']);
        echo "<p>Contraseña introducida: $password</p>";
        echo "<p>¿Contraseña coincide?: " . ($passwordMatch ? "SÍ" : "NO") . "</p>";
        
        echo "</div>";
        
        if (!$passwordMatch) {
            return false;
        }
        
        // Actualizar último acceso (no último_login)
        $this->update($user['id'], [
            'ultimo_acceso' => date('Y-m-d H:i:s')
        ]);
        
        return $user;
    }
    
    /**
     * Hashea una contraseña
     */
    public function hashPassword($password) {
        return password_hash($password, PASSWORD_DEFAULT);
    }
    
    /**
     * Verifica si una contraseña coincide con su hash
     */
    public function verifyPassword($password, $hash) {
        return password_verify($password, $hash);
    }
    
    /**
     * Crea un nuevo usuario con contraseña hasheada
     */
    public function register($data) {
        // Log para depuración
        error_log("Intentando registrar usuario: " . $data['username']);
        
        // Verificar si el usuario ya existe
        if ($this->findByUsername($data['username'])) {
            error_log("Usuario ya existe: " . $data['username']);
            return false;
        }
        
        // Verificar si el email ya existe
        if (!empty($data['email']) && $this->findByEmail($data['email'])) {
            error_log("Email ya existe: " . $data['email']);
            return false;
        }
        
        // Hashear la contraseña
        $data['password'] = $this->hashPassword($data['password']);
        
        // Asegurar que tiene campos obligatorios
        if (!isset($data['miembro_id'])) {
            error_log("Falta miembro_id para el usuario: " . $data['username']);
            return false;
        }
        
        if (!isset($data['rol_id'])) {
            error_log("Falta rol_id para el usuario: " . $data['username']);
            return false;
        }
        
        // Crear el usuario
        try {
            $id = $this->create($data);
            error_log("Usuario creado con ID: $id");
            return $id;
        } catch (\PDOException $e) {
            error_log("Error al crear usuario: " . $e->getMessage());
            return false;
        }
    }
    
    /**
     * Obtiene los roles del usuario
     */
    public function getRoles($userId) {
        $sql = "SELECT r.* FROM RolesUsuario ru
                JOIN Roles r ON ru.rol_id = r.id
                WHERE ru.usuario_id = :user_id";
                
        $stmt = $this->db->prepare($sql);
        $stmt->bindValue(':user_id', $userId);
        $stmt->execute();
        
        return $stmt->fetchAll();
    }
    
    /**
     * Verifica si un usuario tiene un rol específico
     */
    public function hasRole($userId, $roleName) {
        $sql = "SELECT COUNT(*) as count FROM RolesUsuario ru
                JOIN Roles r ON ru.rol_id = r.id
                WHERE ru.usuario_id = :user_id AND r.nombre = :role_name";
                
        $stmt = $this->db->prepare($sql);
        $stmt->bindValue(':user_id', $userId);
        $stmt->bindValue(':role_name', $roleName);
        $stmt->execute();
        
        $result = $stmt->fetch();
        return (int) $result['count'] > 0;
    }

    /**
     * Obtiene todos los usuarios
     */
    public function getAll() {
        $query = "SELECT * FROM {$this->table}";
        $stmt = $this->db->prepare($query);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    /**
     * Actualiza un usuario
     */
    public function update($id, $data) {
        $fields = [];
        $values = [];
        
        foreach ($data as $key => $value) {
            $fields[] = "{$key} = ?";
            $values[] = $value;
        }
        
        // Añadir el ID al final del array de valores
        $values[] = $id;
        
        $query = "UPDATE {$this->table} SET " . implode(', ', $fields) . " WHERE id = ?";
        $stmt = $this->db->prepare($query);
        $stmt->execute($values);
        
        return $stmt->rowCount() > 0;
    }
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\models\VerificationCode.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\app\models\VerificationCode.php
namespace App\Models;

class VerificationCode extends Model {
    protected $table = 'Verification_Codes';
    
    /**
     * Genera un código aleatorio de verificación
     * @return string Código de 6 dígitos
     */
    public static function generateCode() {
        return str_pad(rand(1, 999999), 6, '0', STR_PAD_LEFT);
    }
    
    /**
     * Crea un nuevo código de verificación para un usuario
     * @param int $userId ID del usuario
     * @param string $type Tipo de verificación (email_verification por defecto)
     * @return string El código generado
     */
    public function createForUser($userId, $type = 'email_verification') {
        $code = self::generateCode();
        $expiresAt = date('Y-m-d H:i:s', time() + 3600); // Expira en 1 hora
        
        $query = "INSERT INTO {$this->table} (user_id, code, type, expires_at, used) 
                 VALUES (?, ?, ?, ?, 0)";
        $stmt = $this->db->prepare($query);
        $stmt->execute([$userId, $code, $type, $expiresAt]);
        
        return $code;
    }
    
    /**
     * Verifica si un código es válido
     * @param int $userId ID del usuario
     * @param string $code Código a verificar
     * @param string $type Tipo de verificación
     * @return bool True si el código es válido, false en caso contrario
     */
    public function verifyCode($userId, $code, $type = 'email_verification') {
        $now = date('Y-m-d H:i:s');
        $query = "SELECT * FROM {$this->table} 
                 WHERE user_id = ? AND code = ? AND type = ? 
                 AND expires_at > ? AND used = 0
                 ORDER BY created_at DESC LIMIT 1";
                 
        $stmt = $this->db->prepare($query);
        $stmt->execute([$userId, $code, $type, $now]);
        $result = $stmt->fetch();
        
        if (!$result) {
            return false;
        }
        
        // Marcar el código como usado
        $updateQuery = "UPDATE {$this->table} SET used = 1 WHERE id = ?";
        $updateStmt = $this->db->prepare($updateQuery);
        $updateStmt->execute([$result['id']]);
        
        return true;
    }
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\views\admin\roles\index.php
=============================================================

<?php 
require_once APP_PATH . '/views/partials/header.php';
require_once APP_PATH . '/views/partials/navbar.php';
?>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Gestión de Roles</h1>
        <a href="<?= APP_URL ?>/admin/roles/crear" class="btn btn-primary">
            <i class="fas fa-plus-circle"></i> Nuevo Rol
        </a>
    </div>
    
    <?php if(isset($_SESSION['flash_message'])): ?>
    <div class="alert alert-<?= $_SESSION['flash_type'] ?? 'info' ?> alert-dismissible fade show">
        <?= $_SESSION['flash_message'] ?>
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
    <?php unset($_SESSION['flash_message']); unset($_SESSION['flash_type']); endif; ?>
    
    <div class="card shadow">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead class="table-light">
                        <tr>
                            <th>#</th>
                            <th>Nombre</th>
                            <th>Descripción</th>
                            <th>Nivel de Acceso</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        <?php foreach($roles as $rol): ?>
                        <tr>
                            <td><?= $rol['id'] ?></td>
                            <td><?= htmlspecialchars($rol['nombre']) ?></td>
                            <td><?= htmlspecialchars($rol['descripcion']) ?></td>
                            <td><?= $rol['nivel_acceso'] ?></td>
                            <td>
                                <a href="<?= APP_URL ?>/admin/roles/editar/<?= $rol['id'] ?>" class="btn btn-sm btn-info">
                                    <i class="fas fa-edit"></i>
                                </a>
                                <a href="<?= APP_URL ?>/admin/roles/permisos/<?= $rol['id'] ?>" class="btn btn-sm btn-warning">
                                    <i class="fas fa-key"></i>
                                </a>
                                <button class="btn btn-sm btn-danger" onclick="confirmarEliminar(<?= $rol['id'] ?>)">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </td>
                        </tr>
                        <?php endforeach; ?>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script>
function confirmarEliminar(id) {
    if (confirm('¿Estás seguro de que deseas eliminar este rol?')) {
        window.location.href = '<?= APP_URL ?>/admin/roles/eliminar/' + id;
    }
}
</script>

<?php require_once APP_PATH . '/views/partials/footer.php'; ?>


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\views\admin\roles\permisos.php
=============================================================

<?php
require_once APP_PATH . '/views/partials/header.php';
require_once APP_PATH . '/views/partials/navbar.php';
?>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Permisos del Rol: <?= htmlspecialchars($rol['nombre']) ?></h1>
        <a href="<?= APP_URL ?>/admin/roles" class="btn btn-secondary">
            <i class="fas fa-arrow-left"></i> Volver a Roles
        </a>
    </div>
    
    <?php if(isset($_SESSION['flash_message'])): ?>
    <div class="alert alert-<?= $_SESSION['flash_type'] ?? 'info' ?> alert-dismissible fade show">
        <?= $_SESSION['flash_message'] ?>
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
    <?php unset($_SESSION['flash_message']); unset($_SESSION['flash_type']); endif; ?>
    
    <div class="card shadow">
        <div class="card-body">
            <form action="<?= APP_URL ?>/admin/roles/permisos/<?= $rol['id'] ?>" method="post">
                <div class="row">
                    <?php foreach($permisos as $permiso): ?>
                    <div class="col-md-4 mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" name="permisos[]" 
                                value="<?= $permiso['id'] ?>" id="permiso_<?= $permiso['id'] ?>"
                                <?= in_array($permiso['id'], $permisosRol) ? 'checked' : '' ?>>
                            <label class="form-check-label" for="permiso_<?= $permiso['id'] ?>">
                                <?= htmlspecialchars($permiso['nombre']) ?>
                                <small class="d-block text-muted"><?= htmlspecialchars($permiso['descripcion']) ?></small>
                            </label>
                        </div>
                    </div>
                    <?php endforeach; ?>
                </div>
                <div class="text-end mt-3">
                    <button type="submit" class="btn btn-primary">Guardar Permisos</button>
                </div>
            </form>
        </div>
    </div>
</div>

<?php require_once APP_PATH . '/views/partials/footer.php'; ?>


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\views\auth\forgot-password.php
=============================================================

<?php require_once APP_PATH . '/views/partials/header.php'; ?>

<div class="container">
    <div class="row justify-content-center mt-5">
        <div class="col-md-6 col-lg-5">
            <div class="card shadow">
                <div class="card-body p-4">
                    <h2 class="text-center mb-4">Recuperar Contraseña</h2>
                    
                    <?php if(isset($_SESSION['flash_message'])): ?>
                    <div class="alert alert-<?= $_SESSION['flash_type'] ?? 'info' ?> alert-dismissible fade show">
                        <?= $_SESSION['flash_message'] ?>
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                    <?php unset($_SESSION['flash_message']); unset($_SESSION['flash_type']); endif; ?>
                    
                    <p class="text-muted mb-4">Ingresa tu dirección de correo electrónico y te enviaremos un enlace para restablecer tu contraseña.</p>
                    
                    <form action="<?= APP_URL ?>/auth/reset-password-request" method="post">
                        <div class="mb-3">
                            <label for="email" class="form-label">Correo Electrónico</label>
                            <input type="email" class="form-control" id="email" name="email" required autocomplete="email">
                        </div>
                        
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">Enviar Enlace de Recuperación</button>
                        </div>
                    </form>
                    
                    <div class="text-center mt-3">
                        <a href="<?= APP_URL ?>/login">Volver al Inicio de Sesión</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<?php require_once APP_PATH . '/views/partials/footer.php'; ?>


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\views\auth\login.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\app\views\auth\login.php
?>
<div class="container mt-5">
  <div class="row justify-content-center">
    <div class="col-md-6">
      <div class="card shadow">
        <div class="card-header bg-primary text-white">
          <h2 class="my-2">Iniciar Sesión</h2>
        </div>
        <div class="card-body">
          <?php if (isset($_SESSION['flash_message'])): ?>
            <div class="alert alert-<?= $_SESSION['flash_type'] ?? 'info' ?>">
              <?= $_SESSION['flash_message'] ?>
              <?php if (isset($_SESSION['flash_action'])): ?>
                <div class="mt-2">
                  <?= $_SESSION['flash_action'] ?>
                </div>
              <?php endif; ?>
            </div>
            <?php 
              // Limpiar mensajes flash después de mostrarlos
              unset($_SESSION['flash_message']); 
              unset($_SESSION['flash_type']);
              unset($_SESSION['flash_action']);
            ?>
          <?php endif; ?>

          <?php if (isset($error)): ?>
            <div class="alert alert-danger">
              <?= $error ?>
              <?php if (isset($_SESSION['pending_verification'])): ?>
                <div class="mt-2">
                  <a href="<?= url('auth/resendCode') ?>" class="btn btn-sm btn-primary">Reenviar código</a>
                </div>
              <?php endif; ?>
            </div>
          <?php endif; ?>
          
          <form action="<?= url('auth/login', true) ?>" method="post" autocomplete="on">
            <!-- Asegurarnos de usar HTTPS -->
            <input type="hidden" name="secure_form" value="1">
            
            <div class="mb-3">
              <label for="email_or_username" class="form-label">Email o nombre de usuario</label>
              <input type="text" class="form-control" id="email_or_username" name="email_or_username" 
                     autocomplete="username" required autofocus>
            </div>
            
            <div class="mb-3">
              <label for="password" class="form-label">Contraseña</label>
              <input type="password" class="form-control" id="password" name="password" 
                     autocomplete="current-password" required>
            </div>
            
            <div class="d-grid gap-2">
              <button type="submit" class="btn btn-primary">Iniciar Sesión</button>
            </div>
          </form>
          
          <div class="text-center mt-3">
            <a href="<?= url('registro') ?>">¿No tienes cuenta? Regístrate</a>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\views\auth\register.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\app\views\auth\register.php
?>
<div class="row justify-content-center">
  <div class="col-md-8 col-lg-6">
    <div class="card shadow">
      <div class="card-body">
        <h3 class="card-title text-center mb-4">Registro de Usuario</h3>
        
        <?php if(isset($errors)): ?>
        <div class="alert alert-danger">
          <ul class="mb-0">
            <?php foreach($errors as $error): ?>
            <li><?= $error ?></li>
            <?php endforeach; ?>
          </ul>
        </div>
        <?php endif; ?>
        
        <form action="<?= APP_URL ?>/auth/registro" method="post">
          <!-- Nombre completo -->
          <div class="mb-3">
            <label for="nombre_completo" class="form-label">Nombre completo</label>
            <input type="text" class="form-control" id="nombre_completo" name="nombre_completo" required>
          </div>
          
          <!-- Nombre de usuario -->
          <div class="mb-3">
            <label for="username" class="form-label">Nombre de usuario</label>
            <input type="text" class="form-control" id="username" name="username" required>
          </div>
          
          <!-- Correo electrónico -->
          <div class="mb-3">
            <label for="email" class="form-label">Correo electrónico</label>
            <input type="email" class="form-control" id="email" name="email" required>
          </div>
          
          <!-- Contraseña -->
          <div class="mb-3">
            <label for="password" class="form-label">Contraseña</label>
            <input type="password" class="form-control" id="password" name="password" required>
            <div class="form-text">Mínimo 6 caracteres</div>
          </div>
          
          <!-- Confirmación de contraseña -->
          <div class="mb-3">
            <label for="password_confirmation" class="form-label">Confirmar Contraseña</label>
            <input type="password" class="form-control" id="password_confirmation" name="password_confirmation" required>
          </div>
          
          <div class="d-grid gap-2">
            <button type="submit" class="btn btn-primary">Registrarse</button>
          </div>
        </form>
        
        <div class="text-center mt-3">
          <a href="<?= APP_URL ?>/login">¿Ya tienes cuenta? Iniciar sesión</a>
        </div>
      </div>
    </div>
  </div>
</div>


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\views\auth\reset-password.php
=============================================================

<?php require_once APP_PATH . '/views/partials/header.php'; ?>

<div class="container">
    <div class="row justify-content-center mt-5">
        <div class="col-md-6 col-lg-5">
            <div class="card shadow">
                <div class="card-body p-4">
                    <h2 class="text-center mb-4">Cambiar Contraseña</h2>
                    
                    <?php if(isset($_SESSION['flash_message'])): ?>
                    <div class="alert alert-<?= $_SESSION['flash_type'] ?? 'info' ?> alert-dismissible fade show">
                        <?= $_SESSION['flash_message'] ?>
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                    <?php unset($_SESSION['flash_message']); unset($_SESSION['flash_type']); endif; ?>
                    
                    <form action="<?= APP_URL ?>/auth/reset-password" method="post">
                        <input type="hidden" name="token" value="<?= $token ?>">
                        
                        <div class="mb-3">
                            <label for="password" class="form-label">Nueva Contraseña</label>
                            <input type="password" class="form-control" id="password" name="password" required minlength="6">
                        </div>
                        
                        <div class="mb-3">
                            <label for="password_confirmation" class="form-label">Confirmar Contraseña</label>
                            <input type="password" class="form-control" id="password_confirmation" name="password_confirmation" required minlength="6">
                        </div>
                        
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">Cambiar Contraseña</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<?php require_once APP_PATH . '/views/partials/footer.php'; ?>


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\views\auth\verify-login.php
=============================================================

<?php ?>
<div class="container mt-5">
  <div class="row justify-content-center">
    <div class="col-md-6">
      <div class="card shadow">
        <div class="card-header bg-primary text-white">
          <h3 class="mb-0">Verificación de Inicio de Sesión</h3>
        </div>
        <div class="card-body">
          <?php if (isset($error)): ?>
            <div class="alert alert-danger">
              <?= $error ?>
            </div>
          <?php endif; ?>
          
          <p>Para proteger tu cuenta, hemos enviado un código de verificación al correo:</p>
          <p class="font-weight-bold"><?= htmlspecialchars($email) ?></p>
          
          <form action="<?= APP_URL ?>/auth/verify-login" method="post">
            <div class="mb-4">
              <label for="code" class="form-label">Código de verificación</label>
              <input type="text" class="form-control form-control-lg text-center" 
                     name="code" id="code" maxlength="6" 
                     style="font-size: 24px; letter-spacing: 8px;"
                     placeholder="------" required autofocus>
              <div class="form-text">Ingresa el código de 6 dígitos enviado a tu correo.</div>
            </div>
            
            <div class="d-grid gap-2">
              <button type="submit" class="btn btn-primary btn-lg">Verificar y Continuar</button>
            </div>
          </form>
          
          <div class="text-center mt-3">
            <p>¿No recibiste el código? <a href="<?= APP_URL ?>/auth/resend-login-code">Reenviar código</a></p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Mejorar la experiencia de usuario para el campo de código
  document.getElementById('code').addEventListener('input', function(e) {
    // Permitir solo dígitos
    this.value = this.value.replace(/[^0-9]/g, '');
  });
</script>


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\views\auth\verify.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\app\views\auth\verify.php
?>
<div class="container mt-5">
  <div class="row justify-content-center">
    <div class="col-md-8 col-lg-6">
      <div class="card shadow">
        <div class="card-header bg-primary text-white">
          <h2 class="my-2">Verificación de tu cuenta</h2>
        </div>
        <div class="card-body">
          <?php if (isset($error)): ?>
            <div class="alert alert-danger">
              <?= $error ?>
            </div>
          <?php endif; ?>
          
          <p>Hemos enviado un código de verificación al correo <strong><?= $email ?></strong></p>
          <p>Ingresa el código de 6 dígitos para verificar tu cuenta:</p>
          
          <form action="<?= APP_URL ?>/auth/verify" method="post">
            <div class="mb-4">
              <div class="verification-code-container">
                <input type="text" class="form-control text-center fw-bold" 
                       name="code" id="code" maxlength="6" 
                       style="font-size: 24px; letter-spacing: 8px;"
                       placeholder="------" required autofocus>
              </div>
            </div>
            
            <div class="d-grid mb-3">
              <button type="submit" class="btn btn-primary btn-lg">Verificar Cuenta</button>
            </div>
          </form>
          
          <div class="text-center mt-3">
            <p>¿No recibiste el código? <a href="<?= APP_URL ?>/auth/resendCode">Reenviar código</a></p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.getElementById('code').addEventListener('input', function(e) {
    // Permitir solo dígitos
    this.value = this.value.replace(/[^0-9]/g, '');
  });
</script>


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\views\errors\404.php
=============================================================

<?php
// filepath: /Applications/XAMPP/xamppfiles/htdocs/Encasa_Database/app/views/errors/404.php
?>
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>404 - Página no encontrada | <?= APP_NAME ?></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6 text-center">
                <h1 class="display-1">404</h1>
                <p class="lead">Página no encontrada</p>
                <p>La página que estás buscando no existe o ha sido movida.</p>
                <a href="<?= APP_URL ?>" class="btn btn-primary">Volver al inicio</a>
            </div>
        </div>
    </div>
</body>
</html>


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\views\errors\acceso-denegado.php
=============================================================

<?php
 require_once APP_PATH . '/views/partials/header.php';
?>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card border-danger shadow">
                <div class="card-header bg-danger text-white">
                    <h3 class="mb-0">Acceso Denegado</h3>
                </div>
                <div class="card-body text-center">
                    <i class="fas fa-exclamation-triangle text-danger fa-5x mb-4"></i>
                    <h4>No tienes permisos suficientes para acceder a esta página</h4>
                    <p class="text-muted">Por favor, contacta con el administrador si consideras que deberías tener acceso.</p>
                    
                    <div class="mt-4">
                        <a href="<?= APP_URL ?>/" class="btn btn-primary">
                            <i class="fas fa-home"></i> Volver al Inicio
                        </a>
                        <a href="<?= APP_URL ?>/logout" class="btn btn-outline-secondary ml-2">
                            <i class="fas fa-sign-out-alt"></i> Cerrar Sesión
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<?php require_once APP_PATH . '/views/partials/footer.php'; ?>


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\views\home\index.php
=============================================================

<?php
// filepath: /Applications/XAMPP/xamppfiles/htdocs/Encasa_Database/app/views/home/index.php
?>
<div class="jumbotron bg-light p-5 rounded mb-4">
    <h1 class="display-4">¡Bienvenido a Iglesia En Casa!</h1>
    <p class="lead">Sistema de gestión de información para la comunidad</p>
    <hr class="my-4">
    
    <?php if (isset($user) && $user): ?>
        <p class="mb-4">Hola, <strong><?= htmlspecialchars($user['nombre_completo'] ?? $user['username']) ?></strong>. Bienvenido al sistema de gestión.</p>
        
        <div class="row">
            <div class="col-md-4 mb-3">
                <div class="card h-100">
                    <div class="card-body">
                        <h5 class="card-title">Miembros</h5>
                        <p class="card-text">Gestiona la información de los miembros de la iglesia.</p>
                    </div>
                    <div class="card-footer bg-transparent border-0">
                        <a href="<?= APP_URL ?>/miembros" class="btn btn-primary">Ver miembros</a>
                    </div>
                </div>
            </div>
            
            <div class="col-md-4 mb-3">
                <div class="card h-100">
                    <div class="card-body">
                        <h5 class="card-title">Ministerios</h5>
                        <p class="card-text">Administra los ministerios y sus participantes.</p>
                    </div>
                    <div class="card-footer bg-transparent border-0">
                        <a href="<?= APP_URL ?>/ministerios" class="btn btn-primary">Ver ministerios</a>
                    </div>
                </div>
            </div>
        </div>
    <?php else: ?>
        <p class="mb-4">Este sistema te permite gestionar la información de la Iglesia En Casa.</p>
        <div class="d-grid gap-2 d-md-block">
            <a class="btn btn-primary btn-lg" href="<?= APP_URL ?>/login">Iniciar sesión</a>
            <a class="btn btn-outline-primary btn-lg" href="<?= APP_URL ?>/registro">Registrarse</a>
        </div>
    <?php endif; ?>
</div>

<?php if (!isset($user) || !$user): ?>
<div class="row mt-4">
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="card-title mb-0">¿Qué es Iglesia En Casa?</h5>
            </div>
            <div class="card-body">
                <p class="card-text">Iglesia En Casa es una comunidad cristiana comprometida con compartir el amor de Dios y ayudar a otros a encontrar su propósito.</p>
                <p class="card-text">Este sistema nos permite administrar la información de nuestros miembros y ministerios de manera eficiente.</p>
            </div>
        </div>
    </div>
    
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="card-title mb-0">Contacto</h5>
            </div>
            <div class="card-body">
                <p class="card-text">Si tienes alguna duda sobre el sistema o deseas más información, no dudes en contactarnos.</p>
                <p class="card-text">Email: contacto@iglesiaencasa.org</p>
                <p class="card-text">Teléfono: (123) 456-7890</p>
            </div>
        </div>
    </div>
</div>
<?php endif; ?>


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\views\layouts\auth.php
=============================================================

<?php
// filepath: /Applications/XAMPP/xamppfiles/htdocs/Encasa_Database/app/views/layouts/auth.php
?>
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><?= isset($title) ? $title . ' - ' . APP_NAME : APP_NAME ?></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">
    <meta name="referrer" content="origin">
</head>
<body class="bg-light">
    <div class="container py-5">
        <div class="text-center mb-4">
            <h1 class="display-4 mb-3"><?= APP_NAME ?></h1>
            <p class="lead text-muted">Sistema de gestión de información</p>
        </div>
        
        <?php if (isset($_SESSION['flash_message'])): ?>
            <div class="alert alert-<?= $_SESSION['flash_type'] ?? 'info' ?> alert-dismissible fade show">
                <?= $_SESSION['flash_message'] ?>
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
            <?php unset($_SESSION['flash_message'], $_SESSION['flash_type']); ?>
        <?php endif; ?>
        
        <?= $content ?>
        
        <div class="text-center mt-5">
            <p class="text-muted">&copy; <?= date('Y') ?> - <?= APP_NAME ?></p>
            <p><a href="<?= APP_URL ?>">Volver al inicio</a></p>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\views\layouts\default.php
=============================================================

<?php
// Comentario actualizado para reflejar la ruta correcta en Windows
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\app\views\layouts\default.php
?>
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><?= isset($title) ? $title . ' - ' . APP_NAME : APP_NAME ?></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="<?= url() ?>">Iglesia En Casa</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" href="<?= url() ?>">Inicio</a>
                    </li>
                    <?php if (isset($_SESSION['user_id'])): ?>
                    <li class="nav-item">
                        <a class="nav-link" href="<?= url('miembros') ?>">Miembros</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="<?= url('ministerios') ?>">Ministerios</a>
                    </li>
                    <?php endif; ?>
                </ul>
                
                <ul class="navbar-nav ms-auto">
                    <?php if (isset($_SESSION['user_id'])): ?>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button" data-bs-toggle="dropdown">
                            <?= isset($_SESSION['user_name']) ? htmlspecialchars($_SESSION['user_name']) : 'Usuario' ?>
                        </a>
                        <ul class="dropdown-menu dropdown-menu-end">
                            <li><a class="dropdown-item" href="<?= url('perfil') ?>">Mi Perfil</a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" href="<?= url('logout') ?>">Cerrar Sesión</a></li>
                        </ul>
                    </li>
                    <?php else: ?>
                    <li class="nav-item">
                        <a class="nav-link" href="<?= url('login') ?>">Iniciar Sesión</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="<?= url('registro') ?>">Registrarse</a>
                    </li>
                    <?php endif; ?>
                </ul>
            </div>
        </div>
    </nav>

    <main class="container my-4">
        <?php if (isset($_SESSION['flash_message'])): ?>
        <div class="alert alert-<?= $_SESSION['flash_type'] ?? 'info' ?> alert-dismissible fade show">
            <?= $_SESSION['flash_message'] ?>
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
        <?php 
            unset($_SESSION['flash_message'], $_SESSION['flash_type']); 
        endif; 
        ?>
        
        <?= $content ?>
    </main>

    <footer class="bg-dark text-white py-3 mt-4">
        <div class="container text-center">
            &copy; <?= date('Y') ?> - <?= APP_NAME ?>
        </div>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\views\miembros\crear.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\app\views\miembros\crear.php

// Verificar si es modo edición
$esEdicion = isset($miembro) && !empty($miembro);
$titulo = $esEdicion ? 'Editar Miembro' : 'Registrar Nuevo Miembro';
?>

<div class="container mt-4">
    <h1><?= $titulo ?></h1>
    
    <form action="<?= APP_URL ?>/miembros/<?= $esEdicion ? 'actualizar/'.$miembro['id'] : 'guardar' ?>" method="POST" enctype="multipart/form-data">
        <!-- Si es edición, añadir campo oculto con ID -->
        <?php if($esEdicion): ?>
            <input type="hidden" name="id" value="<?= $miembro['id'] ?>">
        <?php endif; ?>

        <!-- Navegación por pestañas -->
        <ul class="nav nav-tabs mb-4" id="miembroTabs" role="tablist">
            <li class="nav-item">
                <a class="nav-link active" id="datos-tab" data-bs-toggle="tab" href="#datos" role="tab">Información General</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="contacto-tab" data-bs-toggle="tab" href="#contacto" role="tab">Contacto</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="estudios-tab" data-bs-toggle="tab" href="#estudios" role="tab">Estudios/Trabajo</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="tallas-tab" data-bs-toggle="tab" href="#tallas" role="tab">Tallas</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="espiritual-tab" data-bs-toggle="tab" href="#espiritual" role="tab">Carrera Bíblica</a>
            </li>
        </ul>

        <div class="tab-content" id="miembroTabContent">
            <!-- Pestaña de Información General -->
            <div class="tab-pane fade show active" id="datos" role="tabpanel">
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="nombres" class="form-label">Nombres *</label>
                        <input type="text" class="form-control" id="nombres" name="nombres" required 
                               value="<?= $esEdicion ? htmlspecialchars($miembro['nombres']) : '' ?>">
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="apellidos" class="form-label">Apellidos *</label>
                        <input type="text" class="form-control" id="apellidos" name="apellidos" required 
                               value="<?= $esEdicion ? htmlspecialchars($miembro['apellidos']) : '' ?>">
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-4 mb-3">
                        <label for="celular" class="form-label">Celular *</label>
                        <input type="tel" class="form-control" id="celular" name="celular" required 
                               value="<?= $esEdicion ? htmlspecialchars($miembro['celular']) : '' ?>">
                    </div>
                    <div class="col-md-4 mb-3">
                        <label for="fecha_nacimiento" class="form-label">Fecha de Nacimiento</label>
                        <input type="date" class="form-control" id="fecha_nacimiento" name="fecha_nacimiento" 
                               value="<?= $esEdicion && $miembro['fecha_nacimiento'] ? $miembro['fecha_nacimiento'] : '' ?>">
                    </div>
                    <div class="col-md-4 mb-3">
                        <label for="foto" class="form-label">Foto</label>
                        <input type="file" class="form-control" id="foto" name="foto" accept="image/*">
                        <?php if($esEdicion && !empty($miembro['foto'])): ?>
                            <div class="mt-2">
                                <img src="<?= APP_URL ?>/uploads/miembros/<?= $miembro['foto'] ?>" alt="Foto actual" class="img-thumbnail" style="max-height: 100px;">
                            </div>
                        <?php endif; ?>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="localidad" class="form-label">Localidad</label>
                        <input type="text" class="form-control" id="localidad" name="localidad" 
                               value="<?= $esEdicion ? htmlspecialchars($miembro['localidad'] ?? '') : '' ?>">
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="barrio" class="form-label">Barrio</label>
                        <input type="text" class="form-control" id="barrio" name="barrio" 
                               value="<?= $esEdicion ? htmlspecialchars($miembro['barrio'] ?? '') : '' ?>">
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="invitado_por" class="form-label">Invitado por</label>
                        <select class="form-select" id="invitado_por" name="invitado_por">
                            <option value="">-- Seleccione --</option>
                            <!-- Aquí cargar dinámicamente los miembros disponibles -->
                            <?php if(isset($miembros) && is_array($miembros)): ?>
                                <?php foreach($miembros as $m): ?>
                                    <option value="<?= $m['id'] ?>" <?= $esEdicion && $miembro['invitado_por'] == $m['id'] ? 'selected' : '' ?>>
                                        <?= htmlspecialchars($m['nombres'] . ' ' . $m['apellidos']) ?>
                                    </option>
                                <?php endforeach; ?>
                            <?php endif; ?>
                        </select>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="conector" class="form-label">Conector</label>
                        <input type="text" class="form-control" id="conector" name="conector" 
                               placeholder="Familiar, Amigo, Redes sociales, etc." 
                               value="<?= $esEdicion ? htmlspecialchars($miembro['conector'] ?? '') : '' ?>">
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="estado_espiritual" class="form-label">Estado Espiritual</label>
                        <select class="form-select" id="estado_espiritual" name="estado_espiritual">
                            <option value="">-- Seleccione --</option>
                            <option value="Visitante" <?= $esEdicion && ($miembro['estado_espiritual'] ?? '') == 'Visitante' ? 'selected' : '' ?>>Visitante</option>
                            <option value="Nuevo Creyente" <?= $esEdicion && ($miembro['estado_espiritual'] ?? '') == 'Nuevo Creyente' ? 'selected' : '' ?>>Nuevo Creyente</option>
                            <option value="Discípulo" <?= $esEdicion && ($miembro['estado_espiritual'] ?? '') == 'Discípulo' ? 'selected' : '' ?>>Discípulo</option>
                            <option value="Líder" <?= $esEdicion && ($miembro['estado_espiritual'] ?? '') == 'Líder' ? 'selected' : '' ?>>Líder</option>
                        </select>
                    </div>
                    <div class="col-md-6 mb-3">
                        <div class="form-check mt-4">
                            <input class="form-check-input" type="checkbox" id="habeas_data" name="habeas_data" value="1" 
                                  <?= $esEdicion && ($miembro['habeas_data'] ?? 0) ? 'checked' : '' ?>>
                            <label class="form-check-label" for="habeas_data">
                                Autoriza tratamiento de datos personales
                            </label>
                        </div>
                    </div>
                </div>

                <div class="mb-3">
                    <label for="recorrido_espiritual" class="form-label">Recorrido Espiritual</label>
                    <textarea class="form-control" id="recorrido_espiritual" name="recorrido_espiritual" rows="3"><?= $esEdicion ? htmlspecialchars($miembro['recorrido_espiritual'] ?? '') : '' ?></textarea>
                </div>
            </div>

            <!-- Pestaña de Contacto -->
            <div class="tab-pane fade" id="contacto" role="tabpanel">
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="tipo_documento" class="form-label">Tipo de Documento</label>
                        <select class="form-select" id="tipo_documento" name="contacto[tipo_documento]">
                            <option value="">-- Seleccione --</option>
                            <option value="CC" <?= $esEdicion && isset($miembro['contacto']['tipo_documento']) && $miembro['contacto']['tipo_documento'] == 'CC' ? 'selected' : '' ?>>Cédula de Ciudadanía</option>
                            <option value="CE" <?= $esEdicion && isset($miembro['contacto']['tipo_documento']) && $miembro['contacto']['tipo_documento'] == 'CE' ? 'selected' : '' ?>>Cédula de Extranjería</option>
                            <option value="TI" <?= $esEdicion && isset($miembro['contacto']['tipo_documento']) && $miembro['contacto']['tipo_documento'] == 'TI' ? 'selected' : '' ?>>Tarjeta de Identidad</option>
                            <option value="Pasaporte" <?= $esEdicion && isset($miembro['contacto']['tipo_documento']) && $miembro['contacto']['tipo_documento'] == 'Pasaporte' ? 'selected' : '' ?>>Pasaporte</option>
                        </select>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="numero_documento" class="form-label">Número de Documento</label>
                        <input type="text" class="form-control" id="numero_documento" name="contacto[numero_documento]" 
                               value="<?= $esEdicion && isset($miembro['contacto']['numero_documento']) ? htmlspecialchars($miembro['contacto']['numero_documento']) : '' ?>">
                    </div>
                </div>

                <!-- Continuar con el resto de campos de contacto: teléfono, país, ciudad, dirección, etc. -->
            </div>

            <!-- Pestaña de Estudios/Trabajo -->
            <div class="tab-pane fade" id="estudios" role="tabpanel">
                <!-- Campos para Estudios y Trabajo -->
            </div>

            <!-- Pestaña de Tallas -->
            <div class="tab-pane fade" id="tallas" role="tabpanel">
                <!-- Campos para Tallas -->
            </div>

            <!-- Pestaña de Carrera Bíblica -->
            <div class="tab-pane fade" id="espiritual" role="tabpanel">
                <!-- Campos para Carrera Bíblica -->
            </div>
        </div>

        <div class="mt-4">
            <button type="submit" class="btn btn-primary">
                <?= $esEdicion ? 'Actualizar' : 'Registrar' ?> Miembro
            </button>
            <a href="<?= APP_URL ?>/miembros" class="btn btn-secondary ms-2">Cancelar</a>
        </div>
    </form>
</div>


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\views\miembros\index.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\app\views\miembros\index.php
?>
<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Directorio de Miembros</h1>
        <a href="<?= APP_URL ?>/miembros/crear" class="btn btn-primary">
            <i class="fas fa-plus-circle"></i> Nuevo Miembro
        </a>
    </div>
    
    <?php if (isset($_SESSION['flash_message'])): ?>
        <div class="alert alert-<?= $_SESSION['flash_type'] ?? 'info' ?> alert-dismissible fade show">
            <?= $_SESSION['flash_message'] ?>
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
        <?php 
        unset($_SESSION['flash_message']);
        unset($_SESSION['flash_type']);
        ?>
    <?php endif; ?>
    
    <!-- Formulario de búsqueda -->
    <div class="card mb-4">
        <div class="card-body">
            <form action="<?= APP_URL ?>/miembros" method="get" class="row g-3">
                <div class="col-md-8">
                    <input type="text" name="busqueda" class="form-control" 
                           placeholder="Buscar por nombre, apellido, celular, localidad..." 
                           value="<?= htmlspecialchars($busqueda ?? '') ?>">
                </div>
                <div class="col-md-4">
                    <button type="submit" class="btn btn-primary w-100">
                        <i class="fas fa-search"></i> Buscar
                    </button>
                </div>
            </form>
        </div>
    </div>
    
    <div class="card shadow">
        <div class="card-body">
            <?php if (empty($miembros)): ?>
                <div class="alert alert-info">
                    <?= !empty($busqueda) ? 'No se encontraron resultados para tu búsqueda.' : 'No hay miembros registrados todavía.' ?>
                </div>
            <?php else: ?>
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Nombre completo</th>
                                <th>Celular</th>
                                <th>Localidad</th>
                                <th>Estado espiritual</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php foreach ($miembros as $miembro): ?>
                                <tr>
                                    <td><?= $miembro['id'] ?></td>
                                    <td><?= htmlspecialchars($miembro['nombres'] . ' ' . $miembro['apellidos']) ?></td>
                                    <td><?= htmlspecialchars($miembro['celular'] ?? 'No registrado') ?></td>
                                    <td><?= htmlspecialchars($miembro['localidad'] ?? 'No registrada') ?></td>
                                    <td><?= htmlspecialchars($miembro['estado_espiritual'] ?? 'No registrado') ?></td>
                                    <td>
                                        <a href="<?= APP_URL ?>/miembros/<?= $miembro['id'] ?>" class="btn btn-sm btn-info" title="Ver detalles">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                    </td>
                                </tr>
                            <?php endforeach; ?>
                        </tbody>
                    </table>
                </div>
                
                <!-- Paginación -->
                <?php if ($totalPaginas > 1): ?>
                    <nav aria-label="Navegación de páginas">
                        <ul class="pagination justify-content-center">
                            <?php if ($pagina > 1): ?>
                                <li class="page-item">
                                    <a class="page-link" href="<?= APP_URL ?>/miembros?pagina=<?= $pagina - 1 ?><?= !empty($busqueda) ? '&busqueda=' . urlencode($busqueda) : '' ?>">
                                        &laquo; Anterior
                                    </a>
                                </li>
                            <?php endif; ?>
                            
                            <?php for ($i = 1; $i <= $totalPaginas; $i++): ?>
                                <li class="page-item <?= $i === $pagina ? 'active' : '' ?>">
                                    <a class="page-link" href="<?= APP_URL ?>/miembros?pagina=<?= $i ?><?= !empty($busqueda) ? '&busqueda=' . urlencode($busqueda) : '' ?>">
                                        <?= $i ?>
                                    </a>
                                </li>
                            <?php endfor; ?>
                            
                            <?php if ($pagina < $totalPaginas): ?>
                                <li class="page-item">
                                    <a class="page-link" href="<?= APP_URL ?>/miembros?pagina=<?= $pagina + 1 ?><?= !empty($busqueda) ? '&busqueda=' . urlencode($busqueda) : '' ?>">
                                        Siguiente &raquo;
                                    </a>
                                </li>
                            <?php endif; ?>
                        </ul>
                    </nav>
                <?php endif; ?>
            <?php endif; ?>
        </div>
    </div>
</div>


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\views\miembros\ver.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\app\views\miembros\ver.php

// IMPORTANTE: Primero detectar el ID de la URL 
$uri = $_SERVER['REQUEST_URI'];
$debug_id = null;
if (preg_match('#/miembros/(\d+)#', $uri, $matches)) {
    $debug_id = (int)$matches[1];
    error_log("ID detectado en URL: {$debug_id}");
}

// Verificar si los datos del miembro corresponden al ID de la URL
if ($debug_id && (!isset($miembro['id']) || $miembro['id'] != $debug_id)) {
    error_log("ID del miembro en datos ({$miembro['id']}) no coincide con ID en URL ({$debug_id})");
    
    // Forzar la obtención de datos correctos (solución de emergencia)
    require_once __DIR__ . '/../../models/Miembro.php';
    $model = new \App\Models\Miembro();
    $miembro = $model->getFullProfile($debug_id);
    
    error_log("Datos forzados obtenidos: " . json_encode(array_keys($miembro)));
}

// Añadir comentario de depuración
echo "<!-- DEBUG: ID URL: {$debug_id} | ID miembro: {$miembro['id']} -->";
// Añadir esta línea de depuración temporal
echo "<!-- DEBUG: " . htmlspecialchars(json_encode($miembro)) . " -->";
?>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1><?= htmlspecialchars($miembro['nombres'] . ' ' . $miembro['apellidos']) ?></h1>
        <div>
            <a href="<?= APP_URL ?>/miembros/editar/<?= $miembro['id'] ?>" class="btn btn-primary me-2">
                <i class="fas fa-edit"></i> Editar
            </a>
            <a href="<?= APP_URL ?>/miembros" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Volver
            </a>
        </div>
    </div>

    <!-- Información de perfil en pestañas -->
    <ul class="nav nav-tabs" id="perfilTabs" role="tablist">
        <li class="nav-item">
            <a class="nav-link active" id="general-tab" data-bs-toggle="tab" href="#general" role="tab">Información General</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="contacto-tab" data-bs-toggle="tab" href="#contacto" role="tab">Contacto</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="estudios-tab" data-bs-toggle="tab" href="#estudios" role="tab">Estudios/Trabajo</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="tallas-tab" data-bs-toggle="tab" href="#tallas" role="tab">Tallas</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="carrera-tab" data-bs-toggle="tab" href="#carrera" role="tab">Carrera Bíblica</a>
        </li>
    </ul>

    <div class="tab-content mt-4" id="perfilTabsContent">
        <!-- Pestaña de Información General -->
        <div class="tab-pane fade show active" id="general" role="tabpanel">
            <div class="row">
                <div class="col-md-4 mb-4">
                    <!-- Foto del miembro -->
                    <div class="text-center">
                        <?php if(!empty($miembro['foto'])): ?>
                            <img src="<?= APP_URL ?>/uploads/miembros/<?= $miembro['foto'] ?>" alt="Foto de <?= htmlspecialchars($miembro['nombres']) ?>" 
                                 class="img-fluid rounded-circle" style="width: 200px; height: 200px; object-fit: cover;">
                        <?php else: ?>
                            <div class="bg-light rounded-circle d-flex align-items-center justify-content-center" 
                                 style="width: 200px; height: 200px; margin: 0 auto;">
                                <i class="fas fa-user fa-5x text-secondary"></i>
                            </div>
                        <?php endif; ?>
                    </div>
                </div>
                <div class="col-md-8">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Datos Personales</h5>
                            <table class="table table-striped">
                                <tbody>
                                    <tr>
                                        <th scope="row" style="width: 30%">Celular:</th>
                                        <td><?= htmlspecialchars($miembro['celular'] ?? 'No disponible') ?></td>
                                    </tr>
                                    <tr>
                                        <th scope="row">Localidad:</th>
                                        <td><?= htmlspecialchars($miembro['localidad'] ?? 'No disponible') ?></td>
                                    </tr>
                                    <tr>
                                        <th scope="row">Barrio:</th>
                                        <td><?= htmlspecialchars($miembro['barrio'] ?? 'No disponible') ?></td>
                                    </tr>
                                    <tr>
                                        <th scope="row">Fecha de Nacimiento:</th>
                                        <td><?= $miembro['fecha_nacimiento'] ? date('d/m/Y', strtotime($miembro['fecha_nacimiento'])) : 'No disponible' ?></td>
                                    </tr>
                                    <tr>
                                        <th scope="row">Estado Espiritual:</th>
                                        <td><?= htmlspecialchars($miembro['estado_espiritual'] ?? 'No disponible') ?></td>
                                    </tr>
                                    <tr>
                                        <th scope="row">Fecha de Ingreso:</th>
                                        <td><?= $miembro['fecha_ingreso'] ? date('d/m/Y', strtotime($miembro['fecha_ingreso'])) : 'No disponible' ?></td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            
            <?php if(isset($miembro['recorrido_espiritual']) && !empty($miembro['recorrido_espiritual'])): ?>
            <div class="card mt-3">
                <div class="card-body">
                    <h5 class="card-title">Recorrido Espiritual</h5>
                    <p class="card-text"><?= nl2br(htmlspecialchars($miembro['recorrido_espiritual'])) ?></p>
                </div>
            </div>
            <?php endif; ?>
        </div>

        <!-- Pestaña de Contacto -->
        <div class="tab-pane fade" id="contacto" role="tabpanel">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Información de Contacto</h5>
                    <?php if(isset($miembro['contacto'])): ?>
                        <table class="table table-striped">
                            <tbody>
                                <tr>
                                    <th scope="row" style="width: 30%">Tipo de Documento:</th>
                                    <td><?= htmlspecialchars($miembro['contacto']['tipo_documento'] ?? 'No disponible') ?></td>
                                </tr>
                                <tr>
                                    <th scope="row">Número de Documento:</th>
                                    <td><?= htmlspecialchars($miembro['contacto']['numero_documento'] ?? 'No disponible') ?></td>
                                </tr>
                                <tr>
                                    <th scope="row">Teléfono:</th>
                                    <td><?= htmlspecialchars($miembro['contacto']['telefono'] ?? 'No disponible') ?></td>
                                </tr>
                                <tr>
                                    <th scope="row">País:</th>
                                    <td><?= htmlspecialchars($miembro['contacto']['pais'] ?? 'No disponible') ?></td>
                                </tr>
                                <tr>
                                    <th scope="row">Ciudad:</th>
                                    <td><?= htmlspecialchars($miembro['contacto']['ciudad'] ?? 'No disponible') ?></td>
                                </tr>
                                <tr>
                                    <th scope="row">Dirección:</th>
                                    <td><?= htmlspecialchars($miembro['contacto']['direccion'] ?? 'No disponible') ?></td>
                                </tr>
                                <tr>
                                    <th scope="row">Estado Civil:</th>
                                    <td><?= htmlspecialchars($miembro['contacto']['estado_civil'] ?? 'No disponible') ?></td>
                                </tr>
                                <tr>
                                    <th scope="row">Correo Electrónico:</th>
                                    <td><?= htmlspecialchars($miembro['contacto']['correo_electronico'] ?? 'No disponible') ?></td>
                                </tr>
                            </tbody>
                        </table>
                    <?php else: ?>
                        <div class="alert alert-info">No hay información de contacto disponible.</div>
                    <?php endif; ?>
                </div>
            </div>
        </div>

        <!-- Incluir otras pestañas: estudios, tallas, carrera bíblica -->

    </div>
</div>


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\views\partials\header.php
=============================================================

<?php
?>
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><?= $title ?? 'Iglesia En Casa' ?></title>
    
    <!-- Solución temporal: Tailwind desde CDN -->
    <script src="https://cdn.tailwindcss.com"></script>

    <!-- Tus estilos existentes -->
    <link rel="stylesheet" href="<?= APP_URL ?>/app/public/css/styles.css">
    
    <!-- Bootstrap CSS (opcional - puedes eliminarlo cuando migres completamente a Tailwind) -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Font Awesome para iconos -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <?php if (isset($page_specific_css)): ?>
    <!-- CSS específico de página -->
    <link rel="stylesheet" href="<?= APP_URL ?>/css/pages/<?= $page_specific_css ?>.css">
    <?php endif; ?>
</head>
<body class="bg-gray-50 min-h-screen">
    <!-- Contenido principal de la página se insertará aquí -->


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\app\views\partials\navbar.php
=============================================================

<?php
// Añadir a tu barra de navegación

 if (isset($_SESSION['user_id'])): ?>
<div class="ml-auto">
    <a href="<?= APP_URL ?>/logout" class="btn btn-outline-light btn-sm">
        <i class="fas fa-sign-out-alt"></i> Cerrar Sesión
    </a>
</div>
<?php endif; ?>


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\database\permisos.php
=============================================================

<?php

require_once __DIR__ . '/../app/config/database.php';

try {
    $db = Database::getInstance()->getConnection();
    
    // Crear tabla de Permisos
    $db->exec("
        CREATE TABLE IF NOT EXISTS Permisos (
            id INT AUTO_INCREMENT PRIMARY KEY,
            nombre VARCHAR(50) NOT NULL UNIQUE,
            descripcion VARCHAR(255) NOT NULL,
            categoria VARCHAR(50) NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
        )
    ");
    
    // Crear tabla pivot RolesPermisos
    $db->exec("
        CREATE TABLE IF NOT EXISTS RolesPermisos (
            rol_id INT,
            permiso_id INT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (rol_id, permiso_id),
            FOREIGN KEY (rol_id) REFERENCES Roles(id) ON DELETE CASCADE,
            FOREIGN KEY (permiso_id) REFERENCES Permisos(id) ON DELETE CASCADE
        )
    ");
    
    // Insertar permisos básicos
    $permisos = [
        // Miembros
        ['ver_miembros', 'Ver listado de miembros', 'Miembros'],
        ['crear_miembro', 'Crear nuevos miembros', 'Miembros'],
        ['editar_miembro', 'Editar información de miembros', 'Miembros'],
        ['eliminar_miembro', 'Eliminar miembros del sistema', 'Miembros'],
        
        // Ministerios
        ['ver_ministerios', 'Ver listado de ministerios', 'Ministerios'],
        ['crear_ministerio', 'Crear nuevos ministerios', 'Ministerios'],
        ['editar_ministerio', 'Editar información de ministerios', 'Ministerios'],
        ['eliminar_ministerio', 'Eliminar ministerios', 'Ministerios'],
        
        // Sistema
        ['gestionar_roles', 'Gestionar roles y permisos', 'Sistema'],
        ['ver_logs', 'Ver registros del sistema', 'Sistema'],
        ['configurar_sistema', 'Configurar parámetros del sistema', 'Sistema']
    ];
    
    $stmt = $db->prepare("INSERT IGNORE INTO Permisos (nombre, descripcion, categoria) VALUES (?, ?, ?)");
    
    foreach ($permisos as $permiso) {
        $stmt->execute($permiso);
    }
    
    // Asignar todos los permisos al rol Admin (rol_id = 1)
    $db->exec("
        INSERT IGNORE INTO RolesPermisos (rol_id, permiso_id)
        SELECT 1, id FROM Permisos
    ");
    
    echo "✅ Tablas de permisos creadas y datos iniciales insertados correctamente\n";
    
} catch (PDOException $e) {
    echo "❌ Error: " . $e->getMessage() . "\n";
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\database\seed.php
=============================================================

<?php

require_once __DIR__ . '/../app/config/database.php';

class DatabaseSeeder {
    private $db;
    
    public function __construct() {
        $this->db = Database::getInstance()->getConnection();
    }
    
    public function seed() {
        try {
            $this->db->beginTransaction();
            
            $this->seedRoles();
            $this->seedInformacionGeneral();
            $this->seedContacto();
            $this->seedMinisterios();
            $this->seedMiembrosMinisterios();
            $this->seedUsuarios();
            
            $this->db->commit();
            return true;
        } catch (Exception $e) {
            $this->db->rollBack();
            $this->logError($e->getMessage());
            return false;
        }
    }
    
    private function seedRoles() {
        $roles = [
            ['Admin', 'Administrador del sistema', 5],
            ['Líder', 'Líder de ministerio', 4],
            ['Coordinador', 'Coordinador de área', 3],
            ['Servidor', 'Servidor en ministerio', 2],
            ['Miembro', 'Miembro regular', 1]
        ];
        
        $stmt = $this->db->prepare("INSERT INTO Roles (nombre, descripcion, nivel_permiso) VALUES (?, ?, ?)");
        
        foreach ($roles as $role) {
            $stmt->execute($role);
        }
    }
    
    private function seedInformacionGeneral() {
        $miembros = [
            ['Juan', 'Pérez', '+573101234567', 'Kennedy', 'Patio Bonito', '1985-06-15', NULL, 'Invitación directa'],
            ['María', 'López', '+573119876543', 'Suba', 'Rincón', '1990-03-22', NULL, 'Familiar'],
            ['Carlos', 'Rodríguez', '+573157894561', 'Chapinero', 'La Soledad', '1982-11-07', NULL, 'Redes sociales'],
            ['Ana', 'Martínez', '+573203216547', 'Usaquén', 'Santa Bárbara', '1988-09-30', NULL, 'Amigo'],
            ['Pedro', 'González', '+573174563210', 'Fontibón', 'Modelia', '1979-04-18', NULL, 'Familiar']
        ];
        
        $stmt = $this->db->prepare("
            INSERT INTO InformacionGeneral 
            (nombres, apellidos, celular, localidad, barrio, fecha_nacimiento, invitado_por, conector) 
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ");
        
        foreach ($miembros as $index => $miembro) {
            // Para el primer registro no tendrá invitado_por
            if ($index === 0) {
                $miembro[6] = NULL;
            } else {
                // Los demás fueron invitados por el primero
                $miembro[6] = 1;
            }
            $stmt->execute($miembro);
        }
    }
    
    private function seedContacto() {
        $contactos = [
            [1, 'CC', '1023456789', '6013456789', 'Colombia', 'Bogotá', 'Cra 15 #45-67', 'Casado', 'juan.perez@email.com'],
            [2, 'CC', '1034567890', '6014567890', 'Colombia', 'Bogotá', 'Calle 80 #23-45', 'Soltera', 'maria.lopez@email.com'],
            [3, 'CC', '1045678901', '6015678901', 'Colombia', 'Bogotá', 'Av 68 #34-56', 'Casado', 'carlos.rodriguez@email.com'],
            [4, 'CE', '1056789012', '6016789012', 'Colombia', 'Bogotá', 'Cra 7 #56-78', 'Casada', 'ana.martinez@email.com'],
            [5, 'CC', '1067890123', '6017890123', 'Colombia', 'Bogotá', 'Calle 100 #67-89', 'Soltero', 'pedro.gonzalez@email.com']
        ];
        
        $stmt = $this->db->prepare("
            INSERT INTO Contacto 
            (miembro_id, tipo_documento, numero_documento, telefono, pais, ciudad, direccion, estado_civil, correo_electronico) 
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ");
        
        foreach ($contactos as $contacto) {
            $stmt->execute($contacto);
        }
    }
    
    private function seedMinisterios() {
        $ministerios = [
            ['Alabanza', 'Ministerio de música y adoración', 1],
            ['Niños', 'Ministerio de atención a niños', 2],
            ['Jóvenes', 'Ministerio juvenil', 3],
            ['Matrimonios', 'Ministerio para parejas casadas', 4],
            ['Servicio', 'Ministerio de apoyo logístico', 5]
        ];
        
        $stmt = $this->db->prepare("
            INSERT INTO Ministerios 
            (nombre, descripcion, lider_id) 
            VALUES (?, ?, ?)
        ");
        
        foreach ($ministerios as $ministerio) {
            $stmt->execute($ministerio);
        }
    }
    
    private function seedMiembrosMinisterios() {
        $miembrosMinisterios = [
            [1, 1, 1, '2022-01-15', NULL],
            [2, 2, 2, '2022-02-20', NULL],
            [3, 3, 2, '2022-03-10', NULL],
            [4, 4, 2, '2022-04-05', NULL],
            [5, 5, 2, '2022-05-12', NULL],
            [1, 3, 3, '2022-06-18', NULL],
            [2, 4, 3, '2022-07-22', NULL],
            [3, 5, 3, '2022-08-30', NULL]
        ];
        
        $stmt = $this->db->prepare("
            INSERT INTO MiembrosMinisterios 
            (miembro_id, ministerio_id, rol_id, fecha_inicio, fecha_fin) 
            VALUES (?, ?, ?, ?, ?)
        ");
        
        foreach ($miembrosMinisterios as $mm) {
            $stmt->execute($mm);
        }
    }
    
    private function seedUsuarios() {
        $usuarios = [
            [1, 'admin', password_hash('admin123', PASSWORD_DEFAULT), 1],
            [2, 'maria', password_hash('maria123', PASSWORD_DEFAULT), 2],
            [3, 'carlos', password_hash('carlos123', PASSWORD_DEFAULT), 3],
            [4, 'ana', password_hash('ana123', PASSWORD_DEFAULT), 4],
            [5, 'pedro', password_hash('pedro123', PASSWORD_DEFAULT), 5]
        ];
        
        $stmt = $this->db->prepare("
            INSERT INTO Usuarios 
            (miembro_id, nombre_usuario, password_hash, rol_id) 
            VALUES (?, ?, ?, ?)
        ");
        
        foreach ($usuarios as $usuario) {
            $stmt->execute($usuario);
        }
    }
    
    private function logError($message) {
        $logFile = __DIR__ . '/../app/logs/seed_errors.log';
        $directory = dirname($logFile);
        
        if (!is_dir($directory)) {
            mkdir($directory, 0755, true);
        }
        
        $timestamp = date('Y-m-d H:i:s');
        $logMessage = "[$timestamp] Error de seeding: $message" . PHP_EOL;
        file_put_contents($logFile, $logMessage, FILE_APPEND);
    }
}

// Ejecutar el seeder
$seeder = new DatabaseSeeder();
if ($seeder->seed()) {
    echo "Base de datos poblada correctamente." . PHP_EOL;
} else {
    echo "Error al poblar la base de datos. Revisa los logs." . PHP_EOL;
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\database\setup_database.php
=============================================================

<?php

try {
    // Conectar sin especificar una base de datos
    $pdo = new PDO("mysql:host=localhost", "root", "");
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    
    // Crear la base de datos si no existe
    $pdo->exec("CREATE DATABASE IF NOT EXISTS IglesiaEnCasa CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");
    
    echo "✅ Base de datos 'IglesiaEnCasa' verificada/creada correctamente\n";
    
    // Seleccionar la base de datos
    $pdo->exec("USE IglesiaEnCasa");
    
    // Crear tabla de Roles si no existe (necesaria para el script permisos.php)
    $pdo->exec("
        CREATE TABLE IF NOT EXISTS Roles (
            id INT AUTO_INCREMENT PRIMARY KEY,
            nombre VARCHAR(50) NOT NULL UNIQUE,
            descripcion VARCHAR(255) NOT NULL,
            nivel_acceso INT NOT NULL DEFAULT 1,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
        )
    ");
    
    // Insertar rol de administrador si no existe
    $stmt = $pdo->prepare("INSERT IGNORE INTO Roles (id, nombre, descripcion, nivel_acceso) VALUES (1, 'Administrador', 'Control total del sistema', 100)");
    $stmt->execute();
    
    echo "✅ Tabla de Roles creada y rol de administrador verificado\n";
    
} catch (PDOException $e) {
    echo "❌ Error: " . $e->getMessage() . "\n";
    exit(1);
}

echo "\n✅ Configuración de base de datos completada. Ahora puedes ejecutar otros scripts.\n";


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\database\update_usuarios.php
=============================================================

<?php
// database/update_usuarios.php
require_once __DIR__ . '/../app/config/database.php';

try {
    $db = Database::getInstance()->getConnection();
    
    // Añadir campos necesarios para JWT y reset de contraseña
    $db->exec("
        ALTER TABLE Usuarios 
        ADD COLUMN remember_token VARCHAR(255) NULL,
        ADD COLUMN token_reset VARCHAR(255) NULL,
        ADD COLUMN token_expira DATETIME NULL
    ");
    
    echo "✅ Campos para JWT y reset de contraseña añadidos a la tabla Usuarios\n";
    
} catch (PDOException $e) {
    if (strpos($e->getMessage(), "Duplicate column name") !== false) {
        echo "ℹ️ Las columnas ya existen en la tabla Usuarios\n";
    } else {
        echo "❌ Error: " . $e->getMessage() . "\n";
    }
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\tests\check_members.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\tests\check_member.php
require_once __DIR__ . '/../app/config/config.php';
require_once __DIR__ . '/../app/config/database.php';

// ID a verificar (puedes cambiarlo por GET)
$id = isset($_GET['id']) ? (int)$_GET['id'] : 2;

echo "<h1>Verificación de miembro con ID: {$id}</h1>";

try {
    // Obtener conexión directa
    $database = Database::getInstance();
    $db = $database->getConnection();
    
    // Consulta directa para verificar información general
    $stmt = $db->prepare("SELECT * FROM InformacionGeneral WHERE id = :id");
    $stmt->execute(['id' => $id]);
    $miembro = $stmt->fetch();
    
    if (!$miembro) {
        echo "<div style='color:red'>No se encontró ningún miembro con ID {$id} en la base de datos.</div>";
    } else {
        echo "<h2>Datos básicos del miembro:</h2>";
        echo "<pre>";
        print_r($miembro);
        echo "</pre>";
        
        // Verificar tablas relacionadas
        echo "<h2>Datos relacionados:</h2>";
        
        // Contacto
        $stmt = $db->prepare("SELECT * FROM Contacto WHERE miembro_id = :id");
        $stmt->execute(['id' => $id]);
        $contacto = $stmt->fetch();
        echo "<h3>Contacto:</h3>";
        echo "<pre>";
        print_r($contacto ?: "No hay datos de contacto");
        echo "</pre>";
        
        // EstudiosTrabajo
        $stmt = $db->prepare("SELECT * FROM EstudiosTrabajo WHERE miembro_id = :id");
        $stmt->execute(['id' => $id]);
        $estudios = $stmt->fetch();
        echo "<h3>Estudios y Trabajo:</h3>";
        echo "<pre>";
        print_r($estudios ?: "No hay datos de estudios");
        echo "</pre>";
        
        // Tallas
        $stmt = $db->prepare("SELECT * FROM Tallas WHERE miembro_id = :id");
        $stmt->execute(['id' => $id]);
        $tallas = $stmt->fetch();
        echo "<h3>Tallas:</h3>";
        echo "<pre>";
        print_r($tallas ?: "No hay datos de tallas");
        echo "</pre>";
        
        // CarreraBiblica
        $stmt = $db->prepare("SELECT * FROM CarreraBiblica WHERE miembro_id = :id");
        $stmt->execute(['id' => $id]);
        $carrera = $stmt->fetch();
        echo "<h3>Carrera Bíblica:</h3>";
        echo "<pre>";
        print_r($carrera ?: "No hay datos de carrera bíblica");
        echo "</pre>";
        
        echo "<p>Enlaces de prueba:</p>";
        echo "<ul>";
        echo "<li><a href='" . APP_URL . "/miembros/{$id}' target='_blank'>Ver en sistema (miembros/{$id})</a></li>";
        echo "<li><a href='check_member.php?id=" . ($id+1) . "'>Verificar miembro " . ($id+1) . "</a></li>";
        echo "<li><a href='check_member.php?id=" . ($id-1) . "'>Verificar miembro " . ($id-1) . "</a></li>";
        echo "</ul>";
    }
} catch (PDOException $e) {
    echo "<div style='color:red'>Error en la base de datos: " . $e->getMessage() . "</div>";
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\tests\debug.php
=============================================================

<?php
// filepath: /Applications/XAMPP/xamppfiles/htdocs/Encasa_Database/debug.php

// Configuración
define('BASE_PATH', __DIR__);
define('APP_PATH', BASE_PATH . '/app');
define('CONFIG_PATH', APP_PATH . '/config');

// Cargar autoloader
require_once CONFIG_PATH . '/config.php';
require_once CONFIG_PATH . '/database.php';
require_once CONFIG_PATH . '/autoload.php';

// Crear instancia del modelo Usuario
$userModel = new \App\Models\Usuario();

// Función para mostrar resultados
function showResult($title, $data) {
    echo "<h3>$title</h3>";
    echo "<pre>";
    print_r($data);
    echo "</pre>";
    echo "<hr>";
}

// 1. Mostrar todos los usuarios
$users = $userModel->getAll();
foreach ($users as &$user) {
    // Ocultar contraseña completa
    $user['password'] = substr($user['password'], 0, 15) . '...';
}
showResult("Usuarios registrados", $users);

// 2. Crear un usuario de prueba (descomentar si necesitas crear uno)
/*
$newUser = [
    'username' => 'testuser',
    'email' => 'test@example.com',
    'password' => '123456',
    'nombre_completo' => 'Usuario de Prueba',
    'activo' => 1
];

$userID = $userModel->register($newUser);
showResult("Resultado de creación de usuario", $userID ? "Usuario creado con ID: $userID" : "Error al crear usuario");
*/

// Descomentar esta sección para crear un usuario nuevo
$newUser = [
    'username' => 'admin2',
    'email' => 'admin2@ejemplo.com',
    'password' => 'password123',
    'nombre_completo' => 'Administrador 2',
    'activo' => 1
];

$userID = $userModel->register($newUser);
showResult("Resultado de creación de usuario", $userID ? "Usuario creado con ID: $userID" : "Error al crear usuario");

// 3. Probar autenticación con un usuario existente
$testAuth = $userModel->authenticate('rafa.gzfr@gmail.com', 'Amor2025+'); // cambia por credenciales reales
showResult("Prueba de autenticación", $testAuth ? "Autenticación exitosa" : "Autenticación fallida");

// 4. Ver registro específico
if (!empty($users)) {
    $firstUser = $users[0];
    $userId = $firstUser['id'];
    $user = $userModel->findById($userId);
    showResult("Usuario con ID $userId", $user);
}

// 1. Primero, cambia la contraseña
$userId = 1;
$newPassword = 'Amor2025+';

$stmt = $userModel->db->prepare("UPDATE Usuarios SET password = :password WHERE id = :id");
$stmt->bindValue(':password', $userModel->hashPassword($newPassword));
$stmt->bindValue(':id', $userId);
$result = $stmt->execute();

showResult("Cambio de contraseña para usuario ID $userId", 
    $result ? "Contraseña actualizada correctamente" : "Error al actualizar contraseña");

// 2. Luego, prueba la autenticación con la nueva contraseña
$testAuth = $userModel->authenticate('rafa.gzfr@gmail.com', 'Amor2025+');
showResult("Prueba de autenticación", $testAuth ? "Autenticación exitosa" : "Autenticación fallida");
?>


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\tests\debug_miembro.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\debug_miembro.php

// Script para verificar directamente un miembro en la base de datos
require_once __DIR__ . '/app/config/config.php';
require_once __DIR__ . '/app/config/database.php';

// ID a verificar (opcional por GET)
$id = isset($_GET['id']) ? (int)$_GET['id'] : 2;

echo "<h1>Depuración de Miembro ID: {$id}</h1>";

try {
    // Conexión directa a la base de datos
    $db = Database::getInstance()->getConnection();
    
    // Consulta básica para obtener datos del miembro
    $stmt = $db->prepare("SELECT * FROM InformacionGeneral WHERE id = ?");
    $stmt->execute([$id]);
    $miembro = $stmt->fetch();
    
    if ($miembro) {
        echo "<h2>Miembro encontrado:</h2>";
        echo "<pre>";
        print_r($miembro);
        echo "</pre>";
        
        // Mostrar datos relacionados
        $tablas = ['Contacto', 'EstudiosTrabajo', 'Tallas', 'CarreraBiblica'];
        
        foreach ($tablas as $tabla) {
            $stmt = $db->prepare("SELECT * FROM {$tabla} WHERE miembro_id = ?");
            $stmt->execute([$id]);
            $datos = $stmt->fetch();
            
            echo "<h3>Datos de {$tabla}:</h3>";
            echo "<pre>";
            print_r($datos ?: "No hay datos relacionados");
            echo "</pre>";
        }
        
        echo "<p><a href='" . APP_URL . "/miembros/{$id}' target='_blank'>Ver en el sistema</a></p>";
    } else {
        echo "<p style='color:red'>No se encontró ningún miembro con ID {$id}</p>";
    }
} catch (Exception $e) {
    echo "<p style='color:red'>Error: " . $e->getMessage() . "</p>";
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\tests\debug_users.php
=============================================================

<?php
// Archivo temporal para depuración: /Applications/XAMPP/xamppfiles/htdocs/Encasa_Database/debug_users.php

// Incluir configuración básica
require_once 'index.php';

// Obtener instancia del modelo
$userModel = new \App\Models\Usuario();

// Mostrar todos los usuarios
echo "<h2>Usuarios registrados:</h2>";
$users = $userModel->getAll();

echo "<pre>";
foreach ($users as $user) {
    // Ocultar la contraseña completa por seguridad
    $user['password'] = substr($user['password'], 0, 10) . '...';
    print_r($user);
}
echo "</pre>";


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\tests\JWTTest.php
=============================================================

<?php

// Incluir el autoloader
require_once __DIR__ . '/../app/config/config.php';
require_once __DIR__ . '/../app/helpers/JWT.php';

use App\Helpers\JWT;

// Clase de pruebas simple
class JWTTest {
    
    public function testEncodeAndDecode() {
        // Configurar una clave secreta específica para las pruebas
        JWT::init('test_secret_key');
        
        // Crear un payload
        $payload = [
            'user_id' => 123,
            'username' => 'testuser'
        ];
        
        // Codificar el token
        $token = JWT::encode($payload, 60); // 60 segundos de expiración
        
        // Verificar que el token se creó y tiene el formato correcto
        echo "Token Creado: ";
        $tokenParts = explode('.', $token);
        echo (count($tokenParts) === 3) ? "PASÓ ✓" : "FALLÓ ✗";
        echo "\n";
        
        // Decodificar el token
        $decoded = JWT::decode($token);
        
        // Verificar que la decodificación fue exitosa
        echo "Decodificación: ";
        echo ($decoded !== false) ? "PASÓ ✓" : "FALLÓ ✗";
        echo "\n";
        
        // Verificar que el payload se mantiene intacto
        echo "Verificación de user_id: ";
        echo ($decoded['user_id'] === 123) ? "PASÓ ✓" : "FALLÓ ✗";
        echo "\n";
        
        echo "Verificación de username: ";
        echo ($decoded['username'] === 'testuser') ? "PASÓ ✓" : "FALLÓ ✗";
        echo "\n";
    }
    
    public function testExpiredToken() {
        // Configurar una clave secreta
        JWT::init('test_secret_key');
        
        // Crear un payload con expiración inmediata
        $payload = ['test' => 'data'];
        
        // Codificar el token con expiración de 1 segundo
        $token = JWT::encode($payload, 1);
        
        // Esperar 2 segundos para que expire
        sleep(2);
        
        // Intentar decodificar el token expirado
        $decoded = JWT::decode($token);
        
        // Verificar que la decodificación falla
        echo "Verificación de expiración: ";
        echo ($decoded === false) ? "PASÓ ✓" : "FALLÓ ✗";
        echo "\n";
    }
    
    public function testInvalidToken() {
        // Configurar una clave secreta
        JWT::init('test_secret_key');
        
        // Token malformado
        $token = "header.payload.invalid_signature";
        
        // Intentar decodificar
        $decoded = JWT::decode($token);
        
        // Verificar que la decodificación falla
        echo "Verificación de token inválido: ";
        echo ($decoded === false) ? "PASÓ ✓" : "FALLÓ ✗";
        echo "\n";
    }
    
    public function runTests() {
        $this->testEncodeAndDecode();
        $this->testExpiredToken();
        $this->testInvalidToken();
    }
}

// Ejecutar pruebas
$test = new JWTTest();
$test->runTests();


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\tests\LoggerTest.php
=============================================================

<?php

// Incluir el autoloader
require_once __DIR__ . '/../app/config/config.php';
require_once __DIR__ . '/../app/helpers/Logger.php';
require_once __DIR__ . '/../app/helpers/functions.php';

use App\Helpers\Logger;

// Clase de pruebas simple
class LoggerTest {
    public $logFile; // Cambiar de private a public
    
    public function __construct() {
        $this->logFile = dirname(__DIR__) . '/app/logs/' . date('Y-m-d') . '.log';
    }
    
    // Añadir este método getter
    public function getLogFile() {
        return $this->logFile;
    }
    
    public function testSingleton() {
        $instance1 = Logger::getInstance();
        $instance2 = Logger::getInstance();
        
        // Verificar que ambas instancias son el mismo objeto
        echo "Prueba Singleton: ";
        echo ($instance1 === $instance2) ? "PASÓ ✓" : "FALLÓ ✗";
        echo "\n";
    }
    
    public function testLogLevels() {
        // Limpiar archivo de log para la prueba
        if (file_exists($this->logFile)) {
            $initialSize = filesize($this->logFile);
        } else {
            $initialSize = 0;
        }
        
        // Registrar mensajes en diferentes niveles
        log_error("Mensaje de error de prueba");
        log_warning("Mensaje de advertencia de prueba");
        log_info("Mensaje informativo de prueba");
        log_debug("Mensaje de depuración de prueba");
        
        // Verificar que se escribieron los logs
        clearstatcache();
        $newSize = file_exists($this->logFile) ? filesize($this->logFile) : 0;
        
        echo "Prueba Logging: ";
        echo ($newSize > $initialSize) ? "PASÓ ✓" : "FALLÓ ✗";
        echo "\n";
        
        // Verificar contenido
        $content = file_get_contents($this->logFile);
        
        echo "Contenido Error: ";
        echo (strpos($content, "ERROR") !== false) ? "PASÓ ✓" : "FALLÓ ✗";
        echo "\n";
        
        echo "Contenido Warning: ";
        echo (strpos($content, "WARNING") !== false) ? "PASÓ ✓" : "FALLÓ ✗";
        echo "\n";
    }
    
    public function runTests() {
        $this->testSingleton();
        $this->testLogLevels();
    }
}

// Ejecutar pruebas
$test = new LoggerTest();
$test->runTests();

echo "\nPruebas completadas. Verifica el archivo de log en: " . $test->logFile;


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\tests\login-test.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\login-test.php

// Mostrar errores
ini_set('display_errors', 1);
error_reporting(E_ALL);

echo "Inicio del script<br>";

// Configuración inicial
require_once __DIR__ . '/app/config/config.php';
echo "Config cargado<br>";

require_once __DIR__ . '/app/helpers/functions.php';
echo "Helpers cargados<br>";

// Autoload con diagnóstico
spl_autoload_register(function($className) {
    $classFile = str_replace('\\', '/', $className) . '.php';
    $filepath = __DIR__ . '/' . $classFile;
    
    echo "Intentando cargar: $filepath<br>";
    
    if (file_exists($filepath)) {
        require_once $filepath;
        echo "Clase $className cargada<br>";
    } else {
        echo "Clase $className no encontrada<br>";
    }
});

try {
    // Cargar controlador directamente
    echo "Intentando crear instancia de AuthController<br>";
    $controller = new App\Controllers\AuthController();
    echo "Instancia creada<br>";
    $controller->login();
} catch (Exception $e) {
    echo "Error: " . $e->getMessage();
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\tests\ModelsTest.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\tests\ModelsTest.php
require_once __DIR__ . '/../app/config/config.php';
require_once __DIR__ . '/../app/config/database.php'; // Agregar esta línea
require_once __DIR__ . '/../app/models/Model.php';
require_once __DIR__ . '/../app/models/Miembro.php';
require_once __DIR__ . '/../app/models/Contacto.php';
require_once __DIR__ . '/../app/models/EstudiosTrabajo.php';
require_once __DIR__ . '/../app/models/Tallas.php';
require_once __DIR__ . '/../app/models/CarreraBiblica.php';

use App\Models\Miembro;
use App\Models\Contacto;
use App\Models\EstudiosTrabajo;
use App\Models\Tallas;
use App\Models\CarreraBiblica;

// Prueba de modelos
echo "<h1>Prueba de modelos para Miembros</h1>";

// Instanciar modelos
$miembroModel = new Miembro();
$contactoModel = new Contacto();
$estudiosModel = new EstudiosTrabajo();
$tallasModel = new Tallas();
$carreraModel = new CarreraBiblica();

echo "<pre>";
echo "Modelos cargados correctamente:";
echo "\nMiembro: " . (class_exists('App\Models\Miembro') ? 'OK' : 'ERROR');
echo "\nContacto: " . (class_exists('App\Models\Contacto') ? 'OK' : 'ERROR');
echo "\nEstudiosTrabajo: " . (class_exists('App\Models\EstudiosTrabajo') ? 'OK' : 'ERROR');
echo "\nTallas: " . (class_exists('App\Models\Tallas') ? 'OK' : 'ERROR');
echo "\nCarreraBiblica: " . (class_exists('App\Models\CarreraBiblica') ? 'OK' : 'ERROR');
echo "</pre>";

// Prueba: obtener todos los miembros
echo "<h2>Listado de miembros existentes:</h2>";
$miembros = $miembroModel->getAll();
if (empty($miembros)) {
    echo "<p>No hay miembros registrados aún.</p>";
} else {
    echo "<table border='1' style='border-collapse: collapse; width: 100%;'>";
    echo "<tr><th>ID</th><th>Nombre</th><th>Apellido</th><th>Celular</th><th>Localidad</th></tr>";
    foreach ($miembros as $miembro) {
        echo "<tr>";
        echo "<td>{$miembro['id']}</td>";
        echo "<td>{$miembro['nombres']}</td>";
        echo "<td>{$miembro['apellidos']}</td>";
        echo "<td>{$miembro['celular']}</td>";
        echo "<td>{$miembro['localidad']}</td>";
        echo "</tr>";
    }
    echo "</table>";
}

echo "<h2>Estado de las tablas relacionadas:</h2>";
echo "<pre>";
echo "Contacto: " . ($contactoModel ? 'Modelo cargado' : 'Error');
echo "\nEstudiosTrabajo: " . ($estudiosModel ? 'Modelo cargado' : 'Error');
echo "\nTallas: " . ($tallasModel ? 'Modelo cargado' : 'Error');
echo "\nCarreraBiblica: " . ($carreraModel ? 'Modelo cargado' : 'Error');
echo "</pre>";

echo "<p>Fase 1 completada: Modelos básicos implementados.</p>";


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\tests\phpinfo.php
=============================================================

<?php phpinfo(); ?>


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\tests\test.php
=============================================================

<?php

echo "Prueba de servidor funcionando";


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\tests\test_mail.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\test_mail.php
require_once 'index.php';

// Crear instancia del servicio de email
$emailService = new \App\Helpers\EmailService();

// Intentar enviar un correo de prueba
$result = $emailService->sendVerificationCode(
    'rafa.gzfr@gmail.com', // Reemplaza con tu correo
    'Usuario de Prueba', 
    '123456'
);

echo $result ? '✅ Correo enviado correctamente' : '❌ Error al enviar el correo';


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\tests\test_miembro.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\test_miembro.php

require_once __DIR__ . '/app/config/config.php';
require_once __DIR__ . '/app/config/database.php';
require_once __DIR__ . '/app/models/Model.php';
require_once __DIR__ . '/app/models/Miembro.php';

$id = isset($_GET['id']) ? (int)$_GET['id'] : 2;

echo "<h1>Prueba de miembro ID: {$id}</h1>";

try {
    // Inicializar modelo
    $miembroModel = new \App\Models\Miembro();
    
    // Verificar existencia
    $exists = $miembroModel->checkMemberExists($id);
    echo "<p>¿Existe el miembro?: " . ($exists ? 'SÍ' : 'NO') . "</p>";
    
    if ($exists) {
        // Obtener perfil
        $miembro = $miembroModel->getFullProfile($id);
        
        echo "<h2>Datos del perfil:</h2>";
        echo "<pre>";
        print_r($miembro);
        echo "</pre>";
        
        echo "<p>URL de perfil: <a href='" . APP_URL . "/miembros/{$id}' target='_blank'>Ver perfil en sistema</a></p>";
    }
} catch (Exception $e) {
    echo "<p style='color:red'>Error: " . $e->getMessage() . "</p>";
}


=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\tests\test_router.php
=============================================================



=============================================================
ARCHIVO: C:\xampp\htdocs\ENCASA_DATABASE\tools\replace_urls.php
=============================================================

<?php
// filepath: c:\xampp\htdocs\ENCASA_DATABASE\tools\replace_urls.php

// Activar manejo de errores
ini_set('display_errors', 1);
error_reporting(E_ALL);

// Función para registrar mensajes
function log_message($message, $type = 'INFO') {
    echo "[$type] $message\n";
}

// Verificar si la función url() existe
if (!function_exists('url')) {
    log_message("Creando función url() para pruebas", "SETUP");
    function url($path) {
        return "URL_BASE/$path";
    }
}

// Define directorios a escanear
$directories = [
    __DIR__ . '/../app/views',
    __DIR__ . '/../app/Controllers'
];

$count = 0;
$files = 0;
$errors = 0;

// Verificar que los directorios existen
foreach ($directories as $index => $directory) {
    if (!is_dir($directory)) {
        log_message("El directorio no existe: $directory", "ERROR");
        unset($directories[$index]);
        $errors++;
    } else {
        log_message("Escaneando directorio: $directory", "INFO");
    }
}

// Proceder solo si hay directorios válidos
if (empty($directories)) {
    log_message("No hay directorios válidos para escanear", "ERROR");
    exit(1);
}

// Modo de prueba (sin modificar archivos) - cambia a false para aplicar cambios
$test_mode = false;

foreach ($directories as $directory) {
    try {
        $it = new RecursiveDirectoryIterator($directory);
        $it = new RecursiveIteratorIterator($it);
        $it = new RegexIterator($it, '/\.php$/');
        
        foreach ($it as $file) {
            try {
                log_message("Procesando: " . $file, "INFO");
                
                // Verificar permisos de lectura
                if (!is_readable($file)) {
                    log_message("No se puede leer el archivo: $file", "ERROR");
                    $errors++;
                    continue;
                }
                
                $content = file_get_contents($file);
                if ($content === false) {
                    log_message("Error al leer el archivo: $file", "ERROR");
                    $errors++;
                    continue;
                }
                
                $original = $content;
                
                // Reemplazar patrones simples primero
                $simple_patterns = [
                    '<?= APP_URL ?>/miembros' => '<?= url("miembros") ?>',
                    '<?= APP_URL ?>/public' => '<?= url("public") ?>',
                    '<?= APP_URL ?>/assets' => '<?= url("assets") ?>',
                    '<?= APP_URL ?>/usuarios' => '<?= url("usuarios") ?>'
                ];
                
                foreach ($simple_patterns as $pattern => $replacement) {
                    $content = str_replace($pattern, $replacement, $content);
                }
                
                // Verificar si hubo cambios
                if ($content !== $original) {
                    $changes = substr_count($original, 'APP_URL') - substr_count($content, 'APP_URL');
                    log_message("Se encontraron $changes cambios en: $file", "SUCCESS");
                    
                    // Aplicar cambios si no estamos en modo de prueba
                    if (!$test_mode) {
                        if (!is_writable($file)) {
                            log_message("No se puede escribir en el archivo: $file", "ERROR");
                            $errors++;
                            continue;
                        }
                        
                        if (file_put_contents($file, $content) !== false) {
                            $count += $changes;
                            $files++;
                            log_message("Archivo actualizado: $file", "SUCCESS");
                        } else {
                            log_message("Error al escribir en el archivo: $file", "ERROR");
                            $errors++;
                        }
                    } else {
                        log_message("Cambios simulados (modo prueba): no se modificó el archivo", "TEST");
                        $count += $changes;
                        $files++;
                    }
                } else {
                    log_message("Sin cambios en: $file", "INFO");
                }
            } catch (Exception $e) {
                log_message("Error procesando archivo {$file->getPathname()}: " . $e->getMessage(), "ERROR");
                $errors++;
            }
        }
    } catch (Exception $e) {
        log_message("Error al procesar directorio $directory: " . $e->getMessage(), "ERROR");
        $errors++;
    }
}

// Resumen final
echo "\n=== RESUMEN ===\n";
echo "Modo: " . ($test_mode ? "PRUEBA (no se modificaron archivos)" : "REAL (archivos modificados)") . "\n";
echo "Reemplazadas $count ocurrencias de APP_URL en $files archivos\n";
echo "Ocurrieron $errors errores durante el proceso\n";

if ($test_mode) {
    echo "\nEste fue un test. Para aplicar los cambios, cambia \$test_mode = true a \$test_mode = false\n";
}


